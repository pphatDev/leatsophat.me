(()=>{"use strict";var __webpack_modules__={8506:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadBasic: () => (/* binding */ loadBasic)\n/* harmony export */ });\nasync function loadBasic(engine, refresh = true) {\n    const { loadBaseMover } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3245)), { loadCircleShape } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6658)), { loadColorUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2319)), { loadOpacityUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 1749)), { loadOutModesUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8433)), { loadSizeUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2827));\n    await loadBaseMover(engine, false);\n    await loadCircleShape(engine, false);\n    await loadColorUpdater(engine, false);\n    await loadOpacityUpdater(engine, false);\n    await loadOutModesUpdater(engine, false);\n    await loadSizeUpdater(engine, false);\n    await engine.refresh(refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/basic/browser/index.js?")},6873:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Container: () => (/* binding */ Container)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Constants.js\nvar Constants = __webpack_require__(5849);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/Utils.js\nvar Utils = __webpack_require__(5051);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/CanvasUtils.js\nvar CanvasUtils = __webpack_require__(3567);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/ColorUtils.js\nvar ColorUtils = __webpack_require__(6932);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Canvas.js\n\n\n\n\nfunction setTransformValue(factor, newFactor, key) {\n    const newValue = newFactor[key], defaultValue = 1;\n    if (newValue !== undefined) {\n        factor[key] = (factor[key] ?? defaultValue) * newValue;\n    }\n}\nfunction setStyle(canvas, style, important = false) {\n    if (!style) {\n        return;\n    }\n    const element = canvas;\n    if (!element) {\n        return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n        return;\n    }\n    for (const key in style) {\n        const value = style[key];\n        if (!value) {\n            continue;\n        }\n        elementStyle.setProperty(key, value, important ? "important" : "");\n    }\n}\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this._applyPostDrawUpdaters = (particle) => {\n            for (const updater of this._postDrawUpdaters) {\n                updater.afterDraw?.(particle);\n            }\n        };\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n            for (const updater of this._preDrawUpdaters) {\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n                if (updater.getTransformValues) {\n                    const updaterTransform = updater.getTransformValues(particle);\n                    for (const key in updaterTransform) {\n                        setTransformValue(transform, updaterTransform, key);\n                    }\n                }\n                updater.beforeDraw?.(particle);\n            }\n        };\n        this._applyResizePlugins = () => {\n            for (const plugin of this._resizePlugins) {\n                plugin.resize?.();\n            }\n        };\n        this._getPluginParticleColors = (particle) => {\n            let fColor, sColor;\n            for (const plugin of this._colorPlugins) {\n                if (!fColor && plugin.particleFillColor) {\n                    fColor = (0,ColorUtils/* rangeColorToHsl */.R5)(plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                    sColor = (0,ColorUtils/* rangeColorToHsl */.R5)(plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                    break;\n                }\n            }\n            return [fColor, sColor];\n        };\n        this._initCover = async () => {\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color;\n            if (color) {\n                const coverRgb = (0,ColorUtils/* rangeColorToRgb */.BN)(color);\n                if (coverRgb) {\n                    const coverColor = {\n                        ...coverRgb,\n                        a: cover.opacity,\n                    };\n                    this._coverColorStyle = (0,ColorUtils/* getStyleFromRgb */.xx)(coverColor, coverColor.a);\n                }\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!cover.image) {\n                        return;\n                    }\n                    const img = document.createElement("img");\n                    img.addEventListener("load", () => {\n                        this._coverImage = {\n                            image: img,\n                            opacity: cover.opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener("error", (evt) => {\n                        reject(evt.error);\n                    });\n                    img.src = cover.image;\n                });\n            }\n        };\n        this._initStyle = () => {\n            const element = this.element, options = this.container.actualOptions;\n            if (!element) {\n                return;\n            }\n            if (this._fullScreen) {\n                this._originalStyle = (0,Utils/* deepExtend */.zw)({}, element.style);\n                this._setFullScreenStyle();\n            }\n            else {\n                this._resetOriginalStyle();\n            }\n            for (const key in options.style) {\n                if (!key || !options.style) {\n                    continue;\n                }\n                const value = options.style[key];\n                if (!value) {\n                    continue;\n                }\n                element.style.setProperty(key, value, "important");\n            }\n        };\n        this._initTrail = async () => {\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n            if (!trail.enable) {\n                return;\n            }\n            const factorNumerator = 1, opacity = factorNumerator / trail.length;\n            if (trailFill.color) {\n                const fillColor = (0,ColorUtils/* rangeColorToRgb */.BN)(trailFill.color);\n                if (!fillColor) {\n                    return;\n                }\n                this._trailFill = {\n                    color: {\n                        ...fillColor,\n                    },\n                    opacity,\n                };\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!trailFill.image) {\n                        return;\n                    }\n                    const img = document.createElement("img");\n                    img.addEventListener("load", () => {\n                        this._trailFill = {\n                            image: img,\n                            opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener("error", (evt) => {\n                        reject(evt.error);\n                    });\n                    img.src = trailFill.image;\n                });\n            }\n        };\n        this._paintBase = (baseColor) => {\n            this.draw((ctx) => (0,CanvasUtils/* paintBase */.Sn)(ctx, this.size, baseColor));\n        };\n        this._paintImage = (image, opacity) => {\n            this.draw((ctx) => (0,CanvasUtils/* paintImage */.Md)(ctx, this.size, image, opacity));\n        };\n        this._repairStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            this._safeMutationObserver((observer) => observer.disconnect());\n            this._initStyle();\n            this.initBackground();\n            this._safeMutationObserver((observer) => observer.observe(element, { attributes: true }));\n        };\n        this._resetOriginalStyle = () => {\n            const element = this.element, originalStyle = this._originalStyle;\n            if (!(element && originalStyle)) {\n                return;\n            }\n            setStyle(element, originalStyle);\n        };\n        this._safeMutationObserver = (callback) => {\n            if (!this._mutationObserver) {\n                return;\n            }\n            callback(this._mutationObserver);\n        };\n        this._setFullScreenStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            const radix = 10;\n            setStyle(element, {\n                position: "fixed",\n                zIndex: this.container.actualOptions.fullScreen.zIndex.toString(radix),\n                top: "0",\n                left: "0",\n                width: "100%",\n                height: "100%",\n            }, true);\n        };\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill, minimumLength = 0;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > minimumLength && trailFill) {\n            if (trailFill.color) {\n                this._paintBase((0,ColorUtils/* getStyleFromRgb */.xx)(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else if (options.clear) {\n            this.draw((ctx) => {\n                (0,CanvasUtils/* clear */.IU)(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        this.stop();\n        if (this._generated) {\n            const element = this.element;\n            element?.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return;\n        }\n        return cb(ctx);\n    }\n    drawAsync(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return Promise.resolve(undefined);\n        }\n        return cb(ctx);\n    }\n    async drawParticle(particle, delta) {\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius(), minimumSize = 0;\n        if (radius <= minimumSize) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = particle.getStrokeColor() ?? pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        await this.drawAsync(async (ctx) => {\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zIndexFactorOffset = 1, zIndexFactor = zIndexFactorOffset - particle.zIndexFactor, zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate, defaultOpacity = 1, opacity = particle.bubble.opacity ?? particle.opacity?.value ?? defaultOpacity, strokeOpacity = particle.strokeOpacity ?? opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? (0,ColorUtils/* getStyleFromHsl */.LC)(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? (0,ColorUtils/* getStyleFromHsl */.LC)(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            await (0,CanvasUtils/* drawParticle */.p0)({\n                container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    async drawParticlePlugin(plugin, particle, delta) {\n        await this.drawAsync((ctx) => (0,CanvasUtils/* drawParticlePlugin */.Wb)(ctx, plugin, particle, delta));\n    }\n    async drawPlugin(plugin, delta) {\n        await this.drawAsync((ctx) => (0,CanvasUtils/* drawPlugin */.e_)(ctx, plugin, delta));\n    }\n    async init() {\n        this._safeMutationObserver((obs) => obs.disconnect());\n        this._mutationObserver = (0,Utils/* safeMutationObserver */.tG)((records) => {\n            for (const record of records) {\n                if (record.type === "attributes" && record.attributeName === "style") {\n                    this._repairStyle();\n                }\n            }\n        });\n        this.resize();\n        this._initStyle();\n        await this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            (0,Utils/* getLogger */.tZ)().error(e);\n        }\n        this.initBackground();\n        this._safeMutationObserver((obs) => {\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = (0,ColorUtils/* rangeColorToRgb */.BN)(background.color);\n            elementStyle.backgroundColor = color ? (0,ColorUtils/* getStyleFromRgb */.xx)(color, background.opacity) : "";\n        }\n        else {\n            elementStyle.backgroundColor = "";\n        }\n        elementStyle.backgroundImage = background.image || "";\n        elementStyle.backgroundPosition = background.position || "";\n        elementStyle.backgroundRepeat = background.repeat || "";\n        elementStyle.backgroundSize = background.size || "";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor ?? plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles ?? updater.getTransformValues ?? updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        if (this._generated && this.element) {\n            this.element.remove();\n        }\n        this._generated =\n            canvas.dataset && Constants/* generatedAttribute */.eb in canvas.dataset\n                ? canvas.dataset[Constants/* generatedAttribute */.eb] === "true"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = "true";\n        this._originalStyle = (0,Utils/* deepExtend */.zw)({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext("2d");\n        this._safeMutationObserver((obs) => {\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                (0,CanvasUtils/* clear */.IU)(ctx, this.size);\n                if (this._coverImage) {\n                    this._paintImage(this._coverImage.image, this._coverImage.opacity);\n                }\n                else if (this._coverColorStyle) {\n                    this._paintBase(this._coverColorStyle);\n                }\n                else {\n                    this._paintBase();\n                }\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return false;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return false;\n        }\n        const oldSize = { ...size };\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            container.particles.setResizeFactor({\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            });\n        }\n        return true;\n    }\n    stop() {\n        this._safeMutationObserver((obs) => obs.disconnect());\n        this._mutationObserver = undefined;\n        this.draw((ctx) => (0,CanvasUtils/* clear */.IU)(ctx, this.size));\n    }\n    async windowResize() {\n        if (!this.element || !this.resize()) {\n            return;\n        }\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        await container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/EventListeners.js\n\n\nconst EventListeners_double = 2;\nfunction manageListener(element, event, handler, add, options) {\n    if (add) {\n        let addOptions = { passive: true };\n        if ((0,Utils/* isBoolean */.Lm)(options)) {\n            addOptions.capture = options;\n        }\n        else if (options !== undefined) {\n            addOptions = options;\n        }\n        element.addEventListener(event, handler, addOptions);\n    }\n    else {\n        const removeOptions = options;\n        element.removeEventListener(event, handler, removeOptions);\n    }\n}\nclass EventListeners {\n    constructor(container) {\n        this.container = container;\n        this._doMouseTouchClick = (e) => {\n            const container = this.container, options = container.actualOptions;\n            if (this._canPush) {\n                const mouseInteractivity = container.interactivity.mouse, mousePos = mouseInteractivity.position;\n                if (!mousePos) {\n                    return;\n                }\n                mouseInteractivity.clickPosition = { ...mousePos };\n                mouseInteractivity.clickTime = new Date().getTime();\n                const onClick = options.interactivity.events.onClick;\n                (0,Utils/* executeOnSingleOrMultiple */.wJ)(onClick.mode, (mode) => this.container.handleClickMode(mode));\n            }\n            if (e.type === "touchend") {\n                const touchDelay = 500;\n                setTimeout(() => this._mouseTouchFinish(), touchDelay);\n            }\n        };\n        this._handleThemeChange = (e) => {\n            const mediaEvent = e, container = this.container, options = container.options, defaultThemes = options.defaultThemes, themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light, theme = options.themes.find((theme) => theme.name === themeName);\n            if (theme && theme.default.auto) {\n                void container.loadTheme(themeName);\n            }\n        };\n        this._handleVisibilityChange = () => {\n            const container = this.container, options = container.actualOptions;\n            this._mouseTouchFinish();\n            if (!options.pauseOnBlur) {\n                return;\n            }\n            if (document && document.hidden) {\n                container.pageHidden = true;\n                container.pause();\n            }\n            else {\n                container.pageHidden = false;\n                if (container.animationStatus) {\n                    container.play(true);\n                }\n                else {\n                    container.draw(true);\n                }\n            }\n        };\n        this._handleWindowResize = () => {\n            if (this._resizeTimeout) {\n                clearTimeout(this._resizeTimeout);\n                delete this._resizeTimeout;\n            }\n            const handleResize = async () => {\n                const canvas = this.container.canvas;\n                await canvas?.windowResize();\n            };\n            this._resizeTimeout = setTimeout(() => void handleResize(), this.container.actualOptions.interactivity.events.resize.delay * Constants/* millisecondsToSeconds */.Xu);\n        };\n        this._manageInteractivityListeners = (mouseLeaveTmpEvent, add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            const interactivityEl = container.interactivity.element;\n            if (!interactivityEl) {\n                return;\n            }\n            const html = interactivityEl, canvasEl = container.canvas.element;\n            if (canvasEl) {\n                canvasEl.style.pointerEvents = html === canvasEl ? "initial" : "none";\n            }\n            if (!(options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\n                return;\n            }\n            manageListener(interactivityEl, Constants/* mouseMoveEvent */.Rb, handlers.mouseMove, add);\n            manageListener(interactivityEl, Constants/* touchStartEvent */.s7, handlers.touchStart, add);\n            manageListener(interactivityEl, Constants/* touchMoveEvent */.DG, handlers.touchMove, add);\n            if (!options.interactivity.events.onClick.enable) {\n                manageListener(interactivityEl, Constants/* touchEndEvent */.Bp, handlers.touchEnd, add);\n            }\n            else {\n                manageListener(interactivityEl, Constants/* touchEndEvent */.Bp, handlers.touchEndClick, add);\n                manageListener(interactivityEl, Constants/* mouseUpEvent */.vo, handlers.mouseUp, add);\n                manageListener(interactivityEl, Constants/* mouseDownEvent */.ms, handlers.mouseDown, add);\n            }\n            manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\n            manageListener(interactivityEl, Constants/* touchCancelEvent */.G3, handlers.touchCancel, add);\n        };\n        this._manageListeners = (add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions, detectType = options.interactivity.detectsOn, canvasEl = container.canvas.element;\n            let mouseLeaveTmpEvent = Constants/* mouseLeaveEvent */.Z0;\n            if (detectType === "window") {\n                container.interactivity.element = window;\n                mouseLeaveTmpEvent = Constants/* mouseOutEvent */.sf;\n            }\n            else if (detectType === "parent" && canvasEl) {\n                container.interactivity.element = canvasEl.parentElement ?? canvasEl.parentNode;\n            }\n            else {\n                container.interactivity.element = canvasEl;\n            }\n            this._manageMediaMatch(add);\n            this._manageResize(add);\n            this._manageInteractivityListeners(mouseLeaveTmpEvent, add);\n            if (document) {\n                manageListener(document, Constants/* visibilityChangeEvent */.nK, handlers.visibilityChange, add, false);\n            }\n        };\n        this._manageMediaMatch = (add) => {\n            const handlers = this._handlers, mediaMatch = (0,Utils/* safeMatchMedia */.lV)("(prefers-color-scheme: dark)");\n            if (!mediaMatch) {\n                return;\n            }\n            if (mediaMatch.addEventListener !== undefined) {\n                manageListener(mediaMatch, "change", handlers.themeChange, add);\n                return;\n            }\n            if (mediaMatch.addListener === undefined) {\n                return;\n            }\n            if (add) {\n                mediaMatch.addListener(handlers.oldThemeChange);\n            }\n            else {\n                mediaMatch.removeListener(handlers.oldThemeChange);\n            }\n        };\n        this._manageResize = (add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            if (!options.interactivity.events.resize) {\n                return;\n            }\n            if (typeof ResizeObserver === "undefined") {\n                manageListener(window, Constants/* resizeEvent */.NF, handlers.resize, add);\n                return;\n            }\n            const canvasEl = container.canvas.element;\n            if (this._resizeObserver && !add) {\n                if (canvasEl) {\n                    this._resizeObserver.unobserve(canvasEl);\n                }\n                this._resizeObserver.disconnect();\n                delete this._resizeObserver;\n            }\n            else if (!this._resizeObserver && add && canvasEl) {\n                this._resizeObserver = new ResizeObserver((entries) => {\n                    const entry = entries.find((e) => e.target === canvasEl);\n                    if (!entry) {\n                        return;\n                    }\n                    this._handleWindowResize();\n                });\n                this._resizeObserver.observe(canvasEl);\n            }\n        };\n        this._mouseDown = () => {\n            const { interactivity } = this.container;\n            if (!interactivity) {\n                return;\n            }\n            const { mouse } = interactivity;\n            mouse.clicking = true;\n            mouse.downPosition = mouse.position;\n        };\n        this._mouseTouchClick = (e) => {\n            const container = this.container, options = container.actualOptions, { mouse } = container.interactivity;\n            mouse.inside = true;\n            let handled = false;\n            const mousePosition = mouse.position;\n            if (!mousePosition || !options.interactivity.events.onClick.enable) {\n                return;\n            }\n            for (const [, plugin] of container.plugins) {\n                if (!plugin.clickPositionValid) {\n                    continue;\n                }\n                handled = plugin.clickPositionValid(mousePosition);\n                if (handled) {\n                    break;\n                }\n            }\n            if (!handled) {\n                this._doMouseTouchClick(e);\n            }\n            mouse.clicking = false;\n        };\n        this._mouseTouchFinish = () => {\n            const interactivity = this.container.interactivity;\n            if (!interactivity) {\n                return;\n            }\n            const mouse = interactivity.mouse;\n            delete mouse.position;\n            delete mouse.clickPosition;\n            delete mouse.downPosition;\n            interactivity.status = Constants/* mouseLeaveEvent */.Z0;\n            mouse.inside = false;\n            mouse.clicking = false;\n        };\n        this._mouseTouchMove = (e) => {\n            const container = this.container, options = container.actualOptions, interactivity = container.interactivity, canvasEl = container.canvas.element;\n            if (!interactivity?.element) {\n                return;\n            }\n            interactivity.mouse.inside = true;\n            let pos;\n            if (e.type.startsWith("pointer")) {\n                this._canPush = true;\n                const mouseEvent = e;\n                if (interactivity.element === window) {\n                    if (canvasEl) {\n                        const clientRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.clientX - clientRect.left,\n                            y: mouseEvent.clientY - clientRect.top,\n                        };\n                    }\n                }\n                else if (options.interactivity.detectsOn === "parent") {\n                    const source = mouseEvent.target, target = mouseEvent.currentTarget;\n                    if (source && target && canvasEl) {\n                        const sourceRect = source.getBoundingClientRect(), targetRect = target.getBoundingClientRect(), canvasRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.offsetX + EventListeners_double * sourceRect.left - (targetRect.left + canvasRect.left),\n                            y: mouseEvent.offsetY + EventListeners_double * sourceRect.top - (targetRect.top + canvasRect.top),\n                        };\n                    }\n                    else {\n                        pos = {\n                            x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                            y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                        };\n                    }\n                }\n                else if (mouseEvent.target === canvasEl) {\n                    pos = {\n                        x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                        y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                    };\n                }\n            }\n            else {\n                this._canPush = e.type !== "touchmove";\n                if (canvasEl) {\n                    const touchEvent = e, lengthOffset = 1, lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset], canvasRect = canvasEl.getBoundingClientRect(), defaultCoordinate = 0;\n                    pos = {\n                        x: lastTouch.clientX - (canvasRect.left ?? defaultCoordinate),\n                        y: lastTouch.clientY - (canvasRect.top ?? defaultCoordinate),\n                    };\n                }\n            }\n            const pxRatio = container.retina.pixelRatio;\n            if (pos) {\n                pos.x *= pxRatio;\n                pos.y *= pxRatio;\n            }\n            interactivity.mouse.position = pos;\n            interactivity.status = Constants/* mouseMoveEvent */.Rb;\n        };\n        this._touchEnd = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchFinish();\n        };\n        this._touchEndClick = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchClick(e);\n        };\n        this._touchStart = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.set(touch.identifier, performance.now());\n            }\n            this._mouseTouchMove(e);\n        };\n        this._canPush = true;\n        this._touches = new Map();\n        this._handlers = {\n            mouseDown: () => this._mouseDown(),\n            mouseLeave: () => this._mouseTouchFinish(),\n            mouseMove: (e) => this._mouseTouchMove(e),\n            mouseUp: (e) => this._mouseTouchClick(e),\n            touchStart: (e) => this._touchStart(e),\n            touchMove: (e) => this._mouseTouchMove(e),\n            touchEnd: (e) => this._touchEnd(e),\n            touchCancel: (e) => this._touchEnd(e),\n            touchEndClick: (e) => this._touchEndClick(e),\n            visibilityChange: () => this._handleVisibilityChange(),\n            themeChange: (e) => this._handleThemeChange(e),\n            oldThemeChange: (e) => this._handleThemeChange(e),\n            resize: () => {\n                this._handleWindowResize();\n            },\n        };\n    }\n    addListeners() {\n        this._manageListeners(true);\n    }\n    removeListeners() {\n        this._manageListeners(false);\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Options.js + 1 modules\nvar Options = __webpack_require__(7301);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/InteractionManager.js\nclass InteractionManager {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this._interactors = [];\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n    }\n    async externalInteract(delta) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                await interactor.interact(delta);\n            }\n        }\n    }\n    handleClickMode(mode) {\n        for (const interactor of this._externalInteractors) {\n            interactor.handleClickMode?.(mode);\n        }\n    }\n    async init() {\n        this._interactors = await this._engine.getInteractors(this.container, true);\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n        for (const interactor of this._interactors) {\n            switch (interactor.type) {\n                case "external":\n                    this._externalInteractors.push(interactor);\n                    break;\n                case "particles":\n                    this._particleInteractors.push(interactor);\n                    break;\n            }\n            interactor.init();\n        }\n    }\n    async particlesInteract(particle, delta) {\n        for (const interactor of this._externalInteractors) {\n            interactor.clear(particle, delta);\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                await interactor.interact(particle, delta);\n            }\n        }\n    }\n    reset(particle) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                interactor.reset(particle);\n            }\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                interactor.reset(particle);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Point.js\nclass Point {\n    constructor(position, particle) {\n        this.position = position;\n        this.particle = particle;\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Circle.js\nvar Circle = __webpack_require__(7926);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Rectangle.js\nvar Rectangle = __webpack_require__(9389);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\nvar NumberUtils = __webpack_require__(6100);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/QuadTree.js\n\n\n\nconst half = 0.5, QuadTree_double = 2, subdivideCount = 4;\nclass QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this._subdivide = () => {\n            const { x, y } = this.rectangle.position, { width, height } = this.rectangle.size, { capacity } = this;\n            for (let i = 0; i < subdivideCount; i++) {\n                const fixedIndex = i % QuadTree_double;\n                this._subs.push(new QuadTree(new Rectangle/* Rectangle */.M(x + width * half * fixedIndex, y + height * half * (Math.round(i * half) - fixedIndex), width * half, height * half), capacity));\n            }\n            this._divided = true;\n        };\n        this._points = [];\n        this._divided = false;\n        this._subs = [];\n    }\n    insert(point) {\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this._points.length < this.capacity) {\n            this._points.push(point);\n            return true;\n        }\n        if (!this._divided) {\n            this._subdivide();\n        }\n        return this._subs.some((sub) => sub.insert(point));\n    }\n    query(range, check, found) {\n        const res = found ?? [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this._points) {\n            if (!range.contains(p.position) &&\n                (0,NumberUtils/* getDistance */.Yf)(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this._divided) {\n            for (const sub of this._subs) {\n                sub.query(range, check, res);\n            }\n        }\n        return res;\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle/* Circle */.j(position.x, position.y, radius), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle/* Rectangle */.M(position.x, position.y, size.width, size.height), check);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Particles.js\n\n\n\n\n\n\nconst qTreeCapacity = 4, squareExp = 2, defaultRemoveQuantity = 1;\nconst qTreeRectangle = (canvasSize) => {\n    const { height, width } = canvasSize, posOffset = -0.25, sizeFactor = 1.5;\n    return new Rectangle/* Rectangle */.M(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nclass Particles {\n    constructor(engine, container) {\n        this._addToPool = (...particles) => {\n            for (const particle of particles) {\n                this._pool.push(particle);\n            }\n        };\n        this._applyDensity = async (options, manualCount, group) => {\n            const numberOptions = options.number;\n            if (!options.number.density?.enable) {\n                if (group === undefined) {\n                    this._limit = numberOptions.limit.value;\n                }\n                else if (numberOptions.limit) {\n                    this._groupLimits.set(group, numberOptions.limit.value);\n                }\n                return;\n            }\n            const densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, minLimit = 0, optParticlesLimit = numberOptions.limit.value > minLimit ? numberOptions.limit.value : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\n            if (group === undefined) {\n                this._limit = numberOptions.limit.value * densityFactor;\n            }\n            else {\n                this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n            }\n            if (particlesCount < particlesNumber) {\n                await this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container, defaultFactor = 1;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return defaultFactor;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.height * densityOptions.width * pxRatio ** squareExp);\n        };\n        this._pushParticle = async (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this._pool.pop();\n                if (!particle) {\n                    const { Particle } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6062));\n                    particle = new Particle(this._engine, this._container);\n                }\n                await particle.init(this._nextId, position, overrideOptions, group);\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent("particleAdded", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                (0,Utils/* getLogger */.tZ)().warning(`${Constants/* errorPrefix */.dI} adding particle: ${e}`);\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            const zIdx = this._zArray.indexOf(particle), deleteCount = 1;\n            this._array.splice(index, deleteCount);\n            this._zArray.splice(zIdx, deleteCount);\n            particle.destroy(override);\n            this._engine.dispatchEvent("particleRemoved", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            this._addToPool(particle);\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this._pool = [];\n        this._limit = 0;\n        this._groupLimits = new Map();\n        this._needsSort = false;\n        this._lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        this._pluginsInitialized = false;\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = [];\n        this.updaters = [];\n    }\n    get count() {\n        return this._array.length;\n    }\n    async addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            await this.addParticle(particle.position ? (0,Utils/* getPosition */.E9)(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    async addParticle(position, overrideOptions, group, initializer) {\n        const limitOptions = this._container.actualOptions.particles.number.limit, limit = group === undefined ? this._limit : this._groupLimits.get(group) ?? this._limit, currentCount = this.count, minLimit = 0;\n        if (limit > minLimit) {\n            if (limitOptions.mode === "delete") {\n                const countOffset = 1, minCount = 0, countToRemove = currentCount + countOffset - limit;\n                if (countToRemove > minCount) {\n                    this.removeQuantity(countToRemove);\n                }\n            }\n            else if (limitOptions.mode === "wait") {\n                if (currentCount >= limit) {\n                    return;\n                }\n            }\n        }\n        return await this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n        this._pluginsInitialized = false;\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container, canvas = container.canvas;\n        canvas.clear();\n        await this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            await canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            await p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    get(index) {\n        return this._array[index];\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions;\n        this._lastZIndex = 0;\n        this._needsSort = false;\n        await this.initPlugins();\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        await this.addManualParticles();\n        if (!handled) {\n            const particlesOptions = options.particles, groups = particlesOptions.groups;\n            for (const group in groups) {\n                const groupOptions = groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\n                    await this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < particlesOptions.number.value; i++) {\n                await this.addParticle();\n            }\n        }\n    }\n    async initPlugins() {\n        if (this._pluginsInitialized) {\n            return;\n        }\n        const container = this._container;\n        this.movers = await this._engine.getMovers(container, true);\n        this.updaters = await this._engine.getUpdaters(container, true);\n        await this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            await pathGenerator.init(container);\n        }\n    }\n    async push(nb, mouse, overrideOptions, group) {\n        for (let i = 0; i < nb; i++) {\n            await this.addParticle(mouse?.position, overrideOptions, group);\n        }\n    }\n    async redraw() {\n        this.clear();\n        await this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = defaultRemoveQuantity, group, override) {\n        const minIndex = 0;\n        if (index < minIndex || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            if (this._removeParticle(i--, group, override)) {\n                deleted++;\n            }\n        }\n    }\n    removeQuantity(quantity, group) {\n        const defaultIndex = 0;\n        this.removeAt(defaultIndex, quantity, group);\n    }\n    async setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups, manualCount = 0;\n        for (const group in groups) {\n            await this._applyDensity(groups[group], manualCount, group);\n        }\n        await this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    setLastZIndex(zIndex) {\n        this._lastZIndex = zIndex;\n        this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n    }\n    setResizeFactor(factor) {\n        this._resizeFactor = factor;\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            await plugin.update?.(delta);\n        }\n        const resizeFactor = this._resizeFactor;\n        for (const particle of this._array) {\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                plugin.particleUpdate?.(particle, delta);\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    await mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            for (const particle of particlesToDelete) {\n                this._engine.dispatchEvent("particleRemoved", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n            }\n            this._addToPool(...particlesToDelete);\n        }\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                await updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete this._resizeFactor;\n        if (this._needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            const lengthOffset = 1;\n            this._lastZIndex = zArray[zArray.length - lengthOffset].position.z;\n            this._needsSort = false;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Retina.js\n\n\nconst defaultRatio = 1, defaultReduceFactor = 1;\nclass Retina {\n    constructor(container) {\n        this.container = container;\n        this.pixelRatio = defaultRatio;\n        this.reduceFactor = defaultReduceFactor;\n    }\n    init() {\n        const container = this.container, options = container.actualOptions;\n        this.pixelRatio = !options.detectRetina || (0,Utils/* isSsr */.B9)() ? defaultRatio : window.devicePixelRatio;\n        this.reduceFactor = defaultReduceFactor;\n        const ratio = this.pixelRatio, canvas = container.canvas;\n        if (canvas.element) {\n            const element = canvas.element;\n            canvas.size.width = element.offsetWidth * ratio;\n            canvas.size.height = element.offsetHeight * ratio;\n        }\n        const particles = options.particles, moveOptions = particles.move;\n        this.maxSpeed = (0,NumberUtils/* getRangeValue */.VG)(moveOptions.gravity.maxSpeed) * ratio;\n        this.sizeAnimationSpeed = (0,NumberUtils/* getRangeValue */.VG)(particles.size.animation.speed) * ratio;\n    }\n    initParticle(particle) {\n        const options = particle.options, ratio = this.pixelRatio, moveOptions = options.move, moveDistance = moveOptions.distance, props = particle.retina;\n        props.moveDrift = (0,NumberUtils/* getRangeValue */.VG)(moveOptions.drift) * ratio;\n        props.moveSpeed = (0,NumberUtils/* getRangeValue */.VG)(moveOptions.speed) * ratio;\n        props.sizeAnimationSpeed = (0,NumberUtils/* getRangeValue */.VG)(options.size.animation.speed) * ratio;\n        const maxDistance = props.maxDistance;\n        maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n        maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n        props.maxSpeed = (0,NumberUtils/* getRangeValue */.VG)(moveOptions.gravity.maxSpeed) * ratio;\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/OptionsUtils.js\nvar OptionsUtils = __webpack_require__(7439);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Container.js\n\n\n\n\n\n\n\n\n\nfunction guardCheck(container) {\n    return container && !container.destroyed;\n}\nconst defaultFps = 60;\nfunction initDelta(value, fpsLimit = defaultFps, smooth = false) {\n    return {\n        value,\n        factor: smooth ? defaultFps / fpsLimit : (defaultFps * value) / Constants/* millisecondsToSeconds */.Xu,\n    };\n}\nfunction loadContainerOptions(engine, container, ...sourceOptionsArr) {\n    const options = new Options/* Options */.J(engine, container);\n    (0,OptionsUtils/* loadOptions */.Z)(options, ...sourceOptionsArr);\n    return options;\n}\nclass Container {\n    constructor(engine, id, sourceOptions) {\n        this._intersectionManager = (entries) => {\n            if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n                return;\n            }\n            for (const entry of entries) {\n                if (entry.target !== this.interactivity.element) {\n                    continue;\n                }\n                if (entry.isIntersecting) {\n                    this.play();\n                }\n                else {\n                    this.pause();\n                }\n            }\n        };\n        this._nextFrame = async (timestamp) => {\n            try {\n                if (!this._smooth &&\n                    this._lastFrameTime !== undefined &&\n                    timestamp < this._lastFrameTime + Constants/* millisecondsToSeconds */.Xu / this.fpsLimit) {\n                    this.draw(false);\n                    return;\n                }\n                this._lastFrameTime ??= timestamp;\n                const delta = initDelta(timestamp - this._lastFrameTime, this.fpsLimit, this._smooth);\n                this.addLifeTime(delta.value);\n                this._lastFrameTime = timestamp;\n                if (delta.value > Constants/* millisecondsToSeconds */.Xu) {\n                    this.draw(false);\n                    return;\n                }\n                await this.particles.draw(delta);\n                if (!this.alive()) {\n                    this.destroy();\n                    return;\n                }\n                if (this.animationStatus) {\n                    this.draw(false);\n                }\n            }\n            catch (e) {\n                (0,Utils/* getLogger */.tZ)().error(`${Constants/* errorPrefix */.dI} in animation loop`, e);\n            }\n        };\n        this._engine = engine;\n        this.id = Symbol(id);\n        this.fpsLimit = 120;\n        this._smooth = false;\n        this._delay = 0;\n        this._duration = 0;\n        this._lifeTime = 0;\n        this._firstStart = true;\n        this.started = false;\n        this.destroyed = false;\n        this._paused = true;\n        this._lastFrameTime = 0;\n        this.zLayers = 100;\n        this.pageHidden = false;\n        this._sourceOptions = sourceOptions;\n        this._initialSourceOptions = sourceOptions;\n        this.retina = new Retina(this);\n        this.canvas = new Canvas(this);\n        this.particles = new Particles(this._engine, this);\n        this.pathGenerators = new Map();\n        this.interactivity = {\n            mouse: {\n                clicking: false,\n                inside: false,\n            },\n        };\n        this.plugins = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this);\n        this._eventListeners = new EventListeners(this);\n        this._intersectionObserver = (0,Utils/* safeIntersectionObserver */.BR)((entries) => this._intersectionManager(entries));\n        this._engine.dispatchEvent("containerBuilt", { container: this });\n    }\n    get animationStatus() {\n        return !this._paused && !this.pageHidden && guardCheck(this);\n    }\n    get options() {\n        return this._options;\n    }\n    get sourceOptions() {\n        return this._sourceOptions;\n    }\n    addClickHandler(callback) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const el = this.interactivity.element;\n        if (!el) {\n            return;\n        }\n        const clickOrTouchHandler = (e, pos, radius) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const pxRatio = this.retina.pixelRatio, posRetina = {\n                x: pos.x * pxRatio,\n                y: pos.y * pxRatio,\n            }, particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n            callback(e, particles);\n        };\n        const clickHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const mouseEvent = e, pos = {\n                x: mouseEvent.offsetX || mouseEvent.clientX,\n                y: mouseEvent.offsetY || mouseEvent.clientY,\n            }, radius = 1;\n            clickOrTouchHandler(e, pos, radius);\n        };\n        const touchStartHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = true;\n            touchMoved = false;\n        };\n        const touchMoveHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touchMoved = true;\n        };\n        const touchEndHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            if (touched && !touchMoved) {\n                const touchEvent = e;\n                const lengthOffset = 1;\n                let lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset];\n                if (!lastTouch) {\n                    lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - lengthOffset];\n                    if (!lastTouch) {\n                        return;\n                    }\n                }\n                const element = this.canvas.element, canvasRect = element ? element.getBoundingClientRect() : undefined, minCoordinate = 0, pos = {\n                    x: lastTouch.clientX - (canvasRect ? canvasRect.left : minCoordinate),\n                    y: lastTouch.clientY - (canvasRect ? canvasRect.top : minCoordinate),\n                };\n                clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        const touchCancelHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        let touched = false, touchMoved = false;\n        el.addEventListener("click", clickHandler);\n        el.addEventListener("touchstart", touchStartHandler);\n        el.addEventListener("touchmove", touchMoveHandler);\n        el.addEventListener("touchend", touchEndHandler);\n        el.addEventListener("touchcancel", touchCancelHandler);\n    }\n    addLifeTime(value) {\n        this._lifeTime += value;\n    }\n    addPath(key, generator, override = false) {\n        if (!guardCheck(this) || (!override && this.pathGenerators.has(key))) {\n            return false;\n        }\n        this.pathGenerators.set(key, generator);\n        return true;\n    }\n    alive() {\n        return !this._duration || this._lifeTime <= this._duration;\n    }\n    destroy() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        this.particles.destroy();\n        this.canvas.destroy();\n        for (const [, effectDrawer] of this.effectDrawers) {\n            effectDrawer.destroy?.(this);\n        }\n        for (const [, shapeDrawer] of this.shapeDrawers) {\n            shapeDrawer.destroy?.(this);\n        }\n        for (const key of this.effectDrawers.keys()) {\n            this.effectDrawers.delete(key);\n        }\n        for (const key of this.shapeDrawers.keys()) {\n            this.shapeDrawers.delete(key);\n        }\n        this._engine.clearPlugins(this);\n        this.destroyed = true;\n        const mainArr = this._engine.dom(), idx = mainArr.findIndex((t) => t === this), minIndex = 0;\n        if (idx >= minIndex) {\n            const deleteCount = 1;\n            mainArr.splice(idx, deleteCount);\n        }\n        this._engine.dispatchEvent("containerDestroyed", { container: this });\n    }\n    draw(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        let refreshTime = force;\n        const frame = async (timestamp) => {\n            if (refreshTime) {\n                this._lastFrameTime = undefined;\n                refreshTime = false;\n            }\n            await this._nextFrame(timestamp);\n        };\n        this._drawAnimationFrame = requestAnimationFrame((timestamp) => void frame(timestamp));\n    }\n    async export(type, options = {}) {\n        for (const [, plugin] of this.plugins) {\n            if (!plugin.export) {\n                continue;\n            }\n            const res = await plugin.export(type, options);\n            if (!res.supported) {\n                continue;\n            }\n            return res.blob;\n        }\n        (0,Utils/* getLogger */.tZ)().error(`${Constants/* errorPrefix */.dI} - Export plugin with type ${type} not found`);\n    }\n    handleClickMode(mode) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.particles.handleClickMode(mode);\n        for (const [, plugin] of this.plugins) {\n            plugin.handleClickMode?.(mode);\n        }\n    }\n    async init() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const effects = this._engine.getSupportedEffects();\n        for (const type of effects) {\n            const drawer = this._engine.getEffectDrawer(type);\n            if (drawer) {\n                this.effectDrawers.set(type, drawer);\n            }\n        }\n        const shapes = this._engine.getSupportedShapes();\n        for (const type of shapes) {\n            const drawer = this._engine.getShapeDrawer(type);\n            if (drawer) {\n                this.shapeDrawers.set(type, drawer);\n            }\n        }\n        await this.particles.initPlugins();\n        this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        const availablePlugins = await this._engine.getAvailablePlugins(this);\n        for (const [id, plugin] of availablePlugins) {\n            this.plugins.set(id, plugin);\n        }\n        this.retina.init();\n        await this.canvas.init();\n        this.updateActualOptions();\n        this.canvas.initBackground();\n        this.canvas.resize();\n        this.zLayers = this.actualOptions.zLayers;\n        this._duration = (0,NumberUtils/* getRangeValue */.VG)(this.actualOptions.duration) * Constants/* millisecondsToSeconds */.Xu;\n        this._delay = (0,NumberUtils/* getRangeValue */.VG)(this.actualOptions.delay) * Constants/* millisecondsToSeconds */.Xu;\n        this._lifeTime = 0;\n        const defaultFpsLimit = 120, minFpsLimit = 0;\n        this.fpsLimit = this.actualOptions.fpsLimit > minFpsLimit ? this.actualOptions.fpsLimit : defaultFpsLimit;\n        this._smooth = this.actualOptions.smooth;\n        for (const [, drawer] of this.effectDrawers) {\n            await drawer.init?.(this);\n        }\n        for (const [, drawer] of this.shapeDrawers) {\n            await drawer.init?.(this);\n        }\n        for (const [, plugin] of this.plugins) {\n            await plugin.init?.();\n        }\n        this._engine.dispatchEvent("containerInit", { container: this });\n        await this.particles.init();\n        await this.particles.setDensity();\n        for (const [, plugin] of this.plugins) {\n            plugin.particlesSetup?.();\n        }\n        this._engine.dispatchEvent("particlesSetup", { container: this });\n    }\n    async loadTheme(name) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._currentTheme = name;\n        await this.refresh();\n    }\n    pause() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        if (this._drawAnimationFrame !== undefined) {\n            cancelAnimationFrame(this._drawAnimationFrame);\n            delete this._drawAnimationFrame;\n        }\n        if (this._paused) {\n            return;\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.pause?.();\n        }\n        if (!this.pageHidden) {\n            this._paused = true;\n        }\n        this._engine.dispatchEvent("containerPaused", { container: this });\n    }\n    play(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const needsUpdate = this._paused || force;\n        if (this._firstStart && !this.actualOptions.autoPlay) {\n            this._firstStart = false;\n            return;\n        }\n        if (this._paused) {\n            this._paused = false;\n        }\n        if (needsUpdate) {\n            for (const [, plugin] of this.plugins) {\n                if (plugin.play) {\n                    plugin.play();\n                }\n            }\n        }\n        this._engine.dispatchEvent("containerPlay", { container: this });\n        this.draw(needsUpdate ?? false);\n    }\n    async refresh() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        return this.start();\n    }\n    async reset() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._initialSourceOptions = undefined;\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        return this.refresh();\n    }\n    async start() {\n        if (!guardCheck(this) || this.started) {\n            return;\n        }\n        await this.init();\n        this.started = true;\n        await new Promise((resolve) => {\n            const start = async () => {\n                this._eventListeners.addListeners();\n                if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n                    this._intersectionObserver.observe(this.interactivity.element);\n                }\n                for (const [, plugin] of this.plugins) {\n                    await plugin.start?.();\n                }\n                this._engine.dispatchEvent("containerStarted", { container: this });\n                this.play();\n                resolve();\n            };\n            this._delayTimeout = setTimeout(() => void start(), this._delay);\n        });\n    }\n    stop() {\n        if (!guardCheck(this) || !this.started) {\n            return;\n        }\n        if (this._delayTimeout) {\n            clearTimeout(this._delayTimeout);\n            delete this._delayTimeout;\n        }\n        this._firstStart = true;\n        this.started = false;\n        this._eventListeners.removeListeners();\n        this.pause();\n        this.particles.clear();\n        this.canvas.stop();\n        if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n            this._intersectionObserver.unobserve(this.interactivity.element);\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.stop?.();\n        }\n        for (const key of this.plugins.keys()) {\n            this.plugins.delete(key);\n        }\n        this._sourceOptions = this._options;\n        this._engine.dispatchEvent("containerStopped", { container: this });\n    }\n    updateActualOptions() {\n        this.actualOptions.responsive = [];\n        const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n        this.actualOptions.setTheme(this._currentTheme);\n        if (this._responsiveMaxWidth === newMaxWidth) {\n            return false;\n        }\n        this._responsiveMaxWidth = newMaxWidth;\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Core/Container.js_+_7_modules?')},6062:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Particle: () => (/* binding */ Particle)\n/* harmony export */ });\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6100);\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5051);\n/* harmony import */ var _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5849);\n/* harmony import */ var _Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6932);\n/* harmony import */ var _Options_Classes_Interactivity_Interactivity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7622);\n/* harmony import */ var _Utils_Vector_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3033);\n/* harmony import */ var _Utils_Vector3d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9738);\n/* harmony import */ var _Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3567);\n/* harmony import */ var _Utils_OptionsUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7439);\n\n\n\n\n\n\n\n\n\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2;\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .deepExtend */ .zw)({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .itemFromSingleOrMultiple */ .TA)(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .deepExtend */ .zw)({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .itemFromSingleOrMultiple */ .TA)(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!(0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isInArray */ .hn)(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nclass Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return _Utils_Vector3d_js__WEBPACK_IMPORTED_MODULE_5__/* .Vector3d */ .p.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .calcExactPositionOrRandomFromSize */ .Nx)({\n                size: canvasSize,\n                position: position,\n            }), pos = _Utils_Vector3d_js__WEBPACK_IMPORTED_MODULE_5__/* .Vector3d */ .p.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: ["bounce"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: ["bounce"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                const increment = 1;\n                return this._calcPosition(container, undefined, zIndex, tryCount + increment);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getParticleBaseVelocity */ .$m)(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === "inside" || moveOptions.direction === "outside") {\n                return res;\n            }\n            const rad = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .degToRad */ .pu)((0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(moveOptions.angle.value)), radOffset = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .degToRad */ .pu)((0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .U4)((0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === "number") {\n                res.length *= (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries, minRetries = 0;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__/* .errorPrefix */ .dI} particle is overlapping and can\'t be placed`);\n            }\n            return !!this.container.particles.find((particle) => (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getDistance */ .Yf)(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return (0,_Utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_6__/* .alterHsl */ .yx)(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.zIndex.value), minZ = 0;\n            this.position = this._calcPosition(container, position, (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .clamp */ .qE)(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size, defaultRadius = 0;\n            this.moveCenter = {\n                ...(0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .getPosition */ .E9)(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? "percent",\n            };\n            this.direction = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getParticleDirectionAngle */ .JY)(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case "inside":\n                    this.outType = "inside";\n                    break;\n                case "outside":\n                    this.outType = "outside";\n                    break;\n            }\n            this.offset = _Utils_Vector_js__WEBPACK_IMPORTED_MODULE_4__/* .Vector */ .M.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent("particleDestroyed", {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    async draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins) {\n            await canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        await canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__/* .getHslFromAnimation */ .O_)(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__/* .getHslFromAnimation */ .O_)(this.strokeColor));\n    }\n    async init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = "normal";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = (0,_Utils_OptionsUtils_js__WEBPACK_IMPORTED_MODULE_7__/* .loadParticlesOptions */ .y)(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.effect = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .itemFromSingleOrMultiple */ .TA)(effectType, this.id, reduceDuplicates);\n        this.shape = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .itemFromSingleOrMultiple */ .TA)(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .itemFromSingleOrMultiple */ .TA)(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .itemFromSingleOrMultiple */ .TA)(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new _Options_Classes_Interactivity_Interactivity_js__WEBPACK_IMPORTED_MODULE_3__/* .Interactivity */ .k(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(pathOptions.delay.value) * _Utils_Constants_js__WEBPACK_IMPORTED_MODULE_8__/* .millisecondsToSeconds */ .Xu;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                await this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .initParticleNumericAnimationValue */ .Xs)(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const decayOffset = 1;\n        this.moveDecay = decayOffset - (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            await effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            await shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = (0,_Utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__/* .rangeColorToRgb */ .BN)(this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            await updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            await mover.init?.(this);\n        }\n        await effectDrawer?.particleInit?.(container, this);\n        await shapeDrawer?.particleInit?.(container, this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Core/Particle.js?')},7926:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   j: () => (/* binding */ Circle)\n/* harmony export */ });\n/* harmony import */ var _Range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4361);\n/* harmony import */ var _Rectangle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9389);\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6100);\n\n\n\nconst squareExp = 2;\nclass Circle extends _Range_js__WEBPACK_IMPORTED_MODULE_2__/* .Range */ .Q {\n    constructor(x, y, radius) {\n        super(x, y);\n        this.radius = radius;\n    }\n    contains(point) {\n        return (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__/* .getDistance */ .Yf)(point, this.position) <= this.radius;\n    }\n    intersects(range) {\n        const pos1 = this.position, pos2 = range.position, distPos = { x: Math.abs(pos2.x - pos1.x), y: Math.abs(pos2.y - pos1.y) }, r = this.radius;\n        if (range instanceof Circle) {\n            const rSum = r + range.radius, dist = Math.sqrt(distPos.x ** squareExp + distPos.y ** squareExp);\n            return rSum > dist;\n        }\n        else if (range instanceof _Rectangle_js__WEBPACK_IMPORTED_MODULE_0__/* .Rectangle */ .M) {\n            const { width, height } = range.size, edges = Math.pow(distPos.x - width, squareExp) + Math.pow(distPos.y - height, squareExp);\n            return (edges <= r ** squareExp ||\n                (distPos.x <= r + width && distPos.y <= r + height) ||\n                distPos.x <= width ||\n                distPos.y <= height);\n        }\n        return false;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Core/Utils/Circle.js?")},5849:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bp: () => (/* binding */ touchEndEvent),\n/* harmony export */   DG: () => (/* binding */ touchMoveEvent),\n/* harmony export */   G3: () => (/* binding */ touchCancelEvent),\n/* harmony export */   N3: () => (/* binding */ halfRandom),\n/* harmony export */   NF: () => (/* binding */ resizeEvent),\n/* harmony export */   Rb: () => (/* binding */ mouseMoveEvent),\n/* harmony export */   Xu: () => (/* binding */ millisecondsToSeconds),\n/* harmony export */   Z0: () => (/* binding */ mouseLeaveEvent),\n/* harmony export */   a5: () => (/* binding */ percentDenominator),\n/* harmony export */   dI: () => (/* binding */ errorPrefix),\n/* harmony export */   eb: () => (/* binding */ generatedAttribute),\n/* harmony export */   ms: () => (/* binding */ mouseDownEvent),\n/* harmony export */   nK: () => (/* binding */ visibilityChangeEvent),\n/* harmony export */   s7: () => (/* binding */ touchStartEvent),\n/* harmony export */   sf: () => (/* binding */ mouseOutEvent),\n/* harmony export */   vo: () => (/* binding */ mouseUpEvent)\n/* harmony export */ });\nconst generatedAttribute = "generated";\nconst mouseDownEvent = "pointerdown";\nconst mouseUpEvent = "pointerup";\nconst mouseLeaveEvent = "pointerleave";\nconst mouseOutEvent = "pointerout";\nconst mouseMoveEvent = "pointermove";\nconst touchStartEvent = "touchstart";\nconst touchEndEvent = "touchend";\nconst touchMoveEvent = "touchmove";\nconst touchCancelEvent = "touchcancel";\nconst resizeEvent = "resize";\nconst visibilityChangeEvent = "visibilitychange";\nconst errorPrefix = "tsParticles - Error";\nconst percentDenominator = 100;\nconst halfRandom = 0.5;\nconst millisecondsToSeconds = 1000;\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Core/Utils/Constants.js?')},4361:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Q: () => (/* binding */ Range)\n/* harmony export */ });\nclass Range {\n    constructor(x, y) {\n        this.position = {\n            x: x,\n            y: y,\n        };\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Core/Utils/Range.js?")},9389:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   M: () => (/* binding */ Rectangle)\n/* harmony export */ });\n/* harmony import */ var _Circle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7926);\n/* harmony import */ var _Range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4361);\n\n\nclass Rectangle extends _Range_js__WEBPACK_IMPORTED_MODULE_1__/* .Range */ .Q {\n    constructor(x, y, width, height) {\n        super(x, y);\n        this.size = {\n            height: height,\n            width: width,\n        };\n    }\n    contains(point) {\n        const w = this.size.width, h = this.size.height, pos = this.position;\n        return point.x >= pos.x && point.x <= pos.x + w && point.y >= pos.y && point.y <= pos.y + h;\n    }\n    intersects(range) {\n        if (range instanceof _Circle_js__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .j) {\n            range.intersects(this);\n        }\n        const w = this.size.width, h = this.size.height, pos1 = this.position, pos2 = range.position, size2 = range instanceof Rectangle ? range.size : { width: 0, height: 0 }, w2 = size2.width, h2 = size2.height;\n        return pos2.x < pos1.x + w && pos2.x + w2 > pos1.x && pos2.y < pos1.y + h && pos2.y + h2 > pos1.y;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Core/Utils/Rectangle.js?")},3033:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   M: () => (/* binding */ Vector)\n/* harmony export */ });\n/* harmony import */ var _Vector3d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9738);\n\nconst origin = {\n    x: 0,\n    y: 0,\n    z: 0,\n};\nclass Vector extends _Vector3d_js__WEBPACK_IMPORTED_MODULE_0__/* .Vector3d */ .p {\n    constructor(xOrCoords, y) {\n        super(xOrCoords, y, origin.z);\n    }\n    static get origin() {\n        return Vector.create(origin.x, origin.y);\n    }\n    static clone(source) {\n        return Vector.create(source.x, source.y);\n    }\n    static create(x, y) {\n        return new Vector(x, y);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Core/Utils/Vector.js?")},9738:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   p: () => (/* binding */ Vector3d)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5849);\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5051);\n\n\nconst origin = {\n    x: 0,\n    y: 0,\n    z: 0,\n}, squareExp = 2, inverseFactorNumerator = 1.0;\nclass Vector3d {\n    constructor(xOrCoords, y, z) {\n        this._updateFromAngle = (angle, length) => {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n        };\n        if (!(0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .Et)(xOrCoords) && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : origin.z;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z ?? origin.z;\n        }\n        else {\n            throw new Error(`${_Constants_js__WEBPACK_IMPORTED_MODULE_1__/* .errorPrefix */ .dI} Vector3d not initialized correctly`);\n        }\n    }\n    static get origin() {\n        return Vector3d.create(origin.x, origin.y, origin.z);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this._updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this._updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** squareExp + this.y ** squareExp;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    normalize() {\n        const length = this.length, noLength = 0;\n        if (length != noLength) {\n            this.multTo(inverseFactorNumerator / length);\n        }\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), origin.z);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : origin.z;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Core/Utils/Vector3d.js?")},4133:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ AnimatableColor)\n/* harmony export */ });\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5051);\n/* harmony import */ var _HslAnimation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7139);\n/* harmony import */ var _OptionsColor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8089);\n\n\n\nclass AnimatableColor extends _OptionsColor_js__WEBPACK_IMPORTED_MODULE_2__/* .OptionsColor */ .O {\n    constructor() {\n        super();\n        this.animation = new _HslAnimation_js__WEBPACK_IMPORTED_MODULE_1__/* .HslAnimation */ .i();\n    }\n    static create(source, data) {\n        const color = new AnimatableColor();\n        color.load(source);\n        if (data !== undefined) {\n            if ((0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .Kg)(data) || (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(data)) {\n                color.load({ value: data });\n            }\n            else {\n                color.load(data);\n            }\n        }\n        return color;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        const colorAnimation = data.animation;\n        if (colorAnimation !== undefined) {\n            if (colorAnimation.enable !== undefined) {\n                this.animation.h.load(colorAnimation);\n            }\n            else {\n                this.animation.load(data.animation);\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/AnimatableColor.js?")},5908:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Q: () => (/* binding */ RangedAnimationOptions),\n/* harmony export */   p: () => (/* binding */ AnimationOptions)\n/* harmony export */ });\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6100);\n\nclass AnimationOptions {\n    constructor() {\n        this.count = 0;\n        this.enable = false;\n        this.speed = 1;\n        this.decay = 0;\n        this.delay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.count);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.decay);\n        }\n        if (data.delay !== undefined) {\n            this.delay = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.delay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\nclass RangedAnimationOptions extends AnimationOptions {\n    constructor() {\n        super();\n        this.mode = "auto";\n        this.startValue = "random";\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.startValue !== undefined) {\n            this.startValue = data.startValue;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/AnimationOptions.js?')},6879:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ BackgroundMask)\n/* harmony export */ });\n/* harmony import */ var _BackgroundMaskCover_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2896);\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5051);\n\n\nclass BackgroundMask {\n    constructor() {\n        this.composite = "destination-out";\n        this.cover = new _BackgroundMaskCover_js__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMaskCover */ .y();\n        this.enable = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.composite !== undefined) {\n            this.composite = data.composite;\n        }\n        if (data.cover !== undefined) {\n            const cover = data.cover, color = ((0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(data.cover) ? { color: data.cover } : data.cover);\n            this.cover.load(cover.color !== undefined || cover.image !== undefined ? cover : { color: color });\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/BackgroundMask/BackgroundMask.js?')},2896:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   y: () => (/* binding */ BackgroundMaskCover)\n/* harmony export */ });\n/* harmony import */ var _OptionsColor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8089);\n\nclass BackgroundMaskCover {\n    constructor() {\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = _OptionsColor_js__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .O.create(this.color, data.color);\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/BackgroundMask/BackgroundMaskCover.js?")},1643:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ Background)\n/* harmony export */ });\n/* harmony import */ var _OptionsColor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8089);\n\nclass Background {\n    constructor() {\n        this.color = new _OptionsColor_js__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .O();\n        this.color.value = "";\n        this.image = "";\n        this.position = "";\n        this.repeat = "";\n        this.size = "";\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = _OptionsColor_js__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .O.create(this.color, data.color);\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n        if (data.position !== undefined) {\n            this.position = data.position;\n        }\n        if (data.repeat !== undefined) {\n            this.repeat = data.repeat;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Background/Background.js?')},5903:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ ColorAnimation)\n/* harmony export */ });\n/* harmony import */ var _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5908);\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6100);\n\n\nclass ColorAnimation extends _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__/* .AnimationOptions */ .p {\n    constructor() {\n        super();\n        this.offset = 0;\n        this.sync = true;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.offset !== undefined) {\n            this.offset = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__/* .setRangeValue */ .DT)(data.offset);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/ColorAnimation.js?")},7139:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ HslAnimation)\n/* harmony export */ });\n/* harmony import */ var _ColorAnimation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5903);\n\nclass HslAnimation {\n    constructor() {\n        this.h = new _ColorAnimation_js__WEBPACK_IMPORTED_MODULE_0__/* .ColorAnimation */ .e();\n        this.s = new _ColorAnimation_js__WEBPACK_IMPORTED_MODULE_0__/* .ColorAnimation */ .e();\n        this.l = new _ColorAnimation_js__WEBPACK_IMPORTED_MODULE_0__/* .ColorAnimation */ .e();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.h.load(data.h);\n        this.s.load(data.s);\n        this.l.load(data.l);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/HslAnimation.js?")},9386:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  s: () => (/* binding */ Events)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/ClickEvent.js\nclass ClickEvent {\n    constructor() {\n        this.enable = false;\n        this.mode = [];\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/DivEvent.js\nclass DivEvent {\n    constructor() {\n        this.selectors = [];\n        this.enable = false;\n        this.mode = [];\n        this.type = "circle";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/Parallax.js\nclass Parallax {\n    constructor() {\n        this.enable = false;\n        this.force = 2;\n        this.smooth = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.force !== undefined) {\n            this.force = data.force;\n        }\n        if (data.smooth !== undefined) {\n            this.smooth = data.smooth;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/HoverEvent.js\n\nclass HoverEvent {\n    constructor() {\n        this.enable = false;\n        this.mode = [];\n        this.parallax = new Parallax();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        this.parallax.load(data.parallax);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/ResizeEvent.js\nclass ResizeEvent {\n    constructor() {\n        this.delay = 0.5;\n        this.enable = true;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/Utils.js\nvar Utils = __webpack_require__(5051);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/Events.js\n\n\n\n\n\nclass Events {\n    constructor() {\n        this.onClick = new ClickEvent();\n        this.onDiv = new DivEvent();\n        this.onHover = new HoverEvent();\n        this.resize = new ResizeEvent();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.onClick.load(data.onClick);\n        const onDiv = data.onDiv;\n        if (onDiv !== undefined) {\n            this.onDiv = (0,Utils/* executeOnSingleOrMultiple */.wJ)(onDiv, (t) => {\n                const tmp = new DivEvent();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        this.onHover.load(data.onHover);\n        this.resize.load(data.resize);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/Events.js_+_5_modules?')},7622:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  k: () => (/* binding */ Interactivity)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/Events.js + 5 modules\nvar Events = __webpack_require__(9386);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Modes/Modes.js\nclass Modes {\n    constructor(engine, container) {\n        this._engine = engine;\n        this._container = container;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (!this._container) {\n            return;\n        }\n        const interactors = this._engine.interactors.get(this._container);\n        if (!interactors) {\n            return;\n        }\n        for (const interactor of interactors) {\n            if (!interactor.loadModeOptions) {\n                continue;\n            }\n            interactor.loadModeOptions(this, data);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Interactivity.js\n\n\nclass Interactivity {\n    constructor(engine, container) {\n        this.detectsOn = "window";\n        this.events = new Events/* Events */.s();\n        this.modes = new Modes(engine, container);\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const detectsOn = data.detectsOn;\n        if (detectsOn !== undefined) {\n            this.detectsOn = detectsOn;\n        }\n        this.events.load(data.events);\n        this.modes.load(data.modes);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Interactivity.js_+_1_modules?')},1428:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   j: () => (/* binding */ ManualParticle)\n/* harmony export */ });\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5051);\n\nconst defaultPosition = 50;\nclass ManualParticle {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.position) {\n            this.position = {\n                x: data.position.x ?? defaultPosition,\n                y: data.position.y ?? defaultPosition,\n                mode: data.position.mode ?? "percent",\n            };\n        }\n        if (data.options) {\n            this.options = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .deepExtend */ .zw)({}, data.options);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/ManualParticle.js?')},7301:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  J: () => (/* binding */ Options)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/Utils.js\nvar Utils = __webpack_require__(5051);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Background/Background.js\nvar Background = __webpack_require__(1643);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/BackgroundMask/BackgroundMask.js\nvar BackgroundMask = __webpack_require__(6879);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/FullScreen/FullScreen.js\nclass FullScreen {\n    constructor() {\n        this.enable = true;\n        this.zIndex = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.zIndex !== undefined) {\n            this.zIndex = data.zIndex;\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Interactivity.js + 1 modules\nvar Interactivity = __webpack_require__(7622);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/ManualParticle.js\nvar ManualParticle = __webpack_require__(1428);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Responsive.js\nvar Responsive = __webpack_require__(1482);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Theme/Theme.js + 1 modules\nvar Theme = __webpack_require__(1198);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/OptionsUtils.js\nvar OptionsUtils = __webpack_require__(7439);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\nvar NumberUtils = __webpack_require__(6100);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Options.js\n\n\n\n\n\n\n\n\n\n\nclass Options {\n    constructor(engine, container) {\n        this._findDefaultTheme = (mode) => {\n            return (this.themes.find((theme) => theme.default.value && theme.default.mode === mode) ??\n                this.themes.find((theme) => theme.default.value && theme.default.mode === "any"));\n        };\n        this._importPreset = (preset) => {\n            this.load(this._engine.getPreset(preset));\n        };\n        this._engine = engine;\n        this._container = container;\n        this.autoPlay = true;\n        this.background = new Background/* Background */.V();\n        this.backgroundMask = new BackgroundMask/* BackgroundMask */.T();\n        this.clear = true;\n        this.defaultThemes = {};\n        this.delay = 0;\n        this.fullScreen = new FullScreen();\n        this.detectRetina = true;\n        this.duration = 0;\n        this.fpsLimit = 120;\n        this.interactivity = new Interactivity/* Interactivity */.k(engine, container);\n        this.manualParticles = [];\n        this.particles = (0,OptionsUtils/* loadParticlesOptions */.y)(this._engine, this._container);\n        this.pauseOnBlur = true;\n        this.pauseOnOutsideViewport = true;\n        this.responsive = [];\n        this.smooth = false;\n        this.style = {};\n        this.themes = [];\n        this.zLayers = 100;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.preset !== undefined) {\n            (0,Utils/* executeOnSingleOrMultiple */.wJ)(data.preset, (preset) => this._importPreset(preset));\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.clear !== undefined) {\n            this.clear = data.clear;\n        }\n        if (data.key !== undefined) {\n            this.key = data.key;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.delay !== undefined) {\n            this.delay = (0,NumberUtils/* setRangeValue */.DT)(data.delay);\n        }\n        const detectRetina = data.detectRetina;\n        if (detectRetina !== undefined) {\n            this.detectRetina = detectRetina;\n        }\n        if (data.duration !== undefined) {\n            this.duration = (0,NumberUtils/* setRangeValue */.DT)(data.duration);\n        }\n        const fpsLimit = data.fpsLimit;\n        if (fpsLimit !== undefined) {\n            this.fpsLimit = fpsLimit;\n        }\n        if (data.pauseOnBlur !== undefined) {\n            this.pauseOnBlur = data.pauseOnBlur;\n        }\n        if (data.pauseOnOutsideViewport !== undefined) {\n            this.pauseOnOutsideViewport = data.pauseOnOutsideViewport;\n        }\n        if (data.zLayers !== undefined) {\n            this.zLayers = data.zLayers;\n        }\n        this.background.load(data.background);\n        const fullScreen = data.fullScreen;\n        if ((0,Utils/* isBoolean */.Lm)(fullScreen)) {\n            this.fullScreen.enable = fullScreen;\n        }\n        else {\n            this.fullScreen.load(fullScreen);\n        }\n        this.backgroundMask.load(data.backgroundMask);\n        this.interactivity.load(data.interactivity);\n        if (data.manualParticles) {\n            this.manualParticles = data.manualParticles.map((t) => {\n                const tmp = new ManualParticle/* ManualParticle */.j();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        this.particles.load(data.particles);\n        this.style = (0,Utils/* deepExtend */.zw)(this.style, data.style);\n        this._engine.loadOptions(this, data);\n        if (data.smooth !== undefined) {\n            this.smooth = data.smooth;\n        }\n        const interactors = this._engine.interactors.get(this._container);\n        if (interactors) {\n            for (const interactor of interactors) {\n                if (interactor.loadOptions) {\n                    interactor.loadOptions(this, data);\n                }\n            }\n        }\n        if (data.responsive !== undefined) {\n            for (const responsive of data.responsive) {\n                const optResponsive = new Responsive/* Responsive */.F();\n                optResponsive.load(responsive);\n                this.responsive.push(optResponsive);\n            }\n        }\n        this.responsive.sort((a, b) => a.maxWidth - b.maxWidth);\n        if (data.themes !== undefined) {\n            for (const theme of data.themes) {\n                const existingTheme = this.themes.find((t) => t.name === theme.name);\n                if (!existingTheme) {\n                    const optTheme = new Theme/* Theme */.S();\n                    optTheme.load(theme);\n                    this.themes.push(optTheme);\n                }\n                else {\n                    existingTheme.load(theme);\n                }\n            }\n        }\n        this.defaultThemes.dark = this._findDefaultTheme("dark")?.name;\n        this.defaultThemes.light = this._findDefaultTheme("light")?.name;\n    }\n    setResponsive(width, pxRatio, defaultOptions) {\n        this.load(defaultOptions);\n        const responsiveOptions = this.responsive.find((t) => t.mode === "screen" && screen ? t.maxWidth > screen.availWidth : t.maxWidth * pxRatio > width);\n        this.load(responsiveOptions?.options);\n        return responsiveOptions?.maxWidth;\n    }\n    setTheme(name) {\n        if (name) {\n            const chosenTheme = this.themes.find((theme) => theme.name === name);\n            if (chosenTheme) {\n                this.load(chosenTheme.options);\n            }\n        }\n        else {\n            const mediaMatch = (0,Utils/* safeMatchMedia */.lV)("(prefers-color-scheme: dark)"), clientDarkMode = mediaMatch && mediaMatch.matches, defaultTheme = this._findDefaultTheme(clientDarkMode ? "dark" : "light");\n            if (defaultTheme) {\n                this.load(defaultTheme.options);\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Options.js_+_1_modules?')},8089:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   O: () => (/* binding */ OptionsColor)\n/* harmony export */ });\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5051);\n\nclass OptionsColor {\n    constructor() {\n        this.value = "";\n    }\n    static create(source, data) {\n        const color = new OptionsColor();\n        color.load(source);\n        if (data !== undefined) {\n            if ((0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .Kg)(data) || (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(data)) {\n                color.load({ value: data });\n            }\n            else {\n                color.load(data);\n            }\n        }\n        return color;\n    }\n    load(data) {\n        if (data?.value === undefined) {\n            return;\n        }\n        this.value = data.value;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/OptionsColor.js?')},4784:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   w: () => (/* binding */ ParticlesBounce)\n/* harmony export */ });\n/* harmony import */ var _ParticlesBounceFactor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6003);\n\nclass ParticlesBounce {\n    constructor() {\n        this.horizontal = new _ParticlesBounceFactor_js__WEBPACK_IMPORTED_MODULE_0__/* .ParticlesBounceFactor */ .F();\n        this.vertical = new _ParticlesBounceFactor_js__WEBPACK_IMPORTED_MODULE_0__/* .ParticlesBounceFactor */ .F();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.horizontal.load(data.horizontal);\n        this.vertical.load(data.vertical);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Bounce/ParticlesBounce.js?")},6003:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   F: () => (/* binding */ ParticlesBounceFactor)\n/* harmony export */ });\n/* harmony import */ var _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2452);\n\nclass ParticlesBounceFactor extends _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_0__/* .ValueWithRandom */ .PV {\n    constructor() {\n        super();\n        this.value = 1;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Bounce/ParticlesBounceFactor.js?")},6796:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  c: () => (/* binding */ Collisions)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Collisions/CollisionsAbsorb.js\nclass CollisionsAbsorb {\n    constructor() {\n        this.speed = 2;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Collisions/CollisionsOverlap.js\nclass CollisionsOverlap {\n    constructor() {\n        this.enable = true;\n        this.retries = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.retries !== undefined) {\n            this.retries = data.retries;\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Bounce/ParticlesBounce.js\nvar ParticlesBounce = __webpack_require__(4784);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\nvar NumberUtils = __webpack_require__(6100);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Collisions/Collisions.js\n\n\n\n\nclass Collisions {\n    constructor() {\n        this.absorb = new CollisionsAbsorb();\n        this.bounce = new ParticlesBounce/* ParticlesBounce */.w();\n        this.enable = false;\n        this.maxSpeed = 50;\n        this.mode = "bounce";\n        this.overlap = new CollisionsOverlap();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.absorb.load(data.absorb);\n        this.bounce.load(data.bounce);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = (0,NumberUtils/* setRangeValue */.DT)(data.maxSpeed);\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        this.overlap.load(data.overlap);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Collisions/Collisions.js_+_2_modules?')},4482:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  y: () => (/* binding */ Move)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/Utils.js\nvar Utils = __webpack_require__(5051);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveAngle.js\nvar MoveAngle = __webpack_require__(1074);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveAttract.js\nvar MoveAttract = __webpack_require__(8884);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveCenter.js\nclass MoveCenter {\n    constructor() {\n        this.x = 50;\n        this.y = 50;\n        this.mode = "percent";\n        this.radius = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.x !== undefined) {\n            this.x = data.x;\n        }\n        if (data.y !== undefined) {\n            this.y = data.y;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveGravity.js\nvar MoveGravity = __webpack_require__(7239);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Path/MovePath.js\nvar MovePath = __webpack_require__(2220);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveTrail.js + 1 modules\nvar MoveTrail = __webpack_require__(6005);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/OutModes.js\nclass OutModes {\n    constructor() {\n        this.default = "out";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        this.bottom = data.bottom ?? data.default;\n        this.left = data.left ?? data.default;\n        this.right = data.right ?? data.default;\n        this.top = data.top ?? data.default;\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Spin.js\nvar Spin = __webpack_require__(6908);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\nvar NumberUtils = __webpack_require__(6100);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Move.js\n\n\n\n\n\n\n\n\n\n\nclass Move {\n    constructor() {\n        this.angle = new MoveAngle/* MoveAngle */.h();\n        this.attract = new MoveAttract/* MoveAttract */.R();\n        this.center = new MoveCenter();\n        this.decay = 0;\n        this.distance = {};\n        this.direction = "none";\n        this.drift = 0;\n        this.enable = false;\n        this.gravity = new MoveGravity/* MoveGravity */.y();\n        this.path = new MovePath/* MovePath */.v();\n        this.outModes = new OutModes();\n        this.random = false;\n        this.size = false;\n        this.speed = 2;\n        this.spin = new Spin/* Spin */.t();\n        this.straight = false;\n        this.trail = new MoveTrail/* MoveTrail */.O();\n        this.vibrate = false;\n        this.warp = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.angle.load((0,Utils/* isNumber */.Et)(data.angle) ? { value: data.angle } : data.angle);\n        this.attract.load(data.attract);\n        this.center.load(data.center);\n        if (data.decay !== undefined) {\n            this.decay = (0,NumberUtils/* setRangeValue */.DT)(data.decay);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.distance !== undefined) {\n            this.distance = (0,Utils/* isNumber */.Et)(data.distance)\n                ? {\n                    horizontal: data.distance,\n                    vertical: data.distance,\n                }\n                : { ...data.distance };\n        }\n        if (data.drift !== undefined) {\n            this.drift = (0,NumberUtils/* setRangeValue */.DT)(data.drift);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.gravity.load(data.gravity);\n        const outModes = data.outModes;\n        if (outModes !== undefined) {\n            if ((0,Utils/* isObject */.Gv)(outModes)) {\n                this.outModes.load(outModes);\n            }\n            else {\n                this.outModes.load({\n                    default: outModes,\n                });\n            }\n        }\n        this.path.load(data.path);\n        if (data.random !== undefined) {\n            this.random = data.random;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.speed !== undefined) {\n            this.speed = (0,NumberUtils/* setRangeValue */.DT)(data.speed);\n        }\n        this.spin.load(data.spin);\n        if (data.straight !== undefined) {\n            this.straight = data.straight;\n        }\n        this.trail.load(data.trail);\n        if (data.vibrate !== undefined) {\n            this.vibrate = data.vibrate;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Move.js_+_2_modules?')},1074:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   h: () => (/* binding */ MoveAngle)\n/* harmony export */ });\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6100);\n\nclass MoveAngle {\n    constructor() {\n        this.offset = 0;\n        this.value = 90;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.offset !== undefined) {\n            this.offset = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.offset);\n        }\n        if (data.value !== undefined) {\n            this.value = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.value);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveAngle.js?")},8884:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   R: () => (/* binding */ MoveAttract)\n/* harmony export */ });\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6100);\n\nclass MoveAttract {\n    constructor() {\n        this.distance = 200;\n        this.enable = false;\n        this.rotate = {\n            x: 3000,\n            y: 3000,\n        };\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.rotate) {\n            const rotateX = data.rotate.x;\n            if (rotateX !== undefined) {\n                this.rotate.x = rotateX;\n            }\n            const rotateY = data.rotate.y;\n            if (rotateY !== undefined) {\n                this.rotate.y = rotateY;\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveAttract.js?")},7239:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   y: () => (/* binding */ MoveGravity)\n/* harmony export */ });\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6100);\n\nclass MoveGravity {\n    constructor() {\n        this.acceleration = 9.81;\n        this.enable = false;\n        this.inverse = false;\n        this.maxSpeed = 50;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.acceleration !== undefined) {\n            this.acceleration = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.acceleration);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.inverse !== undefined) {\n            this.inverse = data.inverse;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(data.maxSpeed);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveGravity.js?")},6005:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  O: () => (/* binding */ MoveTrail)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/OptionsColor.js\nvar OptionsColor = __webpack_require__(8089);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveTrailFill.js\n\nclass MoveTrailFill {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor/* OptionsColor */.O.create(this.color, data.color);\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveTrail.js\n\nclass MoveTrail {\n    constructor() {\n        this.enable = false;\n        this.length = 10;\n        this.fill = new MoveTrailFill();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.fill !== undefined) {\n            this.fill.load(data.fill);\n        }\n        if (data.length !== undefined) {\n            this.length = data.length;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveTrail.js_+_1_modules?")},2220:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   v: () => (/* binding */ MovePath)\n/* harmony export */ });\n/* harmony import */ var _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2452);\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5051);\n\n\nclass MovePath {\n    constructor() {\n        this.clamp = true;\n        this.delay = new _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_0__/* .ValueWithRandom */ .PV();\n        this.enable = false;\n        this.options = {};\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.clamp !== undefined) {\n            this.clamp = data.clamp;\n        }\n        this.delay.load(data.delay);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.generator = data.generator;\n        if (data.options) {\n            this.options = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .deepExtend */ .zw)(this.options, data.options);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Path/MovePath.js?")},6908:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   t: () => (/* binding */ Spin)\n/* harmony export */ });\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5051);\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6100);\n\n\nclass Spin {\n    constructor() {\n        this.acceleration = 0;\n        this.enable = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.acceleration !== undefined) {\n            this.acceleration = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__/* .setRangeValue */ .DT)(data.acceleration);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.position) {\n            this.position = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .deepExtend */ .zw)({}, data.position);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Spin.js?")},7141:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Y: () => (/* binding */ Opacity)\n/* harmony export */ });\n/* harmony import */ var _OpacityAnimation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7807);\n/* harmony import */ var _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2452);\n\n\nclass Opacity extends _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_1__/* .RangedAnimationValueWithRandom */ .AI {\n    constructor() {\n        super();\n        this.animation = new _OpacityAnimation_js__WEBPACK_IMPORTED_MODULE_0__/* .OpacityAnimation */ .I();\n        this.value = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        const animation = data.animation;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Opacity/Opacity.js?")},7807:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   I: () => (/* binding */ OpacityAnimation)\n/* harmony export */ });\n/* harmony import */ var _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5908);\n\nclass OpacityAnimation extends _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__/* .RangedAnimationOptions */ .Q {\n    constructor() {\n        super();\n        this.destroy = "none";\n        this.speed = 2;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Opacity/OpacityAnimation.js?')},906:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  U: () => (/* binding */ ParticlesOptions)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/Utils.js\nvar Utils = __webpack_require__(5051);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/AnimatableColor.js\nvar AnimatableColor = __webpack_require__(4133);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Collisions/Collisions.js + 2 modules\nvar Collisions = __webpack_require__(6796);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Effect/Effect.js\n\nclass Effect {\n    constructor() {\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = [];\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const options = data.options;\n        if (options !== undefined) {\n            for (const effect in options) {\n                const item = options[effect];\n                if (item) {\n                    this.options[effect] = (0,Utils/* deepExtend */.zw)(this.options[effect] ?? {}, item);\n                }\n            }\n        }\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Move.js + 2 modules\nvar Move = __webpack_require__(4482);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Opacity/Opacity.js\nvar Opacity = __webpack_require__(7141);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Bounce/ParticlesBounce.js\nvar ParticlesBounce = __webpack_require__(4784);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Number/ParticlesDensity.js\nclass ParticlesDensity {\n    constructor() {\n        this.enable = false;\n        this.width = 1920;\n        this.height = 1080;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        const width = data.width;\n        if (width !== undefined) {\n            this.width = width;\n        }\n        const height = data.height;\n        if (height !== undefined) {\n            this.height = height;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Number/ParticlesNumberLimit.js\nclass ParticlesNumberLimit {\n    constructor() {\n        this.mode = "delete";\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Number/ParticlesNumber.js\n\n\nclass ParticlesNumber {\n    constructor() {\n        this.density = new ParticlesDensity();\n        this.limit = new ParticlesNumberLimit();\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.density.load(data.density);\n        this.limit.load(data.limit);\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Shadow.js\nvar Shadow = __webpack_require__(2156);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Shape/Shape.js\nvar Shape = __webpack_require__(8673);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Size/Size.js\nvar Size = __webpack_require__(8765);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Stroke.js\nvar Stroke = __webpack_require__(2004);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/ZIndex/ZIndex.js\nvar ZIndex = __webpack_require__(3271);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/ParticlesOptions.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ParticlesOptions {\n    constructor(engine, container) {\n        this._engine = engine;\n        this._container = container;\n        this.bounce = new ParticlesBounce/* ParticlesBounce */.w();\n        this.collisions = new Collisions/* Collisions */.c();\n        this.color = new AnimatableColor/* AnimatableColor */.A();\n        this.color.value = "#fff";\n        this.effect = new Effect();\n        this.groups = {};\n        this.move = new Move/* Move */.y();\n        this.number = new ParticlesNumber();\n        this.opacity = new Opacity/* Opacity */.Y();\n        this.reduceDuplicates = false;\n        this.shadow = new Shadow/* Shadow */.V();\n        this.shape = new Shape/* Shape */.y();\n        this.size = new Size/* Size */.o();\n        this.stroke = new Stroke/* Stroke */.t();\n        this.zIndex = new ZIndex/* ZIndex */.P();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.groups !== undefined) {\n            for (const group of Object.keys(data.groups)) {\n                if (!Object.hasOwn(data.groups, group)) {\n                    continue;\n                }\n                const item = data.groups[group];\n                if (item !== undefined) {\n                    this.groups[group] = (0,Utils/* deepExtend */.zw)(this.groups[group] ?? {}, item);\n                }\n            }\n        }\n        if (data.reduceDuplicates !== undefined) {\n            this.reduceDuplicates = data.reduceDuplicates;\n        }\n        this.bounce.load(data.bounce);\n        this.color.load(AnimatableColor/* AnimatableColor */.A.create(this.color, data.color));\n        this.effect.load(data.effect);\n        this.move.load(data.move);\n        this.number.load(data.number);\n        this.opacity.load(data.opacity);\n        this.shape.load(data.shape);\n        this.size.load(data.size);\n        this.shadow.load(data.shadow);\n        this.zIndex.load(data.zIndex);\n        this.collisions.load(data.collisions);\n        if (data.interactivity !== undefined) {\n            this.interactivity = (0,Utils/* deepExtend */.zw)({}, data.interactivity);\n        }\n        const strokeToLoad = data.stroke;\n        if (strokeToLoad) {\n            this.stroke = (0,Utils/* executeOnSingleOrMultiple */.wJ)(strokeToLoad, (t) => {\n                const tmp = new Stroke/* Stroke */.t();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        if (this._container) {\n            const updaters = this._engine.updaters.get(this._container);\n            if (updaters) {\n                for (const updater of updaters) {\n                    if (updater.loadOptions) {\n                        updater.loadOptions(this, data);\n                    }\n                }\n            }\n            const interactors = this._engine.interactors.get(this._container);\n            if (interactors) {\n                for (const interactor of interactors) {\n                    if (interactor.loadParticlesOptions) {\n                        interactor.loadParticlesOptions(this, data);\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/ParticlesOptions.js_+_4_modules?')},2156:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ Shadow)\n/* harmony export */ });\n/* harmony import */ var _OptionsColor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8089);\n\nclass Shadow {\n    constructor() {\n        this.blur = 0;\n        this.color = new _OptionsColor_js__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .O();\n        this.enable = false;\n        this.offset = {\n            x: 0,\n            y: 0,\n        };\n        this.color.value = "#000";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = _OptionsColor_js__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .O.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.offset === undefined) {\n            return;\n        }\n        if (data.offset.x !== undefined) {\n            this.offset.x = data.offset.x;\n        }\n        if (data.offset.y !== undefined) {\n            this.offset.y = data.offset.y;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Shadow.js?')},8673:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   y: () => (/* binding */ Shape)\n/* harmony export */ });\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5051);\n\nclass Shape {\n    constructor() {\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = "circle";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const options = data.options;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .deepExtend */ .zw)(this.options[shape] ?? {}, item);\n                }\n            }\n        }\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Shape/Shape.js?')},8765:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   o: () => (/* binding */ Size)\n/* harmony export */ });\n/* harmony import */ var _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2452);\n/* harmony import */ var _SizeAnimation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4983);\n\n\nclass Size extends _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_0__/* .RangedAnimationValueWithRandom */ .AI {\n    constructor() {\n        super();\n        this.animation = new _SizeAnimation_js__WEBPACK_IMPORTED_MODULE_1__/* .SizeAnimation */ .q();\n        this.value = 3;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        const animation = data.animation;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Size/Size.js?")},4983:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   q: () => (/* binding */ SizeAnimation)\n/* harmony export */ });\n/* harmony import */ var _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5908);\n\nclass SizeAnimation extends _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__/* .RangedAnimationOptions */ .Q {\n    constructor() {\n        super();\n        this.destroy = "none";\n        this.speed = 5;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Size/SizeAnimation.js?')},2004:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   t: () => (/* binding */ Stroke)\n/* harmony export */ });\n/* harmony import */ var _AnimatableColor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4133);\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6100);\n\n\nclass Stroke {\n    constructor() {\n        this.width = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = _AnimatableColor_js__WEBPACK_IMPORTED_MODULE_0__/* .AnimatableColor */ .A.create(this.color, data.color);\n        }\n        if (data.width !== undefined) {\n            this.width = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__/* .setRangeValue */ .DT)(data.width);\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__/* .setRangeValue */ .DT)(data.opacity);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Stroke.js?")},3271:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: () => (/* binding */ ZIndex)\n/* harmony export */ });\n/* harmony import */ var _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2452);\n\nclass ZIndex extends _ValueWithRandom_js__WEBPACK_IMPORTED_MODULE_0__/* .ValueWithRandom */ .PV {\n    constructor() {\n        super();\n        this.opacityRate = 1;\n        this.sizeRate = 1;\n        this.velocityRate = 1;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.opacityRate !== undefined) {\n            this.opacityRate = data.opacityRate;\n        }\n        if (data.sizeRate !== undefined) {\n            this.sizeRate = data.sizeRate;\n        }\n        if (data.velocityRate !== undefined) {\n            this.velocityRate = data.velocityRate;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/ZIndex/ZIndex.js?")},1482:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   F: () => (/* binding */ Responsive)\n/* harmony export */ });\n/* harmony import */ var _Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5051);\n\nclass Responsive {\n    constructor() {\n        this.maxWidth = Infinity;\n        this.options = {};\n        this.mode = "canvas";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.maxWidth !== undefined) {\n            this.maxWidth = data.maxWidth;\n        }\n        if (data.mode !== undefined) {\n            if (data.mode === "screen") {\n                this.mode = "screen";\n            }\n            else {\n                this.mode = "canvas";\n            }\n        }\n        if (data.options !== undefined) {\n            this.options = (0,_Utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .deepExtend */ .zw)({}, data.options);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Responsive.js?')},1198:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  S: () => (/* binding */ Theme)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Theme/ThemeDefault.js\nclass ThemeDefault {\n    constructor() {\n        this.auto = false;\n        this.mode = "any";\n        this.value = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.auto !== undefined) {\n            this.auto = data.auto;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/Utils.js\nvar Utils = __webpack_require__(5051);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Theme/Theme.js\n\n\nclass Theme {\n    constructor() {\n        this.name = "";\n        this.default = new ThemeDefault();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        this.default.load(data.default);\n        if (data.options !== undefined) {\n            this.options = (0,Utils/* deepExtend */.zw)({}, data.options);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/Theme/Theme.js_+_1_modules?')},2452:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI: () => (/* binding */ RangedAnimationValueWithRandom),\n/* harmony export */   PV: () => (/* binding */ ValueWithRandom)\n/* harmony export */ });\n/* unused harmony export AnimationValueWithRandom */\n/* harmony import */ var _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5908);\n/* harmony import */ var _Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6100);\n\n\nclass ValueWithRandom {\n    constructor() {\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.value !== undefined) {\n            this.value = (0,_Utils_NumberUtils_js__WEBPACK_IMPORTED_MODULE_1__/* .setRangeValue */ .DT)(data.value);\n        }\n    }\n}\nclass AnimationValueWithRandom extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__/* .AnimationOptions */ .p();\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        const animation = data.animation;\n        if (animation !== undefined) {\n            this.animation.load(animation);\n        }\n    }\n}\nclass RangedAnimationValueWithRandom extends AnimationValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new _AnimationOptions_js__WEBPACK_IMPORTED_MODULE_0__/* .RangedAnimationOptions */ .Q();\n    }\n    load(data) {\n        super.load(data);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Options/Classes/ValueWithRandom.js?")},3567:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IU: () => (/* binding */ clear),\n/* harmony export */   Md: () => (/* binding */ paintImage),\n/* harmony export */   Sn: () => (/* binding */ paintBase),\n/* harmony export */   V6: () => (/* binding */ drawLine),\n/* harmony export */   Wb: () => (/* binding */ drawParticlePlugin),\n/* harmony export */   e_: () => (/* binding */ drawPlugin),\n/* harmony export */   p0: () => (/* binding */ drawParticle),\n/* harmony export */   yx: () => (/* binding */ alterHsl)\n/* harmony export */ });\n/* unused harmony exports drawEffect, drawShape, drawShapeAfterDraw */\n/* harmony import */ var _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6932);\n\nconst origin = { x: 0, y: 0 };\nfunction drawLine(context, begin, end) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n}\nfunction paintBase(context, dimension, baseColor) {\n    context.fillStyle = baseColor ?? "rgba(0,0,0,0)";\n    context.fillRect(origin.x, origin.y, dimension.width, dimension.height);\n}\nfunction paintImage(context, dimension, image, opacity) {\n    if (!image) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(image, origin.x, origin.y, dimension.width, dimension.height);\n    context.globalAlpha = 1;\n}\nfunction clear(context, dimension) {\n    context.clearRect(origin.x, origin.y, dimension.width, dimension.height);\n}\nasync function drawParticle(data) {\n    const { container, context, particle, delta, colorStyles, backgroundMask, composite, radius, opacity, shadow, transform, } = data, pos = particle.getPosition(), defaultAngle = 0, angle = particle.rotation + (particle.pathRotation ? particle.velocity.angle : defaultAngle), rotateData = {\n        sin: Math.sin(angle),\n        cos: Math.cos(angle),\n    }, defaultTransformFactor = 1, transformData = {\n        a: rotateData.cos * (transform.a ?? defaultTransformFactor),\n        b: rotateData.sin * (transform.b ?? defaultTransformFactor),\n        c: -rotateData.sin * (transform.c ?? defaultTransformFactor),\n        d: rotateData.cos * (transform.d ?? defaultTransformFactor),\n    };\n    context.setTransform(transformData.a, transformData.b, transformData.c, transformData.d, pos.x, pos.y);\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    const shadowColor = particle.shadowColor;\n    if (shadow.enable && shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = (0,_ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getStyleFromRgb */ .xx)(shadowColor);\n        context.shadowOffsetX = shadow.offset.x;\n        context.shadowOffsetY = shadow.offset.y;\n    }\n    if (colorStyles.fill) {\n        context.fillStyle = colorStyles.fill;\n    }\n    const minStrokeWidth = 0, strokeWidth = particle.strokeWidth ?? minStrokeWidth;\n    context.lineWidth = strokeWidth;\n    if (colorStyles.stroke) {\n        context.strokeStyle = colorStyles.stroke;\n    }\n    const drawData = {\n        container,\n        context,\n        particle,\n        radius,\n        opacity,\n        delta,\n        transformData,\n        strokeWidth,\n    };\n    await drawShape(drawData);\n    await drawShapeAfterDraw(drawData);\n    await drawEffect(drawData);\n    context.globalCompositeOperation = "source-over";\n    context.resetTransform();\n}\nasync function drawEffect(data) {\n    const { container, context, particle, radius, opacity, delta, transformData } = data;\n    if (!particle.effect) {\n        return;\n    }\n    const drawer = container.effectDrawers.get(particle.effect);\n    if (!drawer) {\n        return;\n    }\n    await drawer.draw({\n        context,\n        particle,\n        radius,\n        opacity,\n        delta,\n        pixelRatio: container.retina.pixelRatio,\n        transformData: { ...transformData },\n    });\n}\nasync function drawShape(data) {\n    const { container, context, particle, radius, opacity, delta, strokeWidth, transformData } = data, minStrokeWidth = 0;\n    if (!particle.shape) {\n        return;\n    }\n    const drawer = container.shapeDrawers.get(particle.shape);\n    if (!drawer) {\n        return;\n    }\n    context.beginPath();\n    await drawer.draw({\n        context,\n        particle,\n        radius,\n        opacity,\n        delta,\n        pixelRatio: container.retina.pixelRatio,\n        transformData: { ...transformData },\n    });\n    if (particle.shapeClose) {\n        context.closePath();\n    }\n    if (strokeWidth > minStrokeWidth) {\n        context.stroke();\n    }\n    if (particle.shapeFill) {\n        context.fill();\n    }\n}\nasync function drawShapeAfterDraw(data) {\n    const { container, context, particle, radius, opacity, delta, transformData } = data;\n    if (!particle.shape) {\n        return;\n    }\n    const drawer = container.shapeDrawers.get(particle.shape);\n    if (!drawer?.afterDraw) {\n        return;\n    }\n    await drawer.afterDraw({\n        context,\n        particle,\n        radius,\n        opacity,\n        delta,\n        pixelRatio: container.retina.pixelRatio,\n        transformData: { ...transformData },\n    });\n}\nasync function drawPlugin(context, plugin, delta) {\n    if (!plugin.draw) {\n        return;\n    }\n    await plugin.draw(context, delta);\n}\nasync function drawParticlePlugin(context, plugin, particle, delta) {\n    if (!plugin.drawParticle) {\n        return;\n    }\n    await plugin.drawParticle(context, particle, delta);\n}\nfunction alterHsl(color, type, value) {\n    const lFactor = 1;\n    return {\n        h: color.h,\n        s: color.s,\n        l: color.l + (type === "darken" ? -lFactor : lFactor) * value,\n    };\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Utils/CanvasUtils.js?')},6932:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BN: () => (/* binding */ rangeColorToRgb),\n/* harmony export */   EY: () => (/* binding */ colorMix),\n/* harmony export */   Jv: () => (/* binding */ updateColor),\n/* harmony export */   K6: () => (/* binding */ rgbToHsl),\n/* harmony export */   LC: () => (/* binding */ getStyleFromHsl),\n/* harmony export */   O_: () => (/* binding */ getHslFromAnimation),\n/* harmony export */   PG: () => (/* binding */ getLinkRandomColor),\n/* harmony export */   R5: () => (/* binding */ rangeColorToHsl),\n/* harmony export */   YL: () => (/* binding */ hslToRgb),\n/* harmony export */   _h: () => (/* binding */ getLinkColor),\n/* harmony export */   a9: () => (/* binding */ addColorManager),\n/* harmony export */   ay: () => (/* binding */ hslaToRgba),\n/* harmony export */   pz: () => (/* binding */ getHslAnimationFromHsl),\n/* harmony export */   xx: () => (/* binding */ getStyleFromRgb)\n/* harmony export */ });\n/* unused harmony exports colorToRgb, colorToHsl, stringToAlpha, stringToRgb, getRandomRgbColor, updateColorValue */\n/* harmony import */ var _NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6100);\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5051);\n/* harmony import */ var _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5849);\n\n\n\nconst randomColorValue = "random", midColorValue = "mid", colorManagers = new Map();\nfunction addColorManager(manager) {\n    colorManagers.set(manager.key, manager);\n}\nfunction stringToRgba(input) {\n    for (const [, manager] of colorManagers) {\n        if (input.startsWith(manager.stringPrefix)) {\n            return manager.parseString(input);\n        }\n    }\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i, hexFixed = input.replace(shorthandRegex, (_, r, g, b, a) => {\n        return r + r + g + g + b + b + (a !== undefined ? a + a : "");\n    }), regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i, result = regex.exec(hexFixed), radix = 16, defaultAlpha = 1, alphaFactor = 0xff;\n    return result\n        ? {\n            a: result[4] !== undefined\n                ? parseInt(result[4], radix) / alphaFactor\n                : defaultAlpha,\n            b: parseInt(result[3], radix),\n            g: parseInt(result[2], radix),\n            r: parseInt(result[1], radix),\n        }\n        : undefined;\n}\nfunction rangeColorToRgb(input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(input) ? { value: input } : input;\n    if ((0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(color.value)) {\n        return colorToRgb(color.value, index, useIndex);\n    }\n    if ((0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(color.value)) {\n        return rangeColorToRgb({\n            value: (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .itemFromArray */ .Vh)(color.value, index, useIndex),\n        });\n    }\n    for (const [, manager] of colorManagers) {\n        const res = manager.handleRangeColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nfunction colorToRgb(input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(input) ? { value: input } : input;\n    if ((0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(color.value)) {\n        return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(color.value);\n    }\n    if ((0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(color.value)) {\n        return colorToRgb({\n            value: (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .itemFromArray */ .Vh)(color.value, index, useIndex),\n        });\n    }\n    for (const [, manager] of colorManagers) {\n        const res = manager.handleColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nfunction colorToHsl(color, index, useIndex = true) {\n    const rgb = colorToRgb(color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nfunction rangeColorToHsl(color, index, useIndex = true) {\n    const rgb = rangeColorToRgb(color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nfunction rgbToHsl(color) {\n    const rgbMax = 255, hMax = 360, sMax = 100, lMax = 100, hMin = 0, sMin = 0, hPhase = 60, half = 0.5, double = 2, r1 = color.r / rgbMax, g1 = color.g / rgbMax, b1 = color.b / rgbMax, max = Math.max(r1, g1, b1), min = Math.min(r1, g1, b1), res = {\n        h: hMin,\n        l: (max + min) * half,\n        s: sMin,\n    };\n    if (max !== min) {\n        res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n        res.h =\n            r1 === max\n                ? (g1 - b1) / (max - min)\n                : (res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min));\n    }\n    res.l *= lMax;\n    res.s *= sMax;\n    res.h *= hPhase;\n    if (res.h < hMin) {\n        res.h += hMax;\n    }\n    if (res.h >= hMax) {\n        res.h -= hMax;\n    }\n    return res;\n}\nfunction stringToAlpha(input) {\n    return stringToRgba(input)?.a;\n}\nfunction stringToRgb(input) {\n    return stringToRgba(input);\n}\nfunction hslToRgb(hsl) {\n    const hMax = 360, sMax = 100, lMax = 100, sMin = 0, lMin = 0, h = ((hsl.h % hMax) + hMax) % hMax, s = Math.max(sMin, Math.min(sMax, hsl.s)), l = Math.max(lMin, Math.min(lMax, hsl.l)), hNormalized = h / hMax, sNormalized = s / sMax, lNormalized = l / lMax, rgbFactor = 255, triple = 3;\n    if (s === sMin) {\n        const grayscaleValue = Math.round(lNormalized * rgbFactor);\n        return { r: grayscaleValue, g: grayscaleValue, b: grayscaleValue };\n    }\n    const half = 0.5, double = 2, channel = (temp1, temp2, temp3) => {\n        const temp3Min = 0, temp3Max = 1, sextuple = 6;\n        if (temp3 < temp3Min) {\n            temp3++;\n        }\n        if (temp3 > temp3Max) {\n            temp3--;\n        }\n        if (temp3 * sextuple < temp3Max) {\n            return temp1 + (temp2 - temp1) * sextuple * temp3;\n        }\n        if (temp3 * double < temp3Max) {\n            return temp2;\n        }\n        if (temp3 * triple < temp3Max * double) {\n            const temp3Offset = double / triple;\n            return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n        }\n        return temp1;\n    }, sNormalizedOffset = 1, temp1 = lNormalized < half\n        ? lNormalized * (sNormalizedOffset + sNormalized)\n        : lNormalized + sNormalized - lNormalized * sNormalized, temp2 = double * lNormalized - temp1, phaseNumerator = 1, phaseThird = phaseNumerator / triple, red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)), green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)), blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n    return { r: Math.round(red), g: Math.round(green), b: Math.round(blue) };\n}\nfunction hslaToRgba(hsla) {\n    const rgbResult = hslToRgb(hsla);\n    return {\n        a: hsla.a,\n        b: rgbResult.b,\n        g: rgbResult.g,\n        r: rgbResult.r,\n    };\n}\nfunction getRandomRgbColor(min) {\n    const defaultMin = 0, fixedMin = min ?? defaultMin, rgbMax = 256;\n    return {\n        b: Math.floor((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .U4)((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(fixedMin, rgbMax))),\n        g: Math.floor((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .U4)((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(fixedMin, rgbMax))),\n        r: Math.floor((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .U4)((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(fixedMin, rgbMax))),\n    };\n}\nfunction getStyleFromRgb(color, opacity) {\n    const defaultOpacity = 1;\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? defaultOpacity})`;\n}\nfunction getStyleFromHsl(color, opacity) {\n    const defaultOpacity = 1;\n    return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? defaultOpacity})`;\n}\nfunction colorMix(color1, color2, size1, size2) {\n    let rgb1 = color1, rgb2 = color2;\n    if (rgb1.r === undefined) {\n        rgb1 = hslToRgb(color1);\n    }\n    if (rgb2.r === undefined) {\n        rgb2 = hslToRgb(color2);\n    }\n    return {\n        b: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .mix */ .jh)(rgb1.b, rgb2.b, size1, size2),\n        g: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .mix */ .jh)(rgb1.g, rgb2.g, size1, size2),\n        r: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .mix */ .jh)(rgb1.r, rgb2.r, size1, size2),\n    };\n}\nfunction getLinkColor(p1, p2, linkColor) {\n    if (linkColor === randomColorValue) {\n        return getRandomRgbColor();\n    }\n    else if (linkColor === midColorValue) {\n        const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(), destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n        if (sourceColor && destColor && p2) {\n            return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n        }\n        else {\n            const hslColor = sourceColor ?? destColor;\n            if (hslColor) {\n                return hslToRgb(hslColor);\n            }\n        }\n    }\n    else {\n        return linkColor;\n    }\n}\nfunction getLinkRandomColor(optColor, blink, consent) {\n    const color = (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(optColor) ? optColor : optColor.value;\n    if (color === randomColorValue) {\n        if (consent) {\n            return rangeColorToRgb({\n                value: color,\n            });\n        }\n        if (blink) {\n            return randomColorValue;\n        }\n        return midColorValue;\n    }\n    else if (color === midColorValue) {\n        return midColorValue;\n    }\n    else {\n        return rangeColorToRgb({\n            value: color,\n        });\n    }\n}\nfunction getHslFromAnimation(animation) {\n    return animation !== undefined\n        ? {\n            h: animation.h.value,\n            s: animation.s.value,\n            l: animation.l.value,\n        }\n        : undefined;\n}\nfunction getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n    const resColor = {\n        h: {\n            enable: false,\n            value: hsl.h,\n        },\n        s: {\n            enable: false,\n            value: hsl.s,\n        },\n        l: {\n            enable: false,\n            value: hsl.l,\n        },\n    };\n    if (animationOptions) {\n        setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n        setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n        setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n    }\n    return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n    colorValue.enable = colorAnimation.enable;\n    const defaultVelocity = 0, decayOffset = 1, defaultLoops = 0, defaultTime = 0;\n    if (colorValue.enable) {\n        colorValue.velocity = ((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(colorAnimation.speed) / _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5) * reduceFactor;\n        colorValue.decay = decayOffset - (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(colorAnimation.decay);\n        colorValue.status = "increasing";\n        colorValue.loops = defaultLoops;\n        colorValue.maxLoops = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(colorAnimation.count);\n        colorValue.time = defaultTime;\n        colorValue.delayTime = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(colorAnimation.delay) * _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .millisecondsToSeconds */ .Xu;\n        if (!colorAnimation.sync) {\n            colorValue.velocity *= (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)();\n            colorValue.value *= (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)();\n        }\n        colorValue.initialValue = colorValue.value;\n        colorValue.offset = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(colorAnimation.offset);\n    }\n    else {\n        colorValue.velocity = defaultVelocity;\n    }\n}\nfunction updateColorValue(data, range, decrease, delta) {\n    const minLoops = 0, minDelay = 0, identity = 1, minVelocity = 0, minOffset = 0, velocityFactor = 3.6;\n    if (!data ||\n        !data.enable ||\n        ((data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops))) {\n        return;\n    }\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        return;\n    }\n    const offset = data.offset ? (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .U4)(data.offset) : minOffset, velocity = (data.velocity ?? minVelocity) * delta.factor + offset * velocityFactor, decay = data.decay ?? identity, max = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeMax */ .W9)(range), min = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeMin */ .Sg)(range);\n    if (!decrease || data.status === "increasing") {\n        data.value += velocity;\n        if (data.value > max) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            if (decrease) {\n                data.status = "decreasing";\n            }\n            else {\n                data.value -= max;\n            }\n        }\n    }\n    else {\n        data.value -= velocity;\n        const minValue = 0;\n        if (data.value < minValue) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            data.status = "increasing";\n        }\n    }\n    if (data.velocity && decay !== identity) {\n        data.velocity *= decay;\n    }\n    data.value = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .clamp */ .qE)(data.value, min, max);\n}\nfunction updateColor(color, delta) {\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color;\n    const ranges = {\n        h: { min: 0, max: 360 },\n        s: { min: 0, max: 100 },\n        l: { min: 0, max: 100 },\n    };\n    if (h) {\n        updateColorValue(h, ranges.h, false, delta);\n    }\n    if (s) {\n        updateColorValue(s, ranges.s, true, delta);\n    }\n    if (l) {\n        updateColorValue(l, ranges.l, true, delta);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Utils/ColorUtils.js?')},6100:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $m: () => (/* binding */ getParticleBaseVelocity),\n/* harmony export */   DT: () => (/* binding */ setRangeValue),\n/* harmony export */   G0: () => (/* binding */ getRandom),\n/* harmony export */   JY: () => (/* binding */ getParticleDirectionAngle),\n/* harmony export */   M3: () => (/* binding */ parseAlpha),\n/* harmony export */   Mh: () => (/* binding */ calcPositionOrRandomFromSize),\n/* harmony export */   Nx: () => (/* binding */ calcExactPositionOrRandomFromSize),\n/* harmony export */   OW: () => (/* binding */ collisionVelocity),\n/* harmony export */   Sg: () => (/* binding */ getRangeMin),\n/* harmony export */   U4: () => (/* binding */ randomInRange),\n/* harmony export */   VG: () => (/* binding */ getRangeValue),\n/* harmony export */   W9: () => (/* binding */ getRangeMax),\n/* harmony export */   Yf: () => (/* binding */ getDistance),\n/* harmony export */   il: () => (/* binding */ getEasing),\n/* harmony export */   jh: () => (/* binding */ mix),\n/* harmony export */   l1: () => (/* binding */ calcPositionOrRandomFromSizeRanged),\n/* harmony export */   nL: () => (/* binding */ addEasing),\n/* harmony export */   pu: () => (/* binding */ degToRad),\n/* harmony export */   qE: () => (/* binding */ clamp),\n/* harmony export */   vr: () => (/* binding */ getDistances)\n/* harmony export */ });\n/* unused harmony exports setRandom, calcPositionFromSize, calcExactPositionOrRandomFromSizeRanged */\n/* harmony import */ var _Core_Utils_Vector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3033);\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5051);\n/* harmony import */ var _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5849);\n\n\n\nlet _random = Math.random;\nconst easings = new Map(), double = 2, doublePI = Math.PI * double;\nfunction addEasing(name, easing) {\n    if (easings.get(name)) {\n        return;\n    }\n    easings.set(name, easing);\n}\nfunction getEasing(name) {\n    return easings.get(name) ?? ((value) => value);\n}\nfunction setRandom(rnd = Math.random) {\n    _random = rnd;\n}\nfunction getRandom() {\n    const min = 0, max = 1;\n    return clamp(_random(), min, max - Number.EPSILON);\n}\nfunction clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n}\nfunction mix(comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n}\nfunction randomInRange(r) {\n    const max = getRangeMax(r), minOffset = 0;\n    let min = getRangeMin(r);\n    if (max === min) {\n        min = minOffset;\n    }\n    return getRandom() * (max - min) + min;\n}\nfunction getRangeValue(value) {\n    return (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .Et)(value) ? value : randomInRange(value);\n}\nfunction getRangeMin(value) {\n    return (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .Et)(value) ? value : value.min;\n}\nfunction getRangeMax(value) {\n    return (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .Et)(value) ? value : value.max;\n}\nfunction setRangeValue(source, value) {\n    if (source === value || (value === undefined && (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .Et)(source))) {\n        return source;\n    }\n    const min = getRangeMin(source), max = getRangeMax(source);\n    return value !== undefined\n        ? {\n            min: Math.min(min, value),\n            max: Math.max(max, value),\n        }\n        : setRangeValue(min, max);\n}\nfunction getDistances(pointA, pointB) {\n    const dx = pointA.x - pointB.x, dy = pointA.y - pointB.y, squareExp = 2;\n    return { dx: dx, dy: dy, distance: Math.sqrt(dx ** squareExp + dy ** squareExp) };\n}\nfunction getDistance(pointA, pointB) {\n    return getDistances(pointA, pointB).distance;\n}\nfunction degToRad(degrees) {\n    const PIDeg = 180;\n    return (degrees * Math.PI) / PIDeg;\n}\nfunction getParticleDirectionAngle(direction, position, center) {\n    if ((0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .Et)(direction)) {\n        return degToRad(direction);\n    }\n    const empty = 0, half = 0.5, quarter = 0.25, threeQuarter = half + quarter;\n    switch (direction) {\n        case "top":\n            return -Math.PI * half;\n        case "top-right":\n            return -Math.PI * quarter;\n        case "right":\n            return empty;\n        case "bottom-right":\n            return Math.PI * quarter;\n        case "bottom":\n            return Math.PI * half;\n        case "bottom-left":\n            return Math.PI * threeQuarter;\n        case "left":\n            return Math.PI;\n        case "top-left":\n            return -Math.PI * threeQuarter;\n        case "inside":\n            return Math.atan2(center.y - position.y, center.x - position.x);\n        case "outside":\n            return Math.atan2(position.y - center.y, position.x - center.x);\n        default:\n            return getRandom() * doublePI;\n    }\n}\nfunction getParticleBaseVelocity(direction) {\n    const baseVelocity = _Core_Utils_Vector_js__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .M.origin;\n    baseVelocity.length = 1;\n    baseVelocity.angle = direction;\n    return baseVelocity;\n}\nfunction collisionVelocity(v1, v2, m1, m2) {\n    const double = 2;\n    return _Core_Utils_Vector_js__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .M.create((v1.x * (m1 - m2)) / (m1 + m2) + (v2.x * double * m2) / (m1 + m2), v1.y);\n}\nfunction calcPositionFromSize(data) {\n    return data.position?.x !== undefined && data.position.y !== undefined\n        ? {\n            x: (data.position.x * data.size.width) / percentDenominator,\n            y: (data.position.y * data.size.height) / percentDenominator,\n        }\n        : undefined;\n}\nfunction calcPositionOrRandomFromSize(data) {\n    return {\n        x: ((data.position?.x ?? getRandom() * _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5) * data.size.width) / _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5,\n        y: ((data.position?.y ?? getRandom() * _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5) * data.size.height) / _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5,\n    };\n}\nfunction calcPositionOrRandomFromSizeRanged(data) {\n    const position = {\n        x: data.position?.x !== undefined ? getRangeValue(data.position.x) : undefined,\n        y: data.position?.y !== undefined ? getRangeValue(data.position.y) : undefined,\n    };\n    return calcPositionOrRandomFromSize({ size: data.size, position });\n}\nfunction calcExactPositionOrRandomFromSize(data) {\n    return {\n        x: data.position?.x ?? getRandom() * data.size.width,\n        y: data.position?.y ?? getRandom() * data.size.height,\n    };\n}\nfunction calcExactPositionOrRandomFromSizeRanged(data) {\n    const position = {\n        x: data.position?.x !== undefined ? getRangeValue(data.position.x) : undefined,\n        y: data.position?.y !== undefined ? getRangeValue(data.position.y) : undefined,\n    };\n    return calcExactPositionOrRandomFromSize({ size: data.size, position });\n}\nfunction parseAlpha(input) {\n    const defaultAlpha = 1;\n    if (!input) {\n        return defaultAlpha;\n    }\n    return input.endsWith("%") ? parseFloat(input) / _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5 : parseFloat(input);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js?')},7439:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ loadOptions),\n/* harmony export */   y: () => (/* binding */ loadParticlesOptions)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_Particles_ParticlesOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(906);\n\nfunction loadOptions(options, ...sourceOptionsArr) {\n    for (const sourceOptions of sourceOptionsArr) {\n        options.load(sourceOptions);\n    }\n}\nfunction loadParticlesOptions(engine, container, ...sourceOptionsArr) {\n    const options = new _Options_Classes_Particles_ParticlesOptions_js__WEBPACK_IMPORTED_MODULE_0__/* .ParticlesOptions */ .U(engine, container);\n    loadOptions(options, ...sourceOptionsArr);\n    return options;\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Utils/OptionsUtils.js?")},5051:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AE: () => (/* binding */ calculateBounds),\n/* harmony export */   Al: () => (/* binding */ loadFont),\n/* harmony export */   B9: () => (/* binding */ isSsr),\n/* harmony export */   BR: () => (/* binding */ safeIntersectionObserver),\n/* harmony export */   E9: () => (/* binding */ getPosition),\n/* harmony export */   Et: () => (/* binding */ isNumber),\n/* harmony export */   Gv: () => (/* binding */ isObject),\n/* harmony export */   Kg: () => (/* binding */ isString),\n/* harmony export */   Lm: () => (/* binding */ isBoolean),\n/* harmony export */   NV: () => (/* binding */ divMode),\n/* harmony export */   TA: () => (/* binding */ itemFromSingleOrMultiple),\n/* harmony export */   Tg: () => (/* binding */ circleBounceDataFromParticle),\n/* harmony export */   Tj: () => (/* binding */ isPointInside),\n/* harmony export */   U6: () => (/* binding */ divModeExecute),\n/* harmony export */   UC: () => (/* binding */ updateAnimation),\n/* harmony export */   Vh: () => (/* binding */ itemFromArray),\n/* harmony export */   Xs: () => (/* binding */ initParticleNumericAnimationValue),\n/* harmony export */   YC: () => (/* binding */ getSize),\n/* harmony export */   cy: () => (/* binding */ isArray),\n/* harmony export */   hn: () => (/* binding */ isInArray),\n/* harmony export */   iK: () => (/* binding */ isDivModeEnabled),\n/* harmony export */   jo: () => (/* binding */ rectBounce),\n/* harmony export */   lV: () => (/* binding */ safeMatchMedia),\n/* harmony export */   n0: () => (/* binding */ arrayRandomIndex),\n/* harmony export */   pE: () => (/* binding */ circleBounce),\n/* harmony export */   tG: () => (/* binding */ safeMutationObserver),\n/* harmony export */   tZ: () => (/* binding */ getLogger),\n/* harmony export */   wJ: () => (/* binding */ executeOnSingleOrMultiple),\n/* harmony export */   zw: () => (/* binding */ deepExtend)\n/* harmony export */ });\n/* unused harmony exports setLogger, hasMatchMedia, areBoundsInside, singleDivModeExecute, findItemFromSingleOrMultiple, isFunction */\n/* harmony import */ var _NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6100);\n/* harmony import */ var _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5849);\n/* harmony import */ var _Core_Utils_Vector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3033);\n\n\n\nconst _logger = {\n    debug: console.debug,\n    error: console.error,\n    info: console.info,\n    log: console.log,\n    verbose: console.log,\n    warning: console.warn,\n};\nfunction setLogger(logger) {\n    _logger.debug = logger.debug || _logger.debug;\n    _logger.error = logger.error || _logger.error;\n    _logger.info = logger.info || _logger.info;\n    _logger.log = logger.log || _logger.log;\n    _logger.verbose = logger.verbose || _logger.verbose;\n    _logger.warning = logger.warning || _logger.warning;\n}\nfunction getLogger() {\n    return _logger;\n}\nfunction rectSideBounce(data) {\n    const res = { bounced: false }, { pSide, pOtherSide, rectSide, rectOtherSide, velocity, factor } = data, half = 0.5, minVelocity = 0;\n    if (pOtherSide.min < rectOtherSide.min ||\n        pOtherSide.min > rectOtherSide.max ||\n        pOtherSide.max < rectOtherSide.min ||\n        pOtherSide.max > rectOtherSide.max) {\n        return res;\n    }\n    if ((pSide.max >= rectSide.min && pSide.max <= (rectSide.max + rectSide.min) * half && velocity > minVelocity) ||\n        (pSide.min <= rectSide.max && pSide.min > (rectSide.max + rectSide.min) * half && velocity < minVelocity)) {\n        res.velocity = velocity * -factor;\n        res.bounced = true;\n    }\n    return res;\n}\nfunction checkSelector(element, selectors) {\n    const res = executeOnSingleOrMultiple(selectors, (selector) => {\n        return element.matches(selector);\n    });\n    return isArray(res) ? res.some((t) => t) : res;\n}\nfunction isSsr() {\n    return typeof window === "undefined" || !window || typeof window.document === "undefined" || !window.document;\n}\nfunction hasMatchMedia() {\n    return !isSsr() && typeof matchMedia !== "undefined";\n}\nfunction safeMatchMedia(query) {\n    if (!hasMatchMedia()) {\n        return;\n    }\n    return matchMedia(query);\n}\nfunction safeIntersectionObserver(callback) {\n    if (isSsr() || typeof IntersectionObserver === "undefined") {\n        return;\n    }\n    return new IntersectionObserver(callback);\n}\nfunction safeMutationObserver(callback) {\n    if (isSsr() || typeof MutationObserver === "undefined") {\n        return;\n    }\n    return new MutationObserver(callback);\n}\nfunction isInArray(value, array) {\n    const invalidIndex = -1;\n    return value === array || (isArray(array) && array.indexOf(value) > invalidIndex);\n}\nasync function loadFont(font, weight) {\n    try {\n        await document.fonts.load(`${weight ?? "400"} 36px \'${font ?? "Verdana"}\'`);\n    }\n    catch {\n    }\n}\nfunction arrayRandomIndex(array) {\n    return Math.floor((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() * array.length);\n}\nfunction itemFromArray(array, index, useIndex = true) {\n    return array[index !== undefined && useIndex ? index % array.length : arrayRandomIndex(array)];\n}\nfunction isPointInside(point, size, offset, radius, direction) {\n    const minRadius = 0;\n    return areBoundsInside(calculateBounds(point, radius ?? minRadius), size, offset, direction);\n}\nfunction areBoundsInside(bounds, size, offset, direction) {\n    let inside = true;\n    if (!direction || direction === "bottom") {\n        inside = bounds.top < size.height + offset.x;\n    }\n    if (inside && (!direction || direction === "left")) {\n        inside = bounds.right > offset.x;\n    }\n    if (inside && (!direction || direction === "right")) {\n        inside = bounds.left < size.width + offset.y;\n    }\n    if (inside && (!direction || direction === "top")) {\n        inside = bounds.bottom > offset.y;\n    }\n    return inside;\n}\nfunction calculateBounds(point, radius) {\n    return {\n        bottom: point.y + radius,\n        left: point.x - radius,\n        right: point.x + radius,\n        top: point.y - radius,\n    };\n}\nfunction deepExtend(destination, ...sources) {\n    for (const source of sources) {\n        if (source === undefined || source === null) {\n            continue;\n        }\n        if (!isObject(source)) {\n            destination = source;\n            continue;\n        }\n        const sourceIsArray = Array.isArray(source);\n        if (sourceIsArray && (isObject(destination) || !destination || !Array.isArray(destination))) {\n            destination = [];\n        }\n        else if (!sourceIsArray && (isObject(destination) || !destination || Array.isArray(destination))) {\n            destination = {};\n        }\n        for (const key in source) {\n            if (key === "__proto__") {\n                continue;\n            }\n            const sourceDict = source, value = sourceDict[key], destDict = destination;\n            destDict[key] =\n                isObject(value) && Array.isArray(value)\n                    ? value.map((v) => deepExtend(destDict[key], v))\n                    : deepExtend(destDict[key], value);\n        }\n    }\n    return destination;\n}\nfunction isDivModeEnabled(mode, divs) {\n    return !!findItemFromSingleOrMultiple(divs, (t) => t.enable && isInArray(mode, t.mode));\n}\nfunction divModeExecute(mode, divs, callback) {\n    executeOnSingleOrMultiple(divs, (div) => {\n        const divMode = div.mode, divEnabled = div.enable;\n        if (divEnabled && isInArray(mode, divMode)) {\n            singleDivModeExecute(div, callback);\n        }\n    });\n}\nfunction singleDivModeExecute(div, callback) {\n    const selectors = div.selectors;\n    executeOnSingleOrMultiple(selectors, (selector) => {\n        callback(selector, div);\n    });\n}\nfunction divMode(divs, element) {\n    if (!element || !divs) {\n        return;\n    }\n    return findItemFromSingleOrMultiple(divs, (div) => {\n        return checkSelector(element, div.selectors);\n    });\n}\nfunction circleBounceDataFromParticle(p) {\n    return {\n        position: p.getPosition(),\n        radius: p.getRadius(),\n        mass: p.getMass(),\n        velocity: p.velocity,\n        factor: _Core_Utils_Vector_js__WEBPACK_IMPORTED_MODULE_1__/* .Vector */ .M.create((0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(p.options.bounce.horizontal.value), (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(p.options.bounce.vertical.value)),\n    };\n}\nfunction circleBounce(p1, p2) {\n    const { x: xVelocityDiff, y: yVelocityDiff } = p1.velocity.sub(p2.velocity), [pos1, pos2] = [p1.position, p2.position], { dx: xDist, dy: yDist } = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(pos2, pos1), minimumDistance = 0;\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist < minimumDistance) {\n        return;\n    }\n    const angle = -Math.atan2(yDist, xDist), m1 = p1.mass, m2 = p2.mass, u1 = p1.velocity.rotate(angle), u2 = p2.velocity.rotate(angle), v1 = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .collisionVelocity */ .OW)(u1, u2, m1, m2), v2 = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .collisionVelocity */ .OW)(u2, u1, m1, m2), vFinal1 = v1.rotate(-angle), vFinal2 = v2.rotate(-angle);\n    p1.velocity.x = vFinal1.x * p1.factor.x;\n    p1.velocity.y = vFinal1.y * p1.factor.y;\n    p2.velocity.x = vFinal2.x * p2.factor.x;\n    p2.velocity.y = vFinal2.y * p2.factor.y;\n}\nfunction rectBounce(particle, divBounds) {\n    const pPos = particle.getPosition(), size = particle.getRadius(), bounds = calculateBounds(pPos, size), bounceOptions = particle.options.bounce, resH = rectSideBounce({\n        pSide: {\n            min: bounds.left,\n            max: bounds.right,\n        },\n        pOtherSide: {\n            min: bounds.top,\n            max: bounds.bottom,\n        },\n        rectSide: {\n            min: divBounds.left,\n            max: divBounds.right,\n        },\n        rectOtherSide: {\n            min: divBounds.top,\n            max: divBounds.bottom,\n        },\n        velocity: particle.velocity.x,\n        factor: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(bounceOptions.horizontal.value),\n    });\n    if (resH.bounced) {\n        if (resH.velocity !== undefined) {\n            particle.velocity.x = resH.velocity;\n        }\n        if (resH.position !== undefined) {\n            particle.position.x = resH.position;\n        }\n    }\n    const resV = rectSideBounce({\n        pSide: {\n            min: bounds.top,\n            max: bounds.bottom,\n        },\n        pOtherSide: {\n            min: bounds.left,\n            max: bounds.right,\n        },\n        rectSide: {\n            min: divBounds.top,\n            max: divBounds.bottom,\n        },\n        rectOtherSide: {\n            min: divBounds.left,\n            max: divBounds.right,\n        },\n        velocity: particle.velocity.y,\n        factor: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(bounceOptions.vertical.value),\n    });\n    if (resV.bounced) {\n        if (resV.velocity !== undefined) {\n            particle.velocity.y = resV.velocity;\n        }\n        if (resV.position !== undefined) {\n            particle.position.y = resV.position;\n        }\n    }\n}\nfunction executeOnSingleOrMultiple(obj, callback) {\n    const defaultIndex = 0;\n    return isArray(obj) ? obj.map((item, index) => callback(item, index)) : callback(obj, defaultIndex);\n}\nfunction itemFromSingleOrMultiple(obj, index, useIndex) {\n    return isArray(obj) ? itemFromArray(obj, index, useIndex) : obj;\n}\nfunction findItemFromSingleOrMultiple(obj, callback) {\n    if (isArray(obj)) {\n        return obj.find((t, index) => callback(t, index));\n    }\n    const defaultIndex = 0;\n    return callback(obj, defaultIndex) ? obj : undefined;\n}\nfunction initParticleNumericAnimationValue(options, pxRatio) {\n    const valueRange = options.value, animationOptions = options.animation, res = {\n        delayTime: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(animationOptions.delay) * _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .millisecondsToSeconds */ .Xu,\n        enable: animationOptions.enable,\n        value: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(options.value) * pxRatio,\n        max: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeMax */ .W9)(valueRange) * pxRatio,\n        min: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeMin */ .Sg)(valueRange) * pxRatio,\n        loops: 0,\n        maxLoops: (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(animationOptions.count),\n        time: 0,\n    }, decayOffset = 1;\n    if (animationOptions.enable) {\n        res.decay = decayOffset - (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(animationOptions.decay);\n        switch (animationOptions.mode) {\n            case "increase":\n                res.status = "increasing";\n                break;\n            case "decrease":\n                res.status = "decreasing";\n                break;\n            case "random":\n                res.status = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() >= _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .halfRandom */ .N3 ? "increasing" : "decreasing";\n                break;\n        }\n        const autoStatus = animationOptions.mode === "auto";\n        switch (animationOptions.startValue) {\n            case "min":\n                res.value = res.min;\n                if (autoStatus) {\n                    res.status = "increasing";\n                }\n                break;\n            case "max":\n                res.value = res.max;\n                if (autoStatus) {\n                    res.status = "decreasing";\n                }\n                break;\n            case "random":\n            default:\n                res.value = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .U4)(res);\n                if (autoStatus) {\n                    res.status = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() >= _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .halfRandom */ .N3 ? "increasing" : "decreasing";\n                }\n                break;\n        }\n    }\n    res.initialValue = res.value;\n    return res;\n}\nfunction getPositionOrSize(positionOrSize, canvasSize) {\n    const isPercent = positionOrSize.mode === "percent";\n    if (!isPercent) {\n        const { mode: _, ...rest } = positionOrSize;\n        return rest;\n    }\n    const isPosition = "x" in positionOrSize;\n    if (isPosition) {\n        return {\n            x: (positionOrSize.x / _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5) * canvasSize.width,\n            y: (positionOrSize.y / _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5) * canvasSize.height,\n        };\n    }\n    else {\n        return {\n            width: (positionOrSize.width / _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5) * canvasSize.width,\n            height: (positionOrSize.height / _Core_Utils_Constants_js__WEBPACK_IMPORTED_MODULE_2__/* .percentDenominator */ .a5) * canvasSize.height,\n        };\n    }\n}\nfunction getPosition(position, canvasSize) {\n    return getPositionOrSize(position, canvasSize);\n}\nfunction getSize(size, canvasSize) {\n    return getPositionOrSize(size, canvasSize);\n}\nfunction isBoolean(arg) {\n    return typeof arg === "boolean";\n}\nfunction isString(arg) {\n    return typeof arg === "string";\n}\nfunction isNumber(arg) {\n    return typeof arg === "number";\n}\nfunction isFunction(arg) {\n    return typeof arg === "function";\n}\nfunction isObject(arg) {\n    return typeof arg === "object" && arg !== null;\n}\nfunction isArray(arg) {\n    return Array.isArray(arg);\n}\nfunction checkDestroy(particle, destroyType, value, minValue, maxValue) {\n    switch (destroyType) {\n        case "max":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case "min":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nfunction updateAnimation(particle, data, changeDirection, destroyType, delta) {\n    const minLoops = 0, minDelay = 0, identity = 1, minVelocity = 0, minDecay = 1;\n    if (particle.destroyed ||\n        !data ||\n        !data.enable ||\n        ((data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops))) {\n        return;\n    }\n    const velocity = (data.velocity ?? minVelocity) * delta.factor, minValue = data.min, maxValue = data.max, decay = data.decay ?? minDecay;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        return;\n    }\n    switch (data.status) {\n        case "increasing":\n            if (data.value >= maxValue) {\n                if (changeDirection) {\n                    data.status = "decreasing";\n                }\n                else {\n                    data.value -= maxValue;\n                }\n                if (!data.loops) {\n                    data.loops = minLoops;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += velocity;\n            }\n            break;\n        case "decreasing":\n            if (data.value <= minValue) {\n                if (changeDirection) {\n                    data.status = "increasing";\n                }\n                else {\n                    data.value += maxValue;\n                }\n                if (!data.loops) {\n                    data.loops = minLoops;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= velocity;\n            }\n    }\n    if (data.velocity && decay !== identity) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, destroyType, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = (0,_NumberUtils_js__WEBPACK_IMPORTED_MODULE_0__/* .clamp */ .qE)(data.value, minValue, maxValue);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/Utils/Utils.js?')},8384:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A9: () => (/* reexport */ AnimatableColor/* AnimatableColor */.A),\n  jl: () => (/* reexport */ Circle/* Circle */.j),\n  sJ: () => (/* reexport */ ExternalInteractorBase),\n  Oi: () => (/* reexport */ OptionsColor/* OptionsColor */.O),\n  U4: () => (/* reexport */ ParticlesInteractorBase),\n  M_: () => (/* reexport */ Rectangle/* Rectangle */.M),\n  PV: () => (/* reexport */ ValueWithRandom/* ValueWithRandom */.PV),\n  Mi: () => (/* reexport */ Vector/* Vector */.M),\n  nL: () => (/* reexport */ NumberUtils/* addEasing */.nL),\n  n0: () => (/* reexport */ Utils/* arrayRandomIndex */.n0),\n  Mh: () => (/* reexport */ NumberUtils/* calcPositionOrRandomFromSize */.Mh),\n  l1: () => (/* reexport */ NumberUtils/* calcPositionOrRandomFromSizeRanged */.l1),\n  AE: () => (/* reexport */ Utils/* calculateBounds */.AE),\n  pE: () => (/* reexport */ Utils/* circleBounce */.pE),\n  Tg: () => (/* reexport */ Utils/* circleBounceDataFromParticle */.Tg),\n  qE: () => (/* reexport */ NumberUtils/* clamp */.qE),\n  EY: () => (/* reexport */ ColorUtils/* colorMix */.EY),\n  zw: () => (/* reexport */ Utils/* deepExtend */.zw),\n  pu: () => (/* reexport */ NumberUtils/* degToRad */.pu),\n  NV: () => (/* reexport */ Utils/* divMode */.NV),\n  U6: () => (/* reexport */ Utils/* divModeExecute */.U6),\n  V6: () => (/* reexport */ CanvasUtils/* drawLine */.V6),\n  dI: () => (/* reexport */ Constants/* errorPrefix */.dI),\n  wJ: () => (/* reexport */ Utils/* executeOnSingleOrMultiple */.wJ),\n  Yf: () => (/* reexport */ NumberUtils/* getDistance */.Yf),\n  vr: () => (/* reexport */ NumberUtils/* getDistances */.vr),\n  il: () => (/* reexport */ NumberUtils/* getEasing */.il),\n  pz: () => (/* reexport */ ColorUtils/* getHslAnimationFromHsl */.pz),\n  _h: () => (/* reexport */ ColorUtils/* getLinkColor */._h),\n  PG: () => (/* reexport */ ColorUtils/* getLinkRandomColor */.PG),\n  tZ: () => (/* reexport */ Utils/* getLogger */.tZ),\n  G0: () => (/* reexport */ NumberUtils/* getRandom */.G0),\n  W9: () => (/* reexport */ NumberUtils/* getRangeMax */.W9),\n  VG: () => (/* reexport */ NumberUtils/* getRangeValue */.VG),\n  YC: () => (/* reexport */ Utils/* getSize */.YC),\n  LC: () => (/* reexport */ ColorUtils/* getStyleFromHsl */.LC),\n  xx: () => (/* reexport */ ColorUtils/* getStyleFromRgb */.xx),\n  N3: () => (/* reexport */ Constants/* halfRandom */.N3),\n  Xs: () => (/* reexport */ Utils/* initParticleNumericAnimationValue */.Xs),\n  cy: () => (/* reexport */ Utils/* isArray */.cy),\n  iK: () => (/* reexport */ Utils/* isDivModeEnabled */.iK),\n  hn: () => (/* reexport */ Utils/* isInArray */.hn),\n  Et: () => (/* reexport */ Utils/* isNumber */.Et),\n  Gv: () => (/* reexport */ Utils/* isObject */.Gv),\n  Tj: () => (/* reexport */ Utils/* isPointInside */.Tj),\n  B9: () => (/* reexport */ Utils/* isSsr */.B9),\n  Vh: () => (/* reexport */ Utils/* itemFromArray */.Vh),\n  TA: () => (/* reexport */ Utils/* itemFromSingleOrMultiple */.TA),\n  Al: () => (/* reexport */ Utils/* loadFont */.Al),\n  yV: () => (/* reexport */ OptionsUtils/* loadParticlesOptions */.y),\n  Xu: () => (/* reexport */ Constants/* millisecondsToSeconds */.Xu),\n  Z0: () => (/* reexport */ Constants/* mouseLeaveEvent */.Z0),\n  Rb: () => (/* reexport */ Constants/* mouseMoveEvent */.Rb),\n  a5: () => (/* reexport */ Constants/* percentDenominator */.a5),\n  BH: () => (/* reexport */ NumberUtils/* randomInRange */.U4),\n  R5: () => (/* reexport */ ColorUtils/* rangeColorToHsl */.R5),\n  BN: () => (/* reexport */ ColorUtils/* rangeColorToRgb */.BN),\n  jo: () => (/* reexport */ Utils/* rectBounce */.jo),\n  K6: () => (/* reexport */ ColorUtils/* rgbToHsl */.K6),\n  DT: () => (/* reexport */ NumberUtils/* setRangeValue */.DT),\n  UC: () => (/* reexport */ Utils/* updateAnimation */.UC),\n  Jv: () => (/* reexport */ ColorUtils/* updateColor */.Jv)\n});\n\n// UNUSED EXPORTS: AnimationOptions, AnimationValueWithRandom, Background, BackgroundMask, BackgroundMaskCover, ClickEvent, Collisions, CollisionsAbsorb, CollisionsOverlap, ColorAnimation, DivEvent, Events, FullScreen, HoverEvent, HslAnimation, HslColorManager, Interactivity, ManualParticle, Modes, Move, MoveAngle, MoveAttract, MoveCenter, MoveGravity, MovePath, MoveTrail, Opacity, OpacityAnimation, Options, OutModes, Parallax, ParticlesBounce, ParticlesBounceFactor, ParticlesDensity, ParticlesNumber, ParticlesNumberLimit, ParticlesOptions, Point, Range, RangedAnimationOptions, RangedAnimationValueWithRandom, ResizeEvent, Responsive, RgbColorManager, Shadow, Shape, Size, SizeAnimation, Spin, Stroke, Theme, ThemeDefault, Vector3d, ZIndex, addColorManager, alterHsl, areBoundsInside, calcExactPositionOrRandomFromSize, calcExactPositionOrRandomFromSizeRanged, calcPositionFromSize, clear, collisionVelocity, colorToHsl, colorToRgb, drawEffect, drawParticle, drawParticlePlugin, drawPlugin, drawShape, drawShapeAfterDraw, findItemFromSingleOrMultiple, generatedAttribute, getHslFromAnimation, getParticleBaseVelocity, getParticleDirectionAngle, getPosition, getRandomRgbColor, getRangeMin, hasMatchMedia, hslToRgb, hslaToRgba, isBoolean, isFunction, isString, loadOptions, mix, mouseDownEvent, mouseOutEvent, mouseUpEvent, paintBase, paintImage, parseAlpha, resizeEvent, safeIntersectionObserver, safeMatchMedia, safeMutationObserver, setLogger, setRandom, singleDivModeExecute, stringToAlpha, stringToRgb, touchCancelEvent, touchEndEvent, touchMoveEvent, touchStartEvent, tsParticles, updateColorValue, visibilityChangeEvent\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Constants.js\nvar Constants = __webpack_require__(5849);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/Utils.js\nvar Utils = __webpack_require__(5051);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Utils/EventDispatcher.js\nclass EventDispatcher {\n    constructor() {\n        this._listeners = new Map();\n    }\n    addEventListener(type, listener) {\n        this.removeEventListener(type, listener);\n        let arr = this._listeners.get(type);\n        if (!arr) {\n            arr = [];\n            this._listeners.set(type, arr);\n        }\n        arr.push(listener);\n    }\n    dispatchEvent(type, args) {\n        const listeners = this._listeners.get(type);\n        listeners?.forEach((handler) => handler(args));\n    }\n    hasEventListener(type) {\n        return !!this._listeners.get(type);\n    }\n    removeAllEventListeners(type) {\n        if (!type) {\n            this._listeners = new Map();\n        }\n        else {\n            this._listeners.delete(type);\n        }\n    }\n    removeEventListener(type, listener) {\n        const arr = this._listeners.get(type);\n        if (!arr) {\n            return;\n        }\n        const length = arr.length, idx = arr.indexOf(listener), minIndex = 0;\n        if (idx < minIndex) {\n            return;\n        }\n        const deleteCount = 1;\n        if (length === deleteCount) {\n            this._listeners.delete(type);\n        }\n        else {\n            arr.splice(idx, deleteCount);\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/NumberUtils.js\nvar NumberUtils = __webpack_require__(6100);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Engine.js\n\n\n\n\nasync function getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = await Promise.all([...initializers.values()].map((t) => t(container)));\n        map.set(container, res);\n    }\n    return res;\n}\nasync function getDataFromUrl(data) {\n    const url = (0,Utils/* itemFromSingleOrMultiple */.TA)(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return (await response.json());\n    }\n    (0,Utils/* getLogger */.tZ)().error(`${Constants/* errorPrefix */.dI} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nclass Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = [];\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get version() {\n        return "3.2.1";\n    }\n    addConfig(config) {\n        const key = config.key ?? config.name ?? "default";\n        this._configs.set(key, config);\n        this._eventDispatcher.dispatchEvent("configAdded", { data: { name: key, config } });\n    }\n    async addEffect(effect, drawer, refresh = true) {\n        (0,Utils/* executeOnSingleOrMultiple */.wJ)(effect, (type) => {\n            if (!this.getEffectDrawer(type)) {\n                this.effectDrawers.set(type, drawer);\n            }\n        });\n        await this.refresh(refresh);\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this._initializers.interactors.set(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this._initializers.movers.set(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this._initializers.updaters.set(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        if (!this.getPathGenerator(name)) {\n            this.pathGenerators.set(name, generator);\n        }\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        if (override || !this.getPreset(preset)) {\n            this.presets.set(preset, options);\n        }\n        await this.refresh(refresh);\n    }\n    async addShape(shape, drawer, refresh = true) {\n        (0,Utils/* executeOnSingleOrMultiple */.wJ)(shape, (type) => {\n            if (!this.getShapeDrawer(type)) {\n                this.shapeDrawers.set(type, drawer);\n            }\n        });\n        await this.refresh(refresh);\n    }\n    clearPlugins(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this._domArray;\n    }\n    domItem(index) {\n        const dom = this.dom(), item = dom[index];\n        if (!item || item.destroyed) {\n            const deleteCount = 1;\n            dom.splice(index, deleteCount);\n            return;\n        }\n        return item;\n    }\n    async getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (plugin.needsPlugin(container.actualOptions)) {\n                res.set(plugin.id, await plugin.getPlugin(container));\n            }\n        }\n        return res;\n    }\n    getEffectDrawer(type) {\n        return this.effectDrawers.get(type);\n    }\n    async getInteractors(container, force = false) {\n        return await getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    async getMovers(container, force = false) {\n        return await getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.shapeDrawers.get(type);\n    }\n    getSupportedEffects() {\n        return this.effectDrawers.keys();\n    }\n    getSupportedShapes() {\n        return this.shapeDrawers.keys();\n    }\n    async getUpdaters(container, force = false) {\n        return await getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    async load(params) {\n        const randomFactor = 10000, id = params.id ?? params.element?.id ?? `tsparticles${Math.floor((0,NumberUtils/* getRandom */.G0)() * randomFactor)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        let domContainer = params.element ?? document.getElementById(id);\n        if (!domContainer) {\n            domContainer = document.createElement("div");\n            domContainer.id = id;\n            document.body.append(domContainer);\n        }\n        const currentOptions = (0,Utils/* itemFromSingleOrMultiple */.TA)(options, index), dom = this.dom(), oldIndex = dom.findIndex((v) => v.id.description === id), minIndex = 0;\n        if (oldIndex >= minIndex) {\n            const old = this.domItem(oldIndex);\n            if (old && !old.destroyed) {\n                old.destroy();\n                const deleteCount = 1;\n                dom.splice(oldIndex, deleteCount);\n            }\n        }\n        let canvasEl;\n        if (domContainer.tagName.toLowerCase() === "canvas") {\n            canvasEl = domContainer;\n            canvasEl.dataset[Constants/* generatedAttribute */.eb] = "false";\n        }\n        else {\n            const existingCanvases = domContainer.getElementsByTagName("canvas");\n            if (existingCanvases.length) {\n                const firstIndex = 0;\n                canvasEl = existingCanvases[firstIndex];\n                canvasEl.dataset[Constants/* generatedAttribute */.eb] = "false";\n            }\n            else {\n                canvasEl = document.createElement("canvas");\n                canvasEl.dataset[Constants/* generatedAttribute */.eb] = "true";\n                domContainer.appendChild(canvasEl);\n            }\n        }\n        if (!canvasEl.style.width) {\n            canvasEl.style.width = "100%";\n        }\n        if (!canvasEl.style.height) {\n            canvasEl.style.height = "100%";\n        }\n        const { Container } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6873)), newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= minIndex) {\n            const deleteCount = 0;\n            dom.splice(oldIndex, deleteCount, newItem);\n        }\n        else {\n            dom.push(newItem);\n        }\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            updater.loadOptions?.(options, ...sourceOptions);\n        }\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        await Promise.all(this.dom().map((t) => t.refresh()));\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    setOnClickHandler(callback) {\n        const dom = this.dom();\n        if (!dom.length) {\n            throw new Error(`${Constants/* errorPrefix */.dI} can only set click handlers after calling tsParticles.load()`);\n        }\n        for (const domItem of dom) {\n            domItem.addClickHandler(callback);\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/ColorUtils.js\nvar ColorUtils = __webpack_require__(6932);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Utils/HslColorManager.js\n\n\nclass HslColorManager {\n    constructor() {\n        this.key = "hsl";\n        this.stringPrefix = "hsl";\n    }\n    handleColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.s !== undefined && hslColor.l !== undefined) {\n            return (0,ColorUtils/* hslToRgb */.YL)(hslColor);\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.l !== undefined) {\n            return (0,ColorUtils/* hslToRgb */.YL)({\n                h: (0,NumberUtils/* getRangeValue */.VG)(hslColor.h),\n                l: (0,NumberUtils/* getRangeValue */.VG)(hslColor.l),\n                s: (0,NumberUtils/* getRangeValue */.VG)(hslColor.s),\n            });\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith("hsl")) {\n            return;\n        }\n        const regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i, result = regex.exec(input), minLength = 4, defaultAlpha = 1, radix = 10;\n        return result\n            ? (0,ColorUtils/* hslaToRgba */.ay)({\n                a: result.length > minLength ? (0,NumberUtils/* parseAlpha */.M3)(result[5]) : defaultAlpha,\n                h: parseInt(result[1], radix),\n                l: parseInt(result[3], radix),\n                s: parseInt(result[2], radix),\n            })\n            : undefined;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Utils/RgbColorManager.js\n\nclass RgbColorManager {\n    constructor() {\n        this.key = "rgb";\n        this.stringPrefix = "rgb";\n    }\n    handleColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return rgbColor;\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return {\n                r: (0,NumberUtils/* getRangeValue */.VG)(rgbColor.r),\n                g: (0,NumberUtils/* getRangeValue */.VG)(rgbColor.g),\n                b: (0,NumberUtils/* getRangeValue */.VG)(rgbColor.b),\n            };\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i, result = regex.exec(input), radix = 10, minLength = 4, defaultAlpha = 1;\n        return result\n            ? {\n                a: result.length > minLength ? (0,NumberUtils/* parseAlpha */.M3)(result[5]) : defaultAlpha,\n                b: parseInt(result[3], radix),\n                g: parseInt(result[2], radix),\n                r: parseInt(result[1], radix),\n            }\n            : undefined;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/init.js\n\n\n\n\nfunction init() {\n    const rgbColorManager = new RgbColorManager(), hslColorManager = new HslColorManager();\n    (0,ColorUtils/* addColorManager */.a9)(rgbColorManager);\n    (0,ColorUtils/* addColorManager */.a9)(hslColorManager);\n    const engine = new Engine();\n    engine.init();\n    return engine;\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Circle.js\nvar Circle = __webpack_require__(7926);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/ExternalInteractorBase.js\nclass ExternalInteractorBase {\n    constructor(container) {\n        this.type = "external";\n        this.container = container;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/ParticlesInteractorBase.js\nclass ParticlesInteractorBase {\n    constructor(container) {\n        this.type = "particles";\n        this.container = container;\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Rectangle.js\nvar Rectangle = __webpack_require__(9389);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Vector.js\nvar Vector = __webpack_require__(3033);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Core/Utils/Vector3d.js\nvar Vector3d = __webpack_require__(9738);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/AnimatableColor.js\nvar AnimatableColor = __webpack_require__(4133);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/AnimationOptions.js\nvar AnimationOptions = __webpack_require__(5908);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Background/Background.js\nvar Background = __webpack_require__(1643);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/BackgroundMask/BackgroundMask.js\nvar BackgroundMask = __webpack_require__(6879);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/BackgroundMask/BackgroundMaskCover.js\nvar BackgroundMaskCover = __webpack_require__(2896);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/ColorAnimation.js\nvar ColorAnimation = __webpack_require__(5903);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/HslAnimation.js\nvar HslAnimation = __webpack_require__(7139);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Events/Events.js + 5 modules\nvar Events = __webpack_require__(9386);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Interactivity/Interactivity.js + 1 modules\nvar Interactivity = __webpack_require__(7622);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/ManualParticle.js\nvar ManualParticle = __webpack_require__(1428);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Options.js + 1 modules\nvar Options = __webpack_require__(7301);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/OptionsColor.js\nvar OptionsColor = __webpack_require__(8089);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Bounce/ParticlesBounce.js\nvar ParticlesBounce = __webpack_require__(4784);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Bounce/ParticlesBounceFactor.js\nvar ParticlesBounceFactor = __webpack_require__(6003);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Collisions/Collisions.js + 2 modules\nvar Collisions = __webpack_require__(6796);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/ParticlesOptions.js + 4 modules\nvar ParticlesOptions = __webpack_require__(906);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Shadow.js\nvar Shadow = __webpack_require__(2156);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Stroke.js\nvar Stroke = __webpack_require__(2004);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveAttract.js\nvar MoveAttract = __webpack_require__(8884);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Move.js + 2 modules\nvar Move = __webpack_require__(4482);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveAngle.js\nvar MoveAngle = __webpack_require__(1074);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveGravity.js\nvar MoveGravity = __webpack_require__(7239);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Path/MovePath.js\nvar MovePath = __webpack_require__(2220);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/Spin.js\nvar Spin = __webpack_require__(6908);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Move/MoveTrail.js + 1 modules\nvar MoveTrail = __webpack_require__(6005);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Opacity/Opacity.js\nvar Opacity = __webpack_require__(7141);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Opacity/OpacityAnimation.js\nvar OpacityAnimation = __webpack_require__(7807);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Shape/Shape.js\nvar Shape = __webpack_require__(8673);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Size/Size.js\nvar Size = __webpack_require__(8765);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/Size/SizeAnimation.js\nvar SizeAnimation = __webpack_require__(4983);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Particles/ZIndex/ZIndex.js\nvar ZIndex = __webpack_require__(3271);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Responsive.js\nvar Responsive = __webpack_require__(1482);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/Theme/Theme.js + 1 modules\nvar Theme = __webpack_require__(1198);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Options/Classes/ValueWithRandom.js\nvar ValueWithRandom = __webpack_require__(2452);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/CanvasUtils.js\nvar CanvasUtils = __webpack_require__(3567);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/Utils/OptionsUtils.js\nvar OptionsUtils = __webpack_require__(7439);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/exports.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/engine/browser/index.js\n\n\nconst tsParticles = init();\nif (!(0,Utils/* isSsr */.B9)()) {\n    window.tsParticles = tsParticles;\n}\n\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/engine/browser/index.js_+_8_modules?')},7542:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Attractor: () => (/* binding */ Attractor)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-attract/browser/Options/Classes/Attract.js\nclass Attract {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.easing = "ease-out-quad";\n        this.factor = 1;\n        this.maxSpeed = 50;\n        this.speed = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-attract/browser/Attractor.js\n\n\nconst attractMode = "attract";\nclass Attractor extends browser/* ExternalInteractorBase */.sJ {\n    constructor(engine, container) {\n        super(container);\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== attractMode) {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * browser/* millisecondsToSeconds */.Xu);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === browser/* mouseMoveEvent */.Rb, events = options.interactivity.events, { enable: hoverEnabled, mode: hoverMode } = events.onHover, { enable: clickEnabled, mode: clickMode } = events.onClick;\n        if (mouseMoveStatus && hoverEnabled && (0,browser/* isInArray */.hn)(attractMode, hoverMode)) {\n            const { hoverAttract } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4779));\n            hoverAttract(this.container, (p) => this.isEnabled(p));\n        }\n        else if (clickEnabled && (0,browser/* isInArray */.hn)(attractMode, clickMode)) {\n            const { clickAttract } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4779));\n            clickAttract(this.container, (p) => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return (0,browser/* isInArray */.hn)(attractMode, hoverMode) || (0,browser/* isInArray */.hn)(attractMode, clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-attract/browser/Attractor.js_+_1_modules?')},4779:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clickAttract: () => (/* binding */ clickAttract),\n/* harmony export */   hoverAttract: () => (/* binding */ hoverAttract)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst minFactor = 1, identity = 1, minRadius = 0;\nfunction processAttract(container, position, attractRadius, area, queryCb) {\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    if (!attractOptions) {\n        return;\n    }\n    const query = container.particles.quadTree.query(area, queryCb);\n    for (const particle of query) {\n        const { dx, dy, distance } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(particle.position, position), velocity = attractOptions.speed * attractOptions.factor, attractFactor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .clamp */ .qE)((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getEasing */ .il)(attractOptions.easing)(identity - distance / attractRadius) * velocity, minFactor, attractOptions.maxSpeed), normVec = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.create(!distance ? velocity : (dx / distance) * attractFactor, !distance ? velocity : (dy / distance) * attractFactor);\n        particle.position.subFrom(normVec);\n    }\n}\nfunction clickAttract(container, enabledCb) {\n    if (!container.attract) {\n        container.attract = { particles: [] };\n    }\n    const { attract } = container;\n    if (!attract.finish) {\n        if (!attract.count) {\n            attract.count = 0;\n        }\n        attract.count++;\n        if (attract.count === container.particles.count) {\n            attract.finish = true;\n        }\n    }\n    if (attract.clicking) {\n        const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < minRadius || !mousePos) {\n            return;\n        }\n        processAttract(container, mousePos, attractRadius, new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n    }\n    else if (attract.clicking === false) {\n        attract.particles = [];\n    }\n}\nfunction hoverAttract(container, enabledCb) {\n    const mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n    if (!attractRadius || attractRadius < minRadius || !mousePos) {\n        return;\n    }\n    processAttract(container, mousePos, attractRadius, new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-attract/browser/Utils.js?")},5914:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalAttractInteraction: () => (/* binding */ loadExternalAttractInteraction)\n/* harmony export */ });\nasync function loadExternalAttractInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalAttract", async (container) => {\n        const { Attractor } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7542));\n        return new Attractor(engine, container);\n    }, refresh);\n}\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-attract/browser/index.js?')},1054:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Bouncer: () => (/* binding */ Bouncer)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-bounce/browser/Options/Classes/Bounce.js\nclass Bounce {\n    constructor() {\n        this.distance = 200;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-bounce/browser/Bouncer.js\n\n\nconst bounceMode = "bounce";\nclass Bouncer extends browser/* ExternalInteractorBase */.sJ {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === browser/* mouseMoveEvent */.Rb, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && (0,browser/* isInArray */.hn)(bounceMode, hoverMode)) {\n            const { mouseBounce } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 1462));\n            mouseBounce(this.container, (p) => this.isEnabled(p));\n        }\n        else {\n            const { divBounce } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 1462));\n            divBounce(this.container, divs, bounceMode, (p) => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\n        return ((!!mouse.position && events.onHover.enable && (0,browser/* isInArray */.hn)(bounceMode, events.onHover.mode)) ||\n            (0,browser/* isDivModeEnabled */.iK)(bounceMode, divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source?.bounce);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-bounce/browser/Bouncer.js_+_1_modules?')},1462:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   divBounce: () => (/* binding */ divBounce),\n/* harmony export */   mouseBounce: () => (/* binding */ mouseBounce)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst squareExp = 2, half = 0.5, halfPI = Math.PI * half, double = 2, toleranceFactor = 10, minRadius = 0;\nfunction processBounce(container, position, radius, area, enabledCb) {\n    const query = container.particles.quadTree.query(area, enabledCb);\n    for (const particle of query) {\n        if (area instanceof _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl) {\n            (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .circleBounce */ .pE)((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .circleBounceDataFromParticle */ .Tg)(particle), {\n                position,\n                radius,\n                mass: radius ** squareExp * halfPI,\n                velocity: _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin,\n                factor: _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin,\n            });\n        }\n        else if (area instanceof _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Rectangle */ .M_) {\n            (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .rectBounce */ .jo)(particle, (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .calculateBounds */ .AE)(position, radius));\n        }\n    }\n}\nfunction singleSelectorBounce(container, selector, div, bounceCb) {\n    const query = document.querySelectorAll(selector);\n    if (!query.length) {\n        return;\n    }\n    query.forEach((item) => {\n        const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n            x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n            y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n        }, radius = elem.offsetWidth * half * pxRatio, tolerance = toleranceFactor * pxRatio, area = div.type === "circle"\n            ? new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(pos.x, pos.y, radius + tolerance)\n            : new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Rectangle */ .M_(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * double, elem.offsetHeight * pxRatio + tolerance * double);\n        bounceCb(pos, radius, area);\n    });\n}\nfunction divBounce(container, divs, bounceMode, enabledCb) {\n    (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .divModeExecute */ .U6)(bounceMode, divs, (selector, div) => singleSelectorBounce(container, selector, div, (pos, radius, area) => processBounce(container, pos, radius, area, enabledCb)));\n}\nfunction mouseBounce(container, enabledCb) {\n    const pxRatio = container.retina.pixelRatio, tolerance = toleranceFactor * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n    if (!radius || radius < minRadius || !mousePos) {\n        return;\n    }\n    processBounce(container, mousePos, radius, new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(mousePos.x, mousePos.y, radius + tolerance), enabledCb);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-bounce/browser/Utils.js?')},6955:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalBounceInteraction: () => (/* binding */ loadExternalBounceInteraction)\n/* harmony export */ });\nasync function loadExternalBounceInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalBounce", async (container) => {\n        const { Bouncer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 1054));\n        return new Bouncer(container);\n    }, refresh);\n}\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-bounce/browser/index.js?')},6950:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Bubbler: () => (/* binding */ Bubbler)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/interaction-external-bubble/browser/Options/Classes/Bubble.js\nvar Bubble = __webpack_require__(149);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-bubble/browser/Utils.js\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return (0,browser/* clamp */.qE)(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return (0,browser/* clamp */.qE)(value, modeValue, particleValue);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-bubble/browser/Bubbler.js\n\n\n\nconst bubbleMode = "bubble", minDistance = 0, defaultClickTime = 0, Bubbler_double = 2, defaultOpacity = 1, ratioOffset = 1, defaultBubbleValue = 0, minRatio = 0, half = 0.5, defaultRatio = 1;\nclass Bubbler extends browser/* ExternalInteractorBase */.sJ {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = (0,browser/* getDistance */.Yf)(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime ?? defaultClickTime)) /\n                    browser/* millisecondsToSeconds */.Xu;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * Bubbler_double) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: (0,browser/* getRangeMax */.W9)(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: "size",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: (0,browser/* getRangeMax */.W9)(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? defaultOpacity,\n                    },\n                    type: "opacity",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance || !mousePos) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = (0,browser/* getDistance */.Yf)(pos, mousePos), ratio = ratioOffset - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= minRatio && container.interactivity.status === browser/* mouseMoveEvent */.Rb) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === browser/* mouseLeaveEvent */.Z0) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = (0,browser/* itemFromSingleOrMultiple */.TA)(modeColor);\n                particle.bubble.finalColor = (0,browser/* rangeColorToHsl */.R5)(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? (0,browser/* rgbToHsl */.K6)((0,browser/* colorMix */.EY)(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, (0,browser/* getRangeMax */.W9)(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = (0,browser/* getRangeMax */.W9)(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;\n            if (!bubbleDistance || bubbleDistance < minDistance || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === "size") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === "opacity") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === "size") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === "opacity") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === "size") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === "opacity") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === "circle"\n                    ? new browser/* Circle */.jl(pos.x, pos.y, repulseRadius)\n                    : new browser/* Rectangle */.M_(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = (0,browser/* divMode */.NV)(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, defaultRatio, divBubble);\n                    this._hoverBubbleOpacity(particle, defaultRatio, divBubble);\n                    this._hoverBubbleColor(particle, defaultRatio, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== bubbleMode) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    async interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && (0,browser/* isInArray */.hn)(bubbleMode, hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && (0,browser/* isInArray */.hn)(bubbleMode, clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            (0,browser/* divModeExecute */.U6)(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = (0,browser/* isDivModeEnabled */.iK)(bubbleMode, onDiv);\n        if (!(divBubble || (onHover.enable && !!mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return (0,browser/* isInArray */.hn)(bubbleMode, onHover.mode) || (0,browser/* isInArray */.hn)(bubbleMode, onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble/* Bubble */.Z();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-bubble/browser/Bubbler.js_+_1_modules?')},149:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ Bubble)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _BubbleBase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6404);\n/* harmony import */ var _BubbleDiv_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7310);\n\n\n\nclass Bubble extends _BubbleBase_js__WEBPACK_IMPORTED_MODULE_1__/* .BubbleBase */ .u {\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.divs = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(data.divs, (div) => {\n            const tmp = new _BubbleDiv_js__WEBPACK_IMPORTED_MODULE_2__/* .BubbleDiv */ .C();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-bubble/browser/Options/Classes/Bubble.js?")},6404:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ BubbleBase)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass BubbleBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.mix = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.mix !== undefined) {\n            this.mix = data.mix;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.color !== undefined) {\n            const sourceColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(this.color) ? undefined : this.color;\n            this.color = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(data.color, (color) => {\n                return _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .Oi.create(sourceColor, color);\n            });\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleBase.js?")},7310:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ BubbleDiv)\n/* harmony export */ });\n/* harmony import */ var _BubbleBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6404);\n\nclass BubbleDiv extends _BubbleBase_js__WEBPACK_IMPORTED_MODULE_0__/* .BubbleBase */ .u {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleDiv.js?")},5745:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalBubbleInteraction: () => (/* binding */ loadExternalBubbleInteraction)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_BubbleBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6404);\n/* harmony import */ var _Options_Classes_BubbleDiv_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7310);\n/* harmony import */ var _Options_Classes_Bubble_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(149);\nasync function loadExternalBubbleInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalBubble", async (container) => {\n        const { Bubbler } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6950));\n        return new Bubbler(container);\n    }, refresh);\n}\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-bubble/browser/index.js?')},8878:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Connector: () => (/* binding */ Connector)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-connect/browser/Options/Classes/ConnectLinks.js\nclass ConnectLinks {\n    constructor() {\n        this.opacity = 0.5;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-connect/browser/Options/Classes/Connect.js\n\nclass Connect {\n    constructor() {\n        this.distance = 80;\n        this.links = new ConnectLinks();\n        this.radius = 60;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-connect/browser/Utils.js\n\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nfunction gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = (0,browser/* colorMix */.EY)(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, (0,browser/* getStyleFromHsl */.LC)(color1, opacity));\n    grad.addColorStop((0,browser/* clamp */.qE)(gradStop, gradientMin, gradientMax), (0,browser/* getStyleFromRgb */.xx)(midRgb, opacity));\n    grad.addColorStop(gradientMax, (0,browser/* getStyleFromHsl */.LC)(color2, opacity));\n    return grad;\n}\nfunction drawConnectLine(context, width, lineStyle, begin, end) {\n    (0,browser/* drawLine */.V6)(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nfunction lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nfunction drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-connect/browser/Connector.js\n\n\n\nconst connectMode = "connect", minDistance = 0;\nclass Connector extends browser/* ExternalInteractorBase */.sJ {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === "pointermove") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return (0,browser/* isInArray */.hn)(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-connect/browser/Connector.js_+_3_modules?')},2033:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalConnectInteraction: () => (/* binding */ loadExternalConnectInteraction)\n/* harmony export */ });\nasync function loadExternalConnectInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalConnect", async (container) => {\n        const { Connector } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8878));\n        return new Connector(container);\n    }, refresh);\n}\n\n\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-connect/browser/index.js?')},6520:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Grabber: () => (/* binding */ Grabber)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/interaction-external-grab/browser/Options/Classes/Grab.js\nvar Grab = __webpack_require__(7285);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-grab/browser/Utils.js\n\nconst defaultWidth = 0;\nfunction drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    (0,browser/* drawLine */.V6)(context, begin, end);\n    context.strokeStyle = (0,browser/* getStyleFromRgb */.xx)(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nfunction drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-grab/browser/Grabber.js\n\n\n\nconst grabMode = "grab", minDistance = 0, minOpacity = 0;\nclass Grabber extends browser/* ExternalInteractorBase */.sJ {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== browser/* mouseMoveEvent */.Rb) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = (0,browser/* getDistance */.Yf)(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = (0,browser/* getLinkRandomColor */.PG)(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = (0,browser/* getLinkColor */._h)(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && (0,browser/* isInArray */.hn)(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab/* Grab */.f();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-grab/browser/Grabber.js_+_1_modules?')},7285:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   f: () => (/* binding */ Grab)\n/* harmony export */ });\n/* harmony import */ var _GrabLinks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6008);\n\nclass Grab {\n    constructor() {\n        this.distance = 100;\n        this.links = new _GrabLinks_js__WEBPACK_IMPORTED_MODULE_0__/* .GrabLinks */ .q();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-grab/browser/Options/Classes/Grab.js?")},6008:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   q: () => (/* binding */ GrabLinks)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass GrabLinks {\n    constructor() {\n        this.blink = false;\n        this.consent = false;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        if (data.color !== undefined) {\n            this.color = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .Oi.create(this.color, data.color);\n        }\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-grab/browser/Options/Classes/GrabLinks.js?")},9125:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalGrabInteraction: () => (/* binding */ loadExternalGrabInteraction)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_Grab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7285);\n/* harmony import */ var _Options_Classes_GrabLinks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6008);\nasync function loadExternalGrabInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalGrab", async (container) => {\n        const { Grabber } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6520));\n        return new Grabber(container);\n    }, refresh);\n}\n\n\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-grab/browser/index.js?')},81:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Pauser: () => (/* binding */ Pauser)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst pauseMode = "pause";\nclass Pauser extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .ExternalInteractorBase */ .sJ {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== pauseMode) {\n                return;\n            }\n            const container = this.container;\n            if (container.animationStatus) {\n                container.pause();\n            }\n            else {\n                container.play();\n            }\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-pause/browser/Pauser.js?')},6413:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalPauseInteraction: () => (/* binding */ loadExternalPauseInteraction)\n/* harmony export */ });\nasync function loadExternalPauseInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalPause", async (container) => {\n        const { Pauser } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 81));\n        return new Pauser(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-pause/browser/index.js?')},4777:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ Push)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass Push {\n    constructor() {\n        this.default = true;\n        this.groups = [];\n        this.quantity = 4;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        if (data.groups !== undefined) {\n            this.groups = data.groups.map((t) => t);\n        }\n        if (!this.groups.length) {\n            this.default = true;\n        }\n        const quantity = data.quantity;\n        if (quantity !== undefined) {\n            this.quantity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(quantity);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-push/browser/Options/Classes/Push.js?")},5852:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Pusher: () => (/* binding */ Pusher)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Push_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4777);\n\n\nconst pushMode = "push", minQuantity = 0;\nclass Pusher extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .ExternalInteractorBase */ .sJ {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== pushMode) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;\n            if (!pushOptions) {\n                return;\n            }\n            const quantity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(pushOptions.quantity);\n            if (quantity <= minQuantity) {\n                return;\n            }\n            const group = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromArray */ .Vh)([undefined, ...pushOptions.groups]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\n            void container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.push) {\n            options.push = new _Options_Classes_Push_js__WEBPACK_IMPORTED_MODULE_1__/* .Push */ .$();\n        }\n        for (const source of sources) {\n            options.push.load(source?.push);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-push/browser/Pusher.js?')},8551:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalPushInteraction: () => (/* binding */ loadExternalPushInteraction)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_Push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4777);\nasync function loadExternalPushInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalPush", async (container) => {\n        const { Pusher } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5852));\n        return new Pusher(container);\n    }, refresh);\n}\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-push/browser/index.js?')},3929:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   n: () => (/* binding */ Remove)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass Remove {\n    constructor() {\n        this.quantity = 2;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const quantity = data.quantity;\n        if (quantity !== undefined) {\n            this.quantity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(quantity);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-remove/browser/Options/Classes/Remove.js?")},9641:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Remover: () => (/* binding */ Remover)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Remove_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3929);\n\n\nconst removeMode = "remove";\nclass Remover extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .ExternalInteractorBase */ .sJ {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            const container = this.container, options = container.actualOptions;\n            if (!options.interactivity.modes.remove || mode !== removeMode) {\n                return;\n            }\n            const removeNb = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(options.interactivity.modes.remove.quantity);\n            container.particles.removeQuantity(removeNb);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.remove) {\n            options.remove = new _Options_Classes_Remove_js__WEBPACK_IMPORTED_MODULE_1__/* .Remove */ .n();\n        }\n        for (const source of sources) {\n            options.remove.load(source?.remove);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-remove/browser/Remover.js?')},8931:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalRemoveInteraction: () => (/* binding */ loadExternalRemoveInteraction)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_Remove_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3929);\nasync function loadExternalRemoveInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalRemove", async (container) => {\n        const { Remover } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9641));\n        return new Remover(container);\n    }, refresh);\n}\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-remove/browser/index.js?')},3925:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ Repulse)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _RepulseBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6420);\n/* harmony import */ var _RepulseDiv_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1886);\n\n\n\nclass Repulse extends _RepulseBase_js__WEBPACK_IMPORTED_MODULE_2__/* .RepulseBase */ ._ {\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.divs = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(data.divs, (div) => {\n            const tmp = new _RepulseDiv_js__WEBPACK_IMPORTED_MODULE_1__/* .RepulseDiv */ .W();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-repulse/browser/Options/Classes/Repulse.js?")},6420:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ RepulseBase)\n/* harmony export */ });\nclass RepulseBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.factor = 100;\n        this.speed = 1;\n        this.maxSpeed = 50;\n        this.easing = "ease-out-quad";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseBase.js?')},1886:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   W: () => (/* binding */ RepulseDiv)\n/* harmony export */ });\n/* harmony import */ var _RepulseBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6420);\n\nclass RepulseDiv extends _RepulseBase_js__WEBPACK_IMPORTED_MODULE_0__/* .RepulseBase */ ._ {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseDiv.js?")},677:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Repulser: () => (/* binding */ Repulser)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Repulse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3925);\n\n\nconst repulseMode = "repulse", minDistance = 0, repulseRadiusFactor = 6, repulseRadiusPower = 3, squarePower = 2, minRadius = 0, minSpeed = 0, easingOffset = 1, half = 0.5;\nclass Repulser extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .ExternalInteractorBase */ .sJ {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse ?? { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < minDistance) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / repulseRadiusFactor, repulseRadiusPower), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(mouseClickPos, particle.position), d = distance ** squarePower, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < minRadius || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const { easing, speed, factor, maxSpeed } = repulseOptions, easingFunc = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getEasing */ .il)(easing), velocity = (divRepulse?.speed ?? speed) * factor;\n            for (const particle of query) {\n                const { dx, dy, distance } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(particle.position, position), repulseFactor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .clamp */ .qE)(easingFunc(easingOffset - distance / repulseRadius) * velocity, minSpeed, maxSpeed), normVec = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.create(!distance ? velocity : (dx / distance) * repulseFactor, !distance ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === "circle"\n                    ? new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(pos.x, pos.y, repulseRadius)\n                    : new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Rectangle */ .M_(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .divMode */ .NV)(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== repulseMode) {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .mouseMoveEvent */ .Rb, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)(repulseMode, hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)(repulseMode, clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .divModeExecute */ .U6)(repulseMode, divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isDivModeEnabled */ .iK)(repulseMode, divs);\n        if (!(divRepulse || (hover.enable && !!mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)(repulseMode, hoverMode) || (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)(repulseMode, clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new _Options_Classes_Repulse_js__WEBPACK_IMPORTED_MODULE_1__/* .Repulse */ .Z();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-repulse/browser/Repulser.js?')},301:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalRepulseInteraction: () => (/* binding */ loadExternalRepulseInteraction)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_RepulseDiv_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1886);\n/* harmony import */ var _Options_Classes_Repulse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3925);\nasync function loadExternalRepulseInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalRepulse", async (container) => {\n        const { Repulser } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 677));\n        return new Repulser(engine, container);\n    }, refresh);\n}\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-repulse/browser/index.js?')},2017:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Slower: () => (/* binding */ Slower)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-slow/browser/Options/Classes/Slow.js\nclass Slow {\n    constructor() {\n        this.factor = 3;\n        this.radius = 200;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-slow/browser/Slower.js\n\n\nconst slowMode = "slow", minRadius = 0;\nclass Slower extends browser/* ExternalInteractorBase */.sJ {\n    constructor(container) {\n        super(container);\n    }\n    clear(particle, delta, force) {\n        if (particle.slow.inRange && !force) {\n            return;\n        }\n        particle.slow.factor = 1;\n    }\n    init() {\n        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;\n        if (!slow) {\n            return;\n        }\n        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && (0,browser/* isInArray */.hn)(slowMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.slow) {\n            options.slow = new Slow();\n        }\n        for (const source of sources) {\n            options.slow.load(source?.slow);\n        }\n    }\n    reset(particle) {\n        particle.slow.inRange = false;\n        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;\n        if (!slowOptions || !radius || radius < minRadius || !mousePos) {\n            return;\n        }\n        const particlePos = particle.getPosition(), dist = (0,browser/* getDistance */.Yf)(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;\n        if (dist > radius) {\n            return;\n        }\n        slow.inRange = true;\n        slow.factor = proximityFactor / slowFactor;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-slow/browser/Slower.js_+_1_modules?')},9838:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadExternalSlowInteraction: () => (/* binding */ loadExternalSlowInteraction)\n/* harmony export */ });\nasync function loadExternalSlowInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalSlow", async (container) => {\n        const { Slower } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2017));\n        return new Slower(container);\n    }, refresh);\n}\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-slow/browser/index.js?')},5373:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X: () => (/* binding */ Trail)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass Trail {\n    constructor() {\n        this.delay = 1;\n        this.pauseOnStop = false;\n        this.quantity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = data.quantity;\n        }\n        if (data.particles !== undefined) {\n            this.particles = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .deepExtend */ .zw)({}, data.particles);\n        }\n        if (data.pauseOnStop !== undefined) {\n            this.pauseOnStop = data.pauseOnStop;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-trail/browser/Options/Classes/Trail.js?")},63:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TrailMaker: () => (/* binding */ TrailMaker)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Trail_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5373);\n\n\nconst trailMode = "trail";\nclass TrailMaker extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .ExternalInteractorBase */ .sJ {\n    constructor(container) {\n        super(container);\n        this._delay = 0;\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(delta) {\n        const container = this.container, { interactivity } = container;\n        if (!container.retina.reduceFactor) {\n            return;\n        }\n        const options = container.actualOptions, trailOptions = options.interactivity.modes.trail;\n        if (!trailOptions) {\n            return;\n        }\n        const optDelay = (trailOptions.delay * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu) / this.container.retina.reduceFactor;\n        if (this._delay < optDelay) {\n            this._delay += delta.value;\n        }\n        if (this._delay < optDelay) {\n            return;\n        }\n        const canEmit = !(trailOptions.pauseOnStop &&\n            (interactivity.mouse.position === this._lastPosition ||\n                (interactivity.mouse.position?.x === this._lastPosition?.x &&\n                    interactivity.mouse.position?.y === this._lastPosition?.y)));\n        const mousePos = container.interactivity.mouse.position;\n        if (mousePos) {\n            this._lastPosition = { ...mousePos };\n        }\n        else {\n            delete this._lastPosition;\n        }\n        if (canEmit) {\n            await container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n        }\n        this._delay -= optDelay;\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        return ((mouse.clicking && mouse.inside && !!mouse.position && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)(trailMode, events.onClick.mode)) ||\n            (mouse.inside && !!mouse.position && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)(trailMode, events.onHover.mode)));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.trail) {\n            options.trail = new _Options_Classes_Trail_js__WEBPACK_IMPORTED_MODULE_1__/* .Trail */ .X();\n        }\n        for (const source of sources) {\n            options.trail.load(source?.trail);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-external-trail/browser/TrailMaker.js?')},5786:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Attractor: () => (/* binding */ Attractor)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst attractFactor = 1000, identity = 1;\nclass Attractor extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .ParticlesInteractorBase */ .U4 {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1) {\n        const container = this.container;\n        if (p1.attractDistance === undefined) {\n            p1.attractDistance = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(p1.options.move.attract.distance) * container.retina.pixelRatio;\n        }\n        const distance = p1.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * attractFactor), ay = dy / (rotate.y * attractFactor), p1Factor = p2.size.value / p1.size.value, p2Factor = identity / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-attract/browser/Attractor.js?")},630:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadParticlesAttractInteraction: () => (/* binding */ loadParticlesAttractInteraction)\n/* harmony export */ });\nasync function loadParticlesAttractInteraction(engine, refresh = true) {\n    await engine.addInteractor("particlesAttract", async (container) => {\n        const { Attractor } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5786));\n        return new Attractor(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-attract/browser/index.js?')},3345:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   absorb: () => (/* binding */ absorb)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst half = 0.5, absorbFactor = 10, minAbsorbFactor = 0;\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .clamp */ .qE)((p1.options.collisions.absorb.speed * delta.factor) / absorbFactor, minAbsorbFactor, r2);\n    p1.size.value += factor * half;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nfunction absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-collisions/browser/Absorb.js?")},3940:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bounce: () => (/* binding */ bounce)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nfunction bounce(p1, p2) {\n    (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .circleBounce */ .pE)((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .circleBounceDataFromParticle */ .Tg)(p1), (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .circleBounceDataFromParticle */ .Tg)(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-collisions/browser/Bounce.js?")},7868:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Collider: () => (/* binding */ Collider)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js\nasync function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case "absorb": {\n            const { absorb } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3345));\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case "bounce": {\n            const { bounce } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3940));\n            bounce(p1, p2);\n            break;\n        }\n        case "destroy": {\n            const { destroy } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6164));\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-particles-collisions/browser/Collider.js\n\n\nconst Collider_double = 2;\nclass Collider extends browser/* ParticlesInteractorBase */.U4 {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * Collider_double);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = (0,browser/* getDistance */.Yf)(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            await resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-collisions/browser/Collider.js_+_1_modules?')},6164:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   destroy: () => (/* binding */ destroy)\n/* harmony export */ });\n/* harmony import */ var _Bounce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3940);\n\nfunction destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        (0,_Bounce_js__WEBPACK_IMPORTED_MODULE_0__.bounce)(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-collisions/browser/Destroy.js?")},2310:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadParticlesCollisionsInteraction: () => (/* binding */ loadParticlesCollisionsInteraction)\n/* harmony export */ });\nasync function loadParticlesCollisionsInteraction(engine, refresh = true) {\n    await engine.addInteractor("particlesCollisions", async (container) => {\n        const { Collider } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7868));\n        return new Collider(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-collisions/browser/index.js?')},4674:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircleWarp: () => (/* binding */ CircleWarp)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst double = 2;\nclass CircleWarp extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize;\n        const { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Rectangle */ .M_(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-links/browser/CircleWarp.js?")},9021:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  LinkInstance: () => (/* binding */ LinkInstance)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-particles-links/browser/Utils.js\n\nfunction drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n}\nfunction drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if ((0,browser/* getDistance */.Yf)(begin, end) <= maxDistance) {\n        (0,browser/* drawLine */.V6)(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = (0,browser/* getDistances */.vr)(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = (0,browser/* getDistances */.vr)(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = (0,browser/* getDistances */.vr)(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            (0,browser/* drawLine */.V6)(context, begin, pi1);\n            (0,browser/* drawLine */.V6)(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = (0,browser/* getStyleFromRgb */.xx)(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = (0,browser/* rangeColorToRgb */.BN)(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = (0,browser/* getStyleFromRgb */.xx)(shadowColor);\n        }\n    }\n    context.stroke();\n}\nfunction drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = (0,browser/* getStyleFromRgb */.xx)(colorTriangle, opacityTriangle);\n    context.fill();\n}\nfunction getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join("_");\n}\nfunction setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = (0,browser/* getRandom */.G0)();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-particles-links/browser/LinkInstance.js\n\n\nconst minOpacity = 0, minWidth = 0, minDistance = 0, half = 0.5;\nclass LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw((ctx) => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = (0,browser/* rangeColorToRgb */.BN)(twinkle.color), twinkling = (0,browser/* getRandom */.G0)() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = (0,browser/* getRangeValue */.VG)(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = (0,browser/* getLinkColor */._h)(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? minWidth, maxDistance = p1.retina.linksDistance ?? minDistance, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) * half;\n            if (opacityTriangle <= minOpacity) {\n                return;\n            }\n            container.canvas.draw((ctx) => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? minDistance;\n                if ((0,browser/* getDistance */.Yf)(pos1, pos2) > linksDistance ||\n                    (0,browser/* getDistance */.Yf)(pos3, pos2) > linksDistance ||\n                    (0,browser/* getDistance */.Yf)(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = (0,browser/* rangeColorToRgb */.BN)(triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = (0,browser/* getLinkColor */._h)(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter((t) => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination), minCount = 0;\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex((l) => l.destination === t.destination) >= minCount);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    async drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links?.length) {\n            return;\n        }\n        const p1Links = links.filter((l) => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > minOpacity && (particle.retina.linksWidth ?? minWidth) > minWidth) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n        await Promise.resolve();\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n        await Promise.resolve();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-links/browser/LinkInstance.js_+_1_modules?')},4591:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Linker: () => (/* binding */ Linker)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Links_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2225);\n\n\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nclass Linker extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .ParticlesInteractorBase */ .U4 {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getLinkRandomColor */ .PG)(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            const { CircleWarp } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4674));\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Circle */ .jl(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new _Options_Classes_Links_js__WEBPACK_IMPORTED_MODULE_1__/* .Links */ .q();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-links/browser/Linker.js?")},2225:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   q: () => (/* binding */ Links)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _LinksShadow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8457);\n/* harmony import */ var _LinksTriangle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2009);\n\n\n\nclass Links {\n    constructor() {\n        this.blink = false;\n        this.color = new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .Oi();\n        this.color.value = "#fff";\n        this.consent = false;\n        this.distance = 100;\n        this.enable = false;\n        this.frequency = 1;\n        this.opacity = 1;\n        this.shadow = new _LinksShadow_js__WEBPACK_IMPORTED_MODULE_1__/* .LinksShadow */ .s();\n        this.triangles = new _LinksTriangle_js__WEBPACK_IMPORTED_MODULE_2__/* .LinksTriangle */ .G();\n        this.width = 1;\n        this.warp = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.id !== undefined) {\n            this.id = data.id;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        this.color = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .Oi.create(this.color, data.color);\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        this.shadow.load(data.shadow);\n        this.triangles.load(data.triangles);\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/Links.js?')},8457:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ LinksShadow)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass LinksShadow {\n    constructor() {\n        this.blur = 5;\n        this.color = new _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .Oi();\n        this.color.value = "#000";\n        this.enable = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .Oi.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/LinksShadow.js?')},2009:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   G: () => (/* binding */ LinksTriangle)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass LinksTriangle {\n    constructor() {\n        this.enable = false;\n        this.frequency = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .OptionsColor */ .Oi.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/LinksTriangle.js?")},5309:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  loadParticlesLinksInteraction: () => (/* binding */ loadParticlesLinksInteraction)\n});\n\n// UNUSED EXPORTS: Links, LinksShadow, LinksTriangle\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-particles-links/browser/interaction.js\nasync function loadLinksInteraction(engine, refresh = true) {\n    await engine.addInteractor("particlesLinks", async (container) => {\n        const { Linker } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4591));\n        return new Linker(container);\n    }, refresh);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-particles-links/browser/plugin.js\nclass LinksPlugin {\n    constructor() {\n        this.id = "links";\n    }\n    async getPlugin(container) {\n        const { LinkInstance } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9021));\n        return new LinkInstance(container);\n    }\n    loadOptions() {\n    }\n    needsPlugin() {\n        return true;\n    }\n}\nasync function loadLinksPlugin(engine, refresh = true) {\n    const plugin = new LinksPlugin();\n    await engine.addPlugin(plugin, refresh);\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/Links.js\nvar Links = __webpack_require__(2225);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/LinksShadow.js\nvar LinksShadow = __webpack_require__(8457);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/interaction-particles-links/browser/Options/Classes/LinksTriangle.js\nvar LinksTriangle = __webpack_require__(2009);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-particles-links/browser/index.js\n\n\nasync function loadParticlesLinksInteraction(engine, refresh = true) {\n    await loadLinksInteraction(engine, refresh);\n    await loadLinksPlugin(engine, refresh);\n}\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/interaction-particles-links/browser/index.js_+_2_modules?')},2367:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMover: () => (/* binding */ BaseMover)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst diffFactor = 2, defaultSizeFactor = 1, defaultDeltaFactor = 1;\nclass BaseMover {\n    async init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        const { initSpin } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 520));\n        initSpin(particle);\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    async move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio;\n        particle.retina.moveSpeed ??= (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(moveOptions.speed) * pxRatio;\n        particle.retina.moveDrift ??= (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(particle.options.move.drift) * pxRatio;\n        const { getProximitySpeedFactor } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 520)), slowFactor = getProximitySpeedFactor(particle), baseSpeed = particle.retina.moveSpeed * container.retina.reduceFactor, moveDrift = particle.retina.moveDrift, maxSize = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeMax */ .W9)(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : defaultSizeFactor, deltaFactor = delta.factor || defaultDeltaFactor, moveSpeed = (baseSpeed * sizeFactor * slowFactor * deltaFactor) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            const { spin } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 520));\n            spin(particle, moveSpeed);\n        }\n        else {\n            const { move } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 520));\n            await move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        const { applyDistance } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 520));\n        applyDistance(particle);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/move-base/browser/BaseMover.js?")},520:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyDistance: () => (/* binding */ applyDistance),\n/* harmony export */   getProximitySpeedFactor: () => (/* binding */ getProximitySpeedFactor),\n/* harmony export */   initSpin: () => (/* binding */ initSpin),\n/* harmony export */   move: () => (/* binding */ move),\n/* harmony export */   spin: () => (/* binding */ spin)\n/* harmony export */ });\n/* unused harmony export applyPath */\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst half = 0.5, minVelocity = 0, identity = 1, moveSpeedFactor = 60, minSpinRadius = 0, spinFactor = 0.01;\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    const hasHDistance = (hDistance && dxFixed >= hDistance) ?? false, hasVDistance = (vDistance && dyFixed >= vDistance) ?? false;\n    if ((hasHDistance || hasVDistance) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y * half - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x * half - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance &&\n            ((pos.x < initialPosition.x && vel.x < minVelocity) || (pos.x > initialPosition.x && vel.x > minVelocity))) {\n            vel.x *= -(0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)();\n        }\n        if (vDistance &&\n            ((pos.y < initialPosition.y && vel.y < minVelocity) || (pos.y > initialPosition.y && vel.y > minVelocity))) {\n            vel.y *= -(0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)();\n        }\n    }\n}\nasync function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    await applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -identity : identity;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (moveSpeedFactor * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y +=\n            (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (moveSpeedFactor * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > minVelocity &&\n        ((!gravityOptions.inverse && velocity.y >= minVelocity && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= minVelocity && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (identity - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nfunction spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === "clockwise" ? Math.cos : Math.sin,\n        y: particle.spin.direction === "clockwise" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height), halfMaxSize = maxCanvasSize * half;\n    if (particle.spin.radius > halfMaxSize) {\n        particle.spin.radius = halfMaxSize;\n        particle.spin.acceleration *= -identity;\n    }\n    else if (particle.spin.radius < minSpinRadius) {\n        particle.spin.radius = minSpinRadius;\n        particle.spin.acceleration *= -identity;\n    }\n    particle.spin.angle += moveSpeed * spinFactor * (identity - particle.spin.radius / maxCanvasSize);\n}\nasync function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = await particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .clamp */ .qE)(particle.velocity.x, -identity, identity);\n        particle.velocity.y = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .clamp */ .qE)(particle.velocity.y, -identity, identity);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nfunction getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : identity;\n}\nfunction initSpin(particle) {\n    const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n    if (!spinOptions.enable) {\n        return;\n    }\n    const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinFactor = 0.01, spinCenter = {\n        x: spinPos.x * spinFactor * container.canvas.size.width,\n        y: spinPos.y * spinFactor * container.canvas.size.height,\n    }, pos = particle.getPosition(), distance = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistance */ .Yf)(pos, spinCenter), spinAcceleration = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(spinOptions.acceleration);\n    particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n    const minVelocity = 0;\n    particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= minVelocity ? "clockwise" : "counter-clockwise",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration,\n    };\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/move-base/browser/Utils.js?')},3245:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadBaseMover: () => (/* binding */ loadBaseMover)\n/* harmony export */ });\nasync function loadBaseMover(engine, refresh = true) {\n    await engine.addMover("base", async () => {\n        const { BaseMover } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2367));\n        return new BaseMover();\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/move-base/browser/index.js?')},4963:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParallaxMover: () => (/* binding */ ParallaxMover)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst half = 0.5;\nclass ParallaxMover {\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return (!(0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isSsr */ .B9)() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    async move(particle) {\n        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;\n        if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isSsr */ .B9)() || !parallaxOptions.enable) {\n            return;\n        }\n        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasSize = container.canvas.size, canvasCenter = {\n            x: canvasSize.width * half,\n            y: canvasSize.height * half,\n        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        }, { offset } = particle;\n        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;\n        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/move-parallax/browser/ParallaxMover.js?")},3747:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadParallaxMover: () => (/* binding */ loadParallaxMover)\n/* harmony export */ });\nasync function loadParallaxMover(engine, refresh = true) {\n    await engine.addMover("parallax", async () => {\n        const { ParallaxMover } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4963));\n        return new ParallaxMover();\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/move-parallax/browser/index.js?')},9178:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbsorberInstance: () => (/* binding */ AbsorberInstance)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Absorber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1304);\n\n\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, origin = {\n    x: 0,\n    y: 0,\n}, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .calcPositionOrRandomFromSizeRanged */ .l1)({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .calcPositionOrRandomFromSize */ .Mh)({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin;\n                    particle.absorberOrbit.length = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistance */ .Yf)(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? "clockwise" : "counter-clockwise";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin);\n                const updateFunc = {\n                    x: orbitDirection === "clockwise" ? Math.cos : Math.sin,\n                    y: orbitDirection === "clockwise" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .percentDenominator */ .a5) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.create(position.x, position.y) : undefined;\n        if (options instanceof _Options_Classes_Absorber_js__WEBPACK_IMPORTED_MODULE_1__/* .Absorber */ .h) {\n            this.options = options;\n        }\n        else {\n            this.options = new _Options_Classes_Absorber_js__WEBPACK_IMPORTED_MODULE_1__/* .Absorber */ .h();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .rangeColorToRgb */ .BN)(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistance */ .Yf)(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(this.position, pos), v = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    async draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(origin.x, origin.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getStyleFromRgb */ .xx)(this.color, this.opacity);\n        context.fill();\n        await Promise.resolve();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isPointInside */ .Tj)(initialPosition, this.container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-absorbers/browser/AbsorberInstance.js?')},9796:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Absorbers: () => (/* binding */ Absorbers)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst defaultIndex = 0;\nclass Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .Et)(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n    }\n    async addAbsorber(options, position) {\n        const { AbsorberInstance } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9178)), absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    async draw(context) {\n        for (const absorber of this.array) {\n            await absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === "absorber") {\n            const absorbersModeOptions = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromSingleOrMultiple */ .TA)(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromSingleOrMultiple */ .TA)(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            void this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this.container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n        const promises = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(this.absorbers, async (absorber) => {\n            await this.addAbsorber(absorber);\n        });\n        if (promises instanceof Array) {\n            await Promise.all(promises);\n        }\n        else {\n            await promises;\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber), deleteCount = 1;\n        if (index >= defaultIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-absorbers/browser/Absorbers.js?')},355:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbsorbersPlugin: () => (/* binding */ AbsorbersPlugin)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Absorber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1304);\n\n\nclass AbsorbersPlugin {\n    constructor() {\n        this.id = "absorbers";\n    }\n    async getPlugin(container) {\n        const { Absorbers } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9796));\n        return new Absorbers(container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(source.absorbers, (absorber) => {\n                const tmp = new _Options_Classes_Absorber_js__WEBPACK_IMPORTED_MODULE_1__/* .Absorber */ .h();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(source?.interactivity?.modes?.absorbers, (absorber) => {\n            const tmp = new _Options_Classes_Absorber_js__WEBPACK_IMPORTED_MODULE_1__/* .Absorber */ .h();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(absorbers)) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)("absorber", options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-absorbers/browser/AbsorbersPlugin.js?')},1304:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  h: () => (/* binding */ Absorber)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSizeLimit.js\nclass AbsorberSizeLimit {\n    constructor() {\n        this.radius = 0;\n        this.mass = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mass !== undefined) {\n            this.mass = data.mass;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSize.js\n\n\nclass AbsorberSize extends browser/* ValueWithRandom */.PV {\n    constructor() {\n        super();\n        this.density = 5;\n        this.value = 50;\n        this.limit = new AbsorberSizeLimit();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.density !== undefined) {\n            this.density = data.density;\n        }\n        if ((0,browser/* isNumber */.Et)(data.limit)) {\n            this.limit.radius = data.limit;\n        }\n        else {\n            this.limit.load(data.limit);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-absorbers/browser/Options/Classes/Absorber.js\n\n\nclass Absorber {\n    constructor() {\n        this.color = new browser/* OptionsColor */.Oi();\n        this.color.value = "#000000";\n        this.draggable = false;\n        this.opacity = 1;\n        this.destroy = true;\n        this.orbits = false;\n        this.size = new AbsorberSize();\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = browser/* OptionsColor */.Oi.create(this.color, data.color);\n        }\n        if (data.draggable !== undefined) {\n            this.draggable = data.draggable;\n        }\n        this.name = data.name;\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = (0,browser/* setRangeValue */.DT)(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = (0,browser/* setRangeValue */.DT)(data.position.y);\n            }\n        }\n        if (data.size !== undefined) {\n            this.size.load(data.size);\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n        if (data.orbits !== undefined) {\n            this.orbits = data.orbits;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-absorbers/browser/Options/Classes/Absorber.js_+_2_modules?')},8815:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadEasingQuadPlugin: () => (/* binding */ loadEasingQuadPlugin)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nasync function loadEasingQuadPlugin() {\n    (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .addEasing */ .nL)("ease-in-quad", (value) => value ** 2);\n    (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .addEasing */ .nL)("ease-out-quad", (value) => 1 - (1 - value) ** 2);\n    (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .addEasing */ .nL)("ease-in-out-quad", (value) => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2));\n    await Promise.resolve();\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-easing-quad/browser/index.js?')},4297:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  EmittersCircleShapeGenerator: () => (/* binding */ EmittersCircleShapeGenerator)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js\nvar EmitterShapeBase = __webpack_require__(3127);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js\n\n\nconst quarter = 0.25, EmittersCircleShape_double = 2, doublePI = Math.PI * EmittersCircleShape_double, squareExp = 2, half = 0.5;\nclass EmittersCircleShape extends EmitterShapeBase/* EmitterShapeBase */.B {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    async randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = (0,browser/* getRandom */.G0)() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = (0,browser/* getRandom */.G0)();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < EmittersCircleShape_double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < EmittersCircleShape_double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt((0,browser/* getRandom */.G0)()) : maxRadius;\n        return Promise.resolve({\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js\n\nclass EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js_+_1_modules?")},1096:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  EmittersSquareShapeGenerator: () => (/* binding */ EmittersSquareShapeGenerator)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js\nvar EmitterShapeBase = __webpack_require__(3127);\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js\n\n\nconst half = 0.5, sides = 4, EmittersSquareShape_double = 2;\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * ((0,browser/* getRandom */.G0)() - browser/* halfRandom */.N3);\n}\nclass EmittersSquareShape extends EmitterShapeBase/* EmitterShapeBase */.B {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    async randomPosition() {\n        return await new Promise((success) => {\n            const fill = this.fill, position = this.position, size = this.size;\n            if (fill) {\n                return success({\n                    position: {\n                        x: randomSquareCoordinate(position.x, size.width),\n                        y: randomSquareCoordinate(position.y, size.height),\n                    },\n                });\n            }\n            else {\n                const halfW = size.width * half, halfH = size.height * half, side = Math.floor((0,browser/* getRandom */.G0)() * sides), v = ((0,browser/* getRandom */.G0)() - browser/* halfRandom */.N3) * EmittersSquareShape_double;\n                switch (side) {\n                    case 0:\n                        return success({\n                            position: {\n                                x: position.x + v * halfW,\n                                y: position.y - halfH,\n                            },\n                        });\n                    case 1:\n                        return success({\n                            position: {\n                                x: position.x - halfW,\n                                y: position.y + v * halfH,\n                            },\n                        });\n                    case 2:\n                        return success({\n                            position: {\n                                x: position.x + v * halfW,\n                                y: position.y + halfH,\n                            },\n                        });\n                    case 3:\n                    default:\n                        return success({\n                            position: {\n                                x: position.x + halfW,\n                                y: position.y + v * halfH,\n                            },\n                        });\n                }\n            }\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js\n\nclass EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js_+_1_modules?")},2824:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmitterInstance: () => (/* binding */ EmitterInstance)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9463);\n/* harmony import */ var _Options_Classes_EmitterSize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(336);\n\n\n\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nclass EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent("emitterDestroyed", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .BH)(animation.offset), delay = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.rate.delay), emitFactor = (delay * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.life.delay ?? defaultLifeDelay) * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .deepExtend */ .zw)({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .rangeColorToHsl */ .R5)(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getSize */ .YC)(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: ["style", "width", "height"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent("emitterCreated", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.rate.delay);\n            this._emitDelay = (delay * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isPointInside */ .Tj)(initialPosition, this.container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getSize */ .YC)(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    async update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            await this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.life.delay ?? defaultLifeDelay) * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent("emitterPlay", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                await this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .calcPositionOrRandomFromSizeRanged */ .l1)({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: "precise",\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new _Options_Classes_EmitterSize_js__WEBPACK_IMPORTED_MODULE_2__/* .EmitterSize */ .G();\n                size.load({\n                    height: 0,\n                    mode: "percent",\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    async _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(this.options.rate.quantity);\n        await this._emitParticles(quantity);\n    }\n    async _emitParticles(quantity) {\n        const singleParticlesOptions = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromSingleOrMultiple */ .TA)(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .deepExtend */ .zw)({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = await this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                await this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js?')},3127:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ EmitterShapeBase)\n/* harmony export */ });\nclass EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js?")},7586:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emitters: () => (/* binding */ Emitters)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        const defaultIndex = 0;\n        container.getEmitter = (idxOrName) => idxOrName === undefined || (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .Et)(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = async (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    async addEmitter(options, position) {\n        const { Emitter } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9463)), { EmitterInstance } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2824)), emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        await emitter.init();\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== "emitter") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(modeEmitters.value)) {\n            const minLength = 0;\n            if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .arrayRandomIndex */ .n0)(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromArray */ .Vh)(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        void (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(emittersOptions, async (emitter) => {\n            await this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                await this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            await this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter), minIndex = 0, deleteCount = 1;\n        if (index >= minIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    async update(delta) {\n        for (const emitter of this.array) {\n            await emitter.update(delta);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters/browser/Emitters.js?')},4377:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmittersPlugin: () => (/* binding */ EmittersPlugin)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9463);\n\n\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = "emitters";\n    }\n    async getPlugin(container) {\n        const { Emitters } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7586));\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(source.emitters, (emitter) => {\n                const tmp = new _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    const defaultCount = 1;\n                    if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return (((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)("emitter", options.interactivity.events.onClick.mode)));\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters/browser/EmittersPlugin.js?')},9463:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Emitter: () => (/* binding */ Emitter)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterLife.js\n\nclass EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = (0,browser/* setRangeValue */.DT)(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = (0,browser/* setRangeValue */.DT)(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterRate.js\n\nclass EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = (0,browser/* setRangeValue */.DT)(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = (0,browser/* setRangeValue */.DT)(data.delay);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShapeReplace.js\nclass EmitterShapeReplace {\n    constructor() {\n        this.color = false;\n        this.opacity = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = data.color;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShape.js\n\n\nclass EmitterShape {\n    constructor() {\n        this.options = {};\n        this.replace = new EmitterShapeReplace();\n        this.type = "square";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.options !== undefined) {\n            this.options = (0,browser/* deepExtend */.zw)({}, data.options ?? {});\n        }\n        this.replace.load(data.replace);\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js\nvar EmitterSize = __webpack_require__(336);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js\n\n\n\n\n\nclass Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = new EmitterShape();\n        this.startCount = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize/* EmitterSize */.G();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = (0,browser/* executeOnSingleOrMultiple */.wJ)(data.particles, (particles) => {\n            return (0,browser/* deepExtend */.zw)({}, particles);\n        });\n        this.rate.load(data.rate);\n        this.shape.load(data.shape);\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = (0,browser/* setRangeValue */.DT)(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = (0,browser/* setRangeValue */.DT)(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new browser/* AnimatableColor */.A9();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js_+_4_modules?')},336:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   G: () => (/* binding */ EmitterSize)\n/* harmony export */ });\nclass EmitterSize {\n    constructor() {\n        this.mode = "percent";\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js?')},7585:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ShapeManager: () => (/* binding */ ShapeManager)\n/* harmony export */ });\nconst shapeGeneratorss = new Map();\nclass ShapeManager {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    addShapeGenerator(name, generator) {\n        if (!this.getShapeGenerator(name)) {\n            shapeGeneratorss.set(name, generator);\n        }\n    }\n    getShapeGenerator(name) {\n        return shapeGeneratorss.get(name);\n    }\n    getSupportedShapeGenerators() {\n        return shapeGeneratorss.keys();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/plugin-emitters/browser/ShapeManager.js?")},4029:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircleDrawer: () => (/* binding */ CircleDrawer)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst sides = 12, maxAngle = 360, minAngle = 0;\nclass CircleDrawer {\n    async draw(data) {\n        const { drawCircle } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9651));\n        drawCircle(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async particleInit(container, particle) {\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\n            max: maxAngle,\n            min: minAngle,\n        };\n        particle.circleRange = !(0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Gv)(angle)\n            ? {\n                min: minAngle,\n                max: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .degToRad */ .pu)(angle),\n            }\n            : { min: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .degToRad */ .pu)(angle.min), max: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .degToRad */ .pu)(angle.max) };\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-circle/browser/CircleDrawer.js?")},9651:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawCircle: () => (/* binding */ drawCircle)\n/* harmony export */ });\nconst double = 2, doublePI = Math.PI * double, minAngle = 0, origin = { x: 0, y: 0 };\nfunction drawCircle(data) {\n    const { context, particle, radius } = data;\n    if (!particle.circleRange) {\n        particle.circleRange = { min: minAngle, max: doublePI };\n    }\n    const circleRange = particle.circleRange;\n    context.arc(origin.x, origin.y, radius, circleRange.min, circleRange.max, false);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-circle/browser/Utils.js?")},6658:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadCircleShape: () => (/* binding */ loadCircleShape)\n/* harmony export */ });\nasync function loadCircleShape(engine, refresh = true) {\n    const { CircleDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4029));\n    await engine.addShape("circle", new CircleDrawer(), refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-circle/browser/index.js?')},3903:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ validTypes)\n/* harmony export */ });\nconst validTypes = ["emoji"];\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-emoji/browser/Constants.js?')},3133:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiDrawer: () => (/* binding */ EmojiDrawer)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3903);\n\n\nconst defaultFont = \'"Twemoji Mozilla", Apple Color Emoji, "Segoe UI Emoji", "Noto Color Emoji", "EmojiOne Color"\';\nclass EmojiDrawer {\n    constructor() {\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, emojiData] of this._emojiShapeDict) {\n            if (emojiData instanceof ImageBitmap) {\n                emojiData?.close();\n                this._emojiShapeDict.delete(key);\n            }\n        }\n    }\n    async draw(data) {\n        const { drawEmoji } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7935));\n        drawEmoji(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!_Constants_js__WEBPACK_IMPORTED_MODULE_1__/* .validTypes */ .u.find((t) => (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [(0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .loadFont */ .Al)(defaultFont)], shapeOptions = _Constants_js__WEBPACK_IMPORTED_MODULE_1__/* .validTypes */ .u\n            .map((t) => options.particles.shape.options[t])\n            .find((t) => !!t);\n        if (shapeOptions) {\n            (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(shapeOptions, (shape) => {\n                if (shape.font) {\n                    promises.push((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .loadFont */ .Al)(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        delete particle.emojiData;\n    }\n    async particleInit(container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromSingleOrMultiple */ .TA)(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\n        if (!emoji) {\n            return;\n        }\n        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\n        if (existingData) {\n            particle.emojiData = existingData;\n            return;\n        }\n        const canvasSize = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeMax */ .W9)(particle.size.value) * double;\n        let emojiData;\n        const maxSize = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeMax */ .W9)(particle.size.value);\n        if (typeof OffscreenCanvas !== "undefined") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext("2d");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = "middle";\n            context.textAlign = "center";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement("canvas");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext("2d");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = "middle";\n            context.textAlign = "center";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas;\n        }\n        this._emojiShapeDict.set(key, emojiData);\n        particle.emojiData = emojiData;\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js?')},7935:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawEmoji: () => (/* binding */ drawEmoji)\n/* harmony export */ });\nfunction drawEmoji(data) {\n    const { context, particle, radius, opacity } = data, emojiData = particle.emojiData, double = 2, diameter = radius * double, previousAlpha = context.globalAlpha;\n    if (!emojiData) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(emojiData, -radius, -radius, diameter, diameter);\n    context.globalAlpha = previousAlpha;\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-emoji/browser/Utils.js?")},2878:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadEmojiShape: () => (/* binding */ loadEmojiShape)\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3903);\n\nasync function loadEmojiShape(engine, refresh = true) {\n    const { EmojiDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3133));\n    await engine.addShape(_Constants_js__WEBPACK_IMPORTED_MODULE_0__/* .validTypes */ .u, new EmojiDrawer(), refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-emoji/browser/index.js?")},6033:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  drawGif: () => (/* binding */ drawGif),\n  loadGifImage: () => (/* binding */ loadGifImage)\n});\n\n// UNUSED EXPORTS: decodeGIF, getGIFLoopAmount\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js\nconst InterlaceOffsets = [0, 4, 2, 1];\nconst InterlaceSteps = [8, 8, 4, 2];\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js\nclass ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), "");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        const increment = 2, previous = 1, shift = 8;\n        this.pos += increment;\n        return this.data[this.pos - increment] + (this.data[this.pos - previous] << shift);\n    }\n    readSubBlocks() {\n        let blockString = "", size = 0;\n        const minCount = 0, emptySize = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= minCount; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== emptySize);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = this.data[this.pos], len = 0;\n        const emptySize = 0, increment = 1;\n        for (let offset = 0; size !== emptySize; offset += size + increment, size = this.data[this.pos + offset]) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        size = this.data[this.pos++];\n        for (let i = 0; size !== emptySize; size = this.data[this.pos++]) {\n            for (let count = size; --count >= emptySize; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (const increment = 1, noData = 0; this.data[this.pos] !== noData; this.pos += this.data[this.pos] + increment) {\n        }\n        this.pos++;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js\n\n\nconst origin = {\n    x: 0,\n    y: 0,\n}, defaultFrame = 0, half = 0.5, initialTime = 0, firstIndex = 0, defaultLoopCount = 0;\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nfunction parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError("plain text extension without global color table");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        if (index !== getTransparencyIndex(null)) {\n            return { r, g, b, a: 255 };\n        }\n        return { r, g, b, a: avgAlpha ? ~~((r + g + b) / 3) : 0 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: "srgb" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === "IndexSizeError") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError("GIF frame size is to large");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                let pixelPos = 0, lineIndex = 0, exit = false;\n                while (!exit) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (const item of dic[code]) {\n                            const { r, g, b, a } = getColor(item);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            exit = true;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        let code = 0, size = minCodeSize + 1, pos = 0, pixelPos = -4, exit = false;\n        const dic = [[0]];\n        while (!exit) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    exit = true;\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (const item of dic[code]) {\n                    const { r, g, b, a } = getColor(item);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError("undefined block found");\n    }\n    return false;\n}\nfunction getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== "NETSCAPE2.0") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nasync function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError("file not found");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: "srgb" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== "GIF89a") {\n        throw new Error("not a supported GIF file");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: "srgb" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === "IndexSizeError") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error("GIF frame size is to large");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: "srgb" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} "${error.message}"`);\n        }\n        throw error;\n    }\n}\nfunction drawGif(data) {\n    const { context, radius, particle, delta } = data, image = particle.image;\n    if (!image?.gifData || !image.gif) {\n        return;\n    }\n    const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext("2d");\n    if (!offscreenContext) {\n        throw new Error("could not create offscreen canvas context");\n    }\n    offscreenContext.imageSmoothingQuality = "low";\n    offscreenContext.imageSmoothingEnabled = false;\n    offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n    if (particle.gifLoopCount === undefined) {\n        particle.gifLoopCount = image.gifLoopCount ?? defaultLoopCount;\n    }\n    let frameIndex = particle.gifFrame ?? defaultFrame;\n    const pos = { x: -image.gifData.width * half, y: -image.gifData.height * half }, frame = image.gifData.frames[frameIndex];\n    if (particle.gifTime === undefined) {\n        particle.gifTime = initialTime;\n    }\n    if (!frame.bitmap) {\n        return;\n    }\n    context.scale(radius / image.gifData.width, radius / image.gifData.height);\n    switch (frame.disposalMethod) {\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 0:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            break;\n        case 1:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            break;\n        case 2:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            if (!image.gifData.globalColorTable.length) {\n                offscreenContext.putImageData(image.gifData.frames[firstIndex].image, pos.x + frame.left, pos.y + frame.top);\n            }\n            else {\n                offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n            }\n            break;\n        case 3:\n            {\n                const previousImageData = offscreenContext.getImageData(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                context.drawImage(offscreenCanvas, pos.x, pos.y);\n                offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.putImageData(previousImageData, origin.x, origin.y);\n            }\n            break;\n    }\n    particle.gifTime += delta.value;\n    if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n        if (++frameIndex >= image.gifData.frames.length) {\n            if (--particle.gifLoopCount <= defaultLoopCount) {\n                return;\n            }\n            frameIndex = firstIndex;\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n        }\n        particle.gifFrame = frameIndex;\n    }\n    context.scale(image.gifData.width / radius, image.gifData.height / radius);\n}\nasync function loadGifImage(image) {\n    if (image.type !== "gif") {\n        const { loadImage } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2072));\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? defaultLoopCount;\n        if (!image.gifLoopCount) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js_+_2_modules?')},4573:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageDrawer: () => (/* binding */ ImageDrawer)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nclass ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .errorPrefix */ .dI} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    async draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const { drawGif } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6033));\n            drawGif(data);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    async loadShape(particle) {\n        if (particle.shape !== "image" && particle.shape !== "images") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            await this.loadImageShape(imageData);\n            await this.loadShape(particle);\n        }\n    }\n    async particleInit(container, particle) {\n        if (particle.shape !== "image" && particle.shape !== "images") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                void this.particleInit(container, particle);\n            });\n            return;\n        }\n        let imageRes;\n        if (image.svgData && color) {\n            const { replaceImageColor } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2072));\n            imageRes = await replaceImageColor(image, imageData, color, particle);\n        }\n        else {\n            imageRes = {\n                color,\n                data: image,\n                element: image.element,\n                gif: image.gif,\n                gifData: image.gifData,\n                gifLoopCount: image.gifLoopCount,\n                loaded: true,\n                ratio: imageData.width && imageData.height\n                    ? imageData.width / imageData.height\n                    : image.ratio ?? defaultRatio,\n                replaceColor: replaceColor,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {\n            image: imageRes,\n            fill,\n            close,\n        };\n        particle.image = imageShape.image;\n        particle.shapeFill = imageShape.fill;\n        particle.shapeClose = imageShape.close;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js?')},6179:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  ImagePreloaderPlugin: () => (/* binding */ ImagePreloaderPlugin)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/shape-image/browser/Options/Classes/Preload.js\nclass Preload {\n    constructor() {\n        this.src = "";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/shape-image/browser/ImagePreloader.js\n\nclass ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = "imagePreloader";\n        this._engine = engine;\n    }\n    async getPlugin() {\n        await Promise.resolve();\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source?.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-image/browser/ImagePreloader.js_+_1_modules?')},2072:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ downloadSvgImage),\n/* harmony export */   loadImage: () => (/* binding */ loadImage),\n/* harmony export */   replaceImageColor: () => (/* binding */ replaceImageColor)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst stringStart = 0, defaultOpacity = 1;\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return "";\n    }\n    const colorStyle = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getStyleFromHsl */ .LC)(color, opacity);\n    if (svgData.includes("fill")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(">");\n    return `${svgData.substring(stringStart, preFillIndex)} fill="${colorStyle}"${svgData.substring(preFillIndex)}`;\n}\nasync function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener("load", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener("error", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getLogger */ .tZ)().error(`${_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .errorPrefix */ .dI} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nasync function downloadSvgImage(image) {\n    if (image.type !== "svg") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getLogger */ .tZ)().error(`${_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .errorPrefix */ .dI} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nfunction replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? defaultOpacity), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: "image/svg+xml" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener("load", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        const errorHandler = async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        };\n        img.addEventListener("error", () => void errorHandler());\n        img.src = url;\n    });\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-image/browser/Utils.js?')},3709:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadImageShape: () => (/* binding */ loadImageShape)\n/* harmony export */ });\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2072);\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8384);\n\n\nconst extLength = 3;\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${_tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__/* .errorPrefix */ .dI} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - extLength),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            let imageFunc;\n            if (data.gif) {\n                const { loadGifImage } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6033));\n                imageFunc = loadGifImage;\n            }\n            else {\n                imageFunc = data.replaceColor ? _Utils_js__WEBPACK_IMPORTED_MODULE_0__/* .downloadSvgImage */ .a : _Utils_js__WEBPACK_IMPORTED_MODULE_0__.loadImage;\n            }\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${_tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__/* .errorPrefix */ .dI} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nasync function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const { ImagePreloaderPlugin } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6179)), { ImageDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4573));\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape(["image", "images"], new ImageDrawer(engine), refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-image/browser/index.js?')},2041:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineDrawer: () => (/* binding */ LineDrawer)\n/* harmony export */ });\nconst sides = 1;\nclass LineDrawer {\n    async draw(data) {\n        const { drawLine } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 49));\n        drawLine(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-line/browser/LineDrawer.js?")},49:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawLine: () => (/* binding */ drawLine)\n/* harmony export */ });\nfunction drawLine(data) {\n    const { context, particle, radius } = data, shapeData = particle.shapeData, centerY = 0;\n    context.moveTo(-radius, centerY);\n    context.lineTo(radius, centerY);\n    context.lineCap = shapeData?.cap ?? "butt";\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-line/browser/Utils.js?')},840:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadLineShape: () => (/* binding */ loadLineShape)\n/* harmony export */ });\nasync function loadLineShape(engine, refresh = true) {\n    const { LineDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2041));\n    await engine.addShape("line", new LineDrawer(), refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-line/browser/index.js?')},9813:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PolygonDrawer: () => (/* binding */ PolygonDrawer)\n/* harmony export */ });\n/* harmony import */ var _PolygonDrawerBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1332);\n\nconst sidesCenterFactor = 3.5, yFactor = 2.66, sidesFactor = 3;\nclass PolygonDrawer extends _PolygonDrawerBase_js__WEBPACK_IMPORTED_MODULE_0__/* .PolygonDrawerBase */ .L {\n    getCenter(particle, radius) {\n        return {\n            x: -radius / (particle.sides / sidesCenterFactor),\n            y: -radius / (yFactor / sidesCenterFactor),\n        };\n    }\n    getSidesData(particle, radius) {\n        const sides = particle.sides;\n        return {\n            count: {\n                denominator: 1,\n                numerator: sides,\n            },\n            length: (radius * yFactor) / (sides / sidesFactor),\n        };\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-polygon/browser/PolygonDrawer.js?")},1332:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   L: () => (/* binding */ PolygonDrawerBase)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst defaultSides = 5;\nclass PolygonDrawerBase {\n    async draw(data) {\n        const { particle, radius } = data, start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), { drawPolygon } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5043));\n        drawPolygon(data, start, side);\n    }\n    getSidesCount(particle) {\n        const polygon = particle.shapeData;\n        return Math.round((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(polygon?.sides ?? defaultSides));\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-polygon/browser/PolygonDrawerBase.js?")},5609:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TriangleDrawer: () => (/* binding */ TriangleDrawer)\n/* harmony export */ });\n/* harmony import */ var _PolygonDrawerBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1332);\n\nconst yFactor = 1.66, sides = 3, double = 2;\nclass TriangleDrawer extends _PolygonDrawerBase_js__WEBPACK_IMPORTED_MODULE_0__/* .PolygonDrawerBase */ .L {\n    getCenter(particle, radius) {\n        return {\n            x: -radius,\n            y: radius / yFactor,\n        };\n    }\n    getSidesCount() {\n        return sides;\n    }\n    getSidesData(particle, radius) {\n        const diameter = radius * double;\n        return {\n            count: {\n                denominator: 2,\n                numerator: 3,\n            },\n            length: diameter,\n        };\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-polygon/browser/TriangleDrawer.js?")},5043:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawPolygon: () => (/* binding */ drawPolygon)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst piDeg = 180, origin = { x: 0, y: 0 }, sidesOffset = 2;\nfunction drawPolygon(data, start, side) {\n    const { context } = data, sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (piDeg * (decimalSides - sidesOffset)) / decimalSides, interiorAngle = Math.PI - (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .degToRad */ .pu)(interiorAngleDegrees);\n    if (!context) {\n        return;\n    }\n    context.beginPath();\n    context.translate(start.x, start.y);\n    context.moveTo(origin.x, origin.y);\n    for (let i = 0; i < sideCount; i++) {\n        context.lineTo(side.length, origin.y);\n        context.translate(side.length, origin.y);\n        context.rotate(interiorAngle);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-polygon/browser/Utils.js?")},3986:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadPolygonShape: () => (/* binding */ loadPolygonShape)\n/* harmony export */ });\n/* unused harmony exports loadGenericPolygonShape, loadTriangleShape */\nasync function loadGenericPolygonShape(engine, refresh = true) {\n    const { PolygonDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9813));\n    await engine.addShape("polygon", new PolygonDrawer(), refresh);\n}\nasync function loadTriangleShape(engine, refresh = true) {\n    const { TriangleDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5609));\n    await engine.addShape("triangle", new TriangleDrawer(), refresh);\n}\nasync function loadPolygonShape(engine, refresh = true) {\n    await loadGenericPolygonShape(engine, refresh);\n    await loadTriangleShape(engine, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-polygon/browser/index.js?')},5939:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SquareDrawer: () => (/* binding */ SquareDrawer)\n/* harmony export */ });\nconst sides = 4;\nclass SquareDrawer {\n    async draw(data) {\n        const { drawSquare } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 268));\n        drawSquare(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-square/browser/SquareDrawer.js?")},268:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawSquare: () => (/* binding */ drawSquare)\n/* harmony export */ });\nconst fixFactorSquared = 2, fixFactor = Math.sqrt(fixFactorSquared), double = 2;\nfunction drawSquare(data) {\n    const { context, radius } = data, fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * double;\n    context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-square/browser/Utils.js?")},225:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadSquareShape: () => (/* binding */ loadSquareShape)\n/* harmony export */ });\nasync function loadSquareShape(engine, refresh = true) {\n    const { SquareDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5939));\n    await engine.addShape(["edge", "square"], new SquareDrawer(), refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-square/browser/index.js?')},1161:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StarDrawer: () => (/* binding */ StarDrawer)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst defaultInset = 2, defaultSides = 5;\nclass StarDrawer {\n    async draw(data) {\n        const { drawStar } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 723));\n        drawStar(data);\n    }\n    getSidesCount(particle) {\n        const star = particle.shapeData;\n        return Math.round((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(star?.sides ?? defaultSides));\n    }\n    async particleInit(container, particle) {\n        const star = particle.shapeData;\n        particle.starInset = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(star?.inset ?? defaultInset);\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-star/browser/StarDrawer.js?")},723:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawStar: () => (/* binding */ drawStar)\n/* harmony export */ });\nconst defaultInset = 2, origin = { x: 0, y: 0 };\nfunction drawStar(data) {\n    const { context, particle, radius } = data, sides = particle.sides, inset = particle.starInset ?? defaultInset;\n    context.moveTo(origin.x, origin.y - radius);\n    for (let i = 0; i < sides; i++) {\n        context.rotate(Math.PI / sides);\n        context.lineTo(origin.x, origin.y - radius * inset);\n        context.rotate(Math.PI / sides);\n        context.lineTo(origin.x, origin.y - radius);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-star/browser/Utils.js?")},258:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadStarShape: () => (/* binding */ loadStarShape)\n/* harmony export */ });\nasync function loadStarShape(engine, refresh = true) {\n    const { StarDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 1161));\n    await engine.addShape("star", new StarDrawer(), refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-star/browser/index.js?')},1603:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextDrawer: () => (/* binding */ TextDrawer),\n/* harmony export */   u: () => (/* binding */ validTypes)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst validTypes = ["text", "character", "char", "multiline-text"];\nclass TextDrawer {\n    async draw(data) {\n        const { drawText } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4332));\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isInArray */ .hn)(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .executeOnSingleOrMultiple */ .wJ)(shapeOptions, (shape) => {\n                promises.push((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .loadFont */ .Al)(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    async particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromSingleOrMultiple */ .TA)(textData, particle.randomIndexData);\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-text/browser/TextDrawer.js?')},4332:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawText: () => (/* binding */ drawText)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst double = 2, half = 0.5;\nfunction drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromSingleOrMultiple */ .TA)(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? "", weight = character.weight ?? "400", size = Math.round(radius) * double, font = character.font ?? "Verdana", fill = particle.shapeFill;\n    const lines = text?.split("\\n");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px "${font}"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/shape-text/browser/Utils.js?')},7695:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColorUpdater: () => (/* binding */ ColorUpdater)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass ColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const hslColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .rangeColorToHsl */ .R5)(particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getHslAnimationFromHsl */ .pz)(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((color?.h.value !== undefined && hAnimation.enable) ||\n                (color?.s.value !== undefined && sAnimation.enable) ||\n                (color?.l.value !== undefined && lAnimation.enable)));\n    }\n    async update(particle, delta) {\n        (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .updateColor */ .Jv)(particle.color, delta);\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-color/browser/ColorUpdater.js?")},2319:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadColorUpdater: () => (/* binding */ loadColorUpdater)\n/* harmony export */ });\nasync function loadColorUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("color", async (container) => {\n        const { ColorUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7695));\n        return new ColorUpdater(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-color/browser/index.js?')},4763:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  DestroyUpdater: () => (/* binding */ DestroyUpdater)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-destroy/browser/Options/Classes/DestroyBounds.js\n\nclass DestroyBounds {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = (0,browser/* setRangeValue */.DT)(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = (0,browser/* setRangeValue */.DT)(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = (0,browser/* setRangeValue */.DT)(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = (0,browser/* setRangeValue */.DT)(data.top);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-destroy/browser/Options/Classes/SplitFactor.js\n\nclass SplitFactor extends browser/* ValueWithRandom */.PV {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-destroy/browser/Options/Classes/SplitRate.js\n\nclass SplitRate extends browser/* ValueWithRandom */.PV {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-destroy/browser/Options/Classes/Split.js\n\n\n\nclass Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = browser/* OptionsColor */.Oi.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = (0,browser/* executeOnSingleOrMultiple */.wJ)(data.particles, (particles) => {\n            return (0,browser/* deepExtend */.zw)({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-destroy/browser/Options/Classes/Destroy.js\n\n\nclass Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = "none";\n        this.split = new Split();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-destroy/browser/Utils.js\n\nconst defaultOffset = 0, minDestroySize = 0.5, defaultSplitCount = 0, increment = 1, unbreakableTime = 500, minSplitCount = 0;\nasync function addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = (0,browser/* loadParticlesOptions */.yV)(engine, container, parent.options), factor = (0,browser/* getRangeValue */.VG)(splitOptions.factor.value), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + (0,browser/* getRangeValue */.VG)(splitOptions.colorOffset.h ?? defaultOffset),\n                    s: parentColor.s + (0,browser/* getRangeValue */.VG)(splitOptions.colorOffset.s ?? defaultOffset),\n                    l: parentColor.l + (0,browser/* getRangeValue */.VG)(splitOptions.colorOffset.l ?? defaultOffset),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: "precise",\n        },\n    });\n    if ((0,browser/* isNumber */.Et)(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? (0,browser/* setRangeValue */.DT)(-parent.size.value, parent.size.value) : defaultOffset, position = {\n        x: parent.position.x + (0,browser/* randomInRange */.BH)(offset),\n        y: parent.position.y + (0,browser/* randomInRange */.BH)(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < minDestroySize) {\n            return false;\n        }\n        particle.velocity.length = (0,browser/* randomInRange */.BH)((0,browser/* setRangeValue */.DT)(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, unbreakableTime);\n        return true;\n    });\n}\nasync function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= minSplitCount &&\n        (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = (0,browser/* getRangeValue */.VG)(splitOptions.rate.value), particlesSplitOptions = (0,browser/* itemFromSingleOrMultiple */.TA)(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        await addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-destroy/browser/DestroyUpdater.js\n\n\n\nclass DestroyUpdater {\n    constructor(engine, container) {\n        this.container = container;\n        this.engine = engine;\n    }\n    async init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = ((0,browser/* getRangeValue */.VG)(bottom) * canvasSize.height) / browser/* percentDenominator */.a5;\n        }\n        if (left) {\n            destroyBounds.left = ((0,browser/* getRangeValue */.VG)(left) * canvasSize.width) / browser/* percentDenominator */.a5;\n        }\n        if (right) {\n            destroyBounds.right = ((0,browser/* getRangeValue */.VG)(right) * canvasSize.width) / browser/* percentDenominator */.a5;\n        }\n        if (top) {\n            destroyBounds.top = ((0,browser/* getRangeValue */.VG)(top) * canvasSize.height) / browser/* percentDenominator */.a5;\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === "split") {\n            void split(this.engine, this.container, particle);\n        }\n    }\n    async update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-destroy/browser/DestroyUpdater.js_+_6_modules?')},9090:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  LifeUpdater: () => (/* binding */ LifeUpdater)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDelay.js\n\nclass LifeDelay extends browser/* ValueWithRandom */.PV {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDuration.js\n\nclass LifeDuration extends browser/* ValueWithRandom */.PV {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-life/browser/Options/Classes/Life.js\n\n\nclass Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-life/browser/LifeUpdater.js\n\n\nconst noTime = 0, identity = 1, infiniteValue = -1;\nclass LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? (((0,browser/* getRangeValue */.VG)(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity : (0,browser/* getRandom */.G0)())) /\n                    container.retina.reduceFactor) *\n                    browser/* millisecondsToSeconds */.Xu\n                : noTime,\n            delayTime: noTime,\n            duration: container.retina.reduceFactor\n                ? (((0,browser/* getRangeValue */.VG)(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity : (0,browser/* getRandom */.G0)())) /\n                    container.retina.reduceFactor) *\n                    browser/* millisecondsToSeconds */.Xu\n                : noTime,\n            time: noTime,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= noTime) {\n            particle.life.duration = infiniteValue;\n        }\n        if (particle.life.count <= noTime) {\n            particle.life.count = infiniteValue;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > noTime;\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const { updateLife } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8357));\n        updateLife(particle, delta, this.container.canvas.size);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-life/browser/LifeUpdater.js_+_3_modules?")},8357:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateLife: () => (/* binding */ updateLife)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst noTime = 0, infiniteValue = -1, noLife = 0, minCanvasSize = 0;\nfunction updateLife(particle, delta, canvasSize) {\n    if (!particle.life) {\n        return;\n    }\n    const life = particle.life;\n    let justSpawned = false;\n    if (particle.spawning) {\n        life.delayTime += delta.value;\n        if (life.delayTime >= particle.life.delay) {\n            justSpawned = true;\n            particle.spawning = false;\n            life.delayTime = noTime;\n            life.time = noTime;\n        }\n        else {\n            return;\n        }\n    }\n    if (life.duration === infiniteValue) {\n        return;\n    }\n    if (particle.spawning) {\n        return;\n    }\n    if (justSpawned) {\n        life.time = noTime;\n    }\n    else {\n        life.time += delta.value;\n    }\n    if (life.time < life.duration) {\n        return;\n    }\n    life.time = noTime;\n    if (particle.life.count > noLife) {\n        particle.life.count--;\n    }\n    if (particle.life.count === noLife) {\n        particle.destroy();\n        return;\n    }\n    const widthRange = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(minCanvasSize, canvasSize.width), heightRange = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .setRangeValue */ .DT)(minCanvasSize, canvasSize.width);\n    particle.position.x = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .BH)(widthRange);\n    particle.position.y = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .BH)(heightRange);\n    particle.spawning = true;\n    life.delayTime = noTime;\n    life.time = noTime;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    if (lifeOptions) {\n        life.delay = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(lifeOptions.delay.value) * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu;\n        life.duration = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(lifeOptions.duration.value) * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-life/browser/Utils.js?")},444:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadLifeUpdater: () => (/* binding */ loadLifeUpdater)\n/* harmony export */ });\nasync function loadLifeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("life", async (container) => {\n        const { LifeUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9090));\n        return new LifeUpdater(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-life/browser/index.js?')},5699:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpacityUpdater: () => (/* binding */ OpacityUpdater)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const opacityOptions = particle.options.opacity, pxRatio = 1;\n        particle.opacity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .initParticleNumericAnimationValue */ .Xs)(opacityOptions, pxRatio);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(opacityAnimation.speed) / _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .percentDenominator */ .a5) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)();\n            }\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const none = 0;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? none) <= none ||\n                ((particle.opacity.maxLoops ?? none) > none &&\n                    (particle.opacity.loops ?? none) < (particle.opacity.maxLoops ?? none))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.opacity) {\n            return;\n        }\n        (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .updateAnimation */ .UC)(particle, particle.opacity, true, particle.options.opacity.animation.destroy, delta);\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-opacity/browser/OpacityUpdater.js?")},1749:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadOpacityUpdater: () => (/* binding */ loadOpacityUpdater)\n/* harmony export */ });\nasync function loadOpacityUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("opacity", async (container) => {\n        const { OpacityUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5699));\n        return new OpacityUpdater(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-opacity/browser/index.js?')},6318:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BounceOutMode: () => (/* binding */ BounceOutMode)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nclass BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            "bounce",\n            "split",\n        ];\n    }\n    async update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = await plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .calculateBounds */ .AE)(pos, size), canvasSize = container.canvas.size, { bounceHorizontal, bounceVertical } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3212));\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-out-modes/browser/BounceOutMode.js?')},9632:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DestroyOutMode: () => (/* binding */ DestroyOutMode)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst minVelocity = 0;\nclass DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = ["destroy"];\n    }\n    async update(particle, direction, _delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case "normal":\n            case "outside":\n                if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isPointInside */ .Tj)(particle.position, container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case "inside": {\n                const { dx, dy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(particle.position, particle.moveCenter), { x: vx, y: vy } = particle.velocity;\n                if ((vx < minVelocity && dx > particle.moveCenter.radius) ||\n                    (vy < minVelocity && dy > particle.moveCenter.radius) ||\n                    (vx >= minVelocity && dx < -particle.moveCenter.radius) ||\n                    (vy >= minVelocity && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, undefined, true);\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-out-modes/browser/DestroyOutMode.js?')},4604:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoneOutMode: () => (/* binding */ NoneOutMode)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst minVelocity = 0;\nclass NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = ["none"];\n    }\n    async update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === "left" || direction === "right")) ??\n            (particle.options.move.distance.vertical &&\n                (direction === "top" || direction === "bottom"))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container, canvasSize = container.canvas.size, pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > minVelocity && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < minVelocity && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > minVelocity && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < minVelocity && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!(0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isPointInside */ .Tj)(particle.position, container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === "bottom") ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === "top")) {\n                container.particles.remove(particle);\n            }\n        }\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-out-modes/browser/NoneOutMode.js?')},919:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OutOfCanvasUpdater: () => (/* binding */ OutOfCanvasUpdater)\n/* harmony export */ });\nconst checkOutMode = (outModes, outMode) => {\n    return (outModes.default === outMode ||\n        outModes.bottom === outMode ||\n        outModes.left === outMode ||\n        outModes.right === outMode ||\n        outModes.top === outMode);\n};\nclass OutOfCanvasUpdater {\n    constructor(container) {\n        this._updateOutMode = async (particle, delta, outMode, direction) => {\n            for (const updater of this.updaters) {\n                await updater.update(particle, direction, delta, outMode);\n            }\n        };\n        this.container = container;\n        this.updaters = [];\n    }\n    async init(particle) {\n        this.updaters = [];\n        const outModes = particle.options.move.outModes;\n        if (checkOutMode(outModes, "bounce")) {\n            const { BounceOutMode } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6318));\n            this.updaters.push(new BounceOutMode(this.container));\n        }\n        else if (checkOutMode(outModes, "out")) {\n            const { OutOutMode } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3546));\n            this.updaters.push(new OutOutMode(this.container));\n        }\n        else if (checkOutMode(outModes, "destroy")) {\n            const { DestroyOutMode } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9632));\n            this.updaters.push(new DestroyOutMode(this.container));\n        }\n        else if (checkOutMode(outModes, "none")) {\n            const { NoneOutMode } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4604));\n            this.updaters.push(new NoneOutMode(this.container));\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    async update(particle, delta) {\n        const outModes = particle.options.move.outModes;\n        await this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, "bottom");\n        await this._updateOutMode(particle, delta, outModes.left ?? outModes.default, "left");\n        await this._updateOutMode(particle, delta, outModes.right ?? outModes.default, "right");\n        await this._updateOutMode(particle, delta, outModes.top ?? outModes.default, "top");\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-out-modes/browser/OutOfCanvasUpdater.js?')},3546:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OutOutMode: () => (/* binding */ OutOutMode)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst minVelocity = 0, minDistance = 0;\nclass OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = ["out"];\n    }\n    async update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case "inside": {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.create(particle.moveCenter));\n                const { dx, dy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(particle.position, circVec);\n                if ((vx <= minVelocity && dx >= minDistance) ||\n                    (vy <= minVelocity && dy >= minDistance) ||\n                    (vx >= minVelocity && dx <= minDistance) ||\n                    (vy >= minVelocity && dy <= minDistance)) {\n                    return;\n                }\n                particle.position.x = Math.floor((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .BH)({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .BH)({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .isPointInside */ .Tj)(particle.position, container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .Vector */ .Mi.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case "outside": {\n                        particle.position.x =\n                            Math.floor((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .BH)({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .randomInRange */ .BH)({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getDistances */ .vr)(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case "normal": {\n                        const warp = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .calculateBounds */ .AE)(particle.position, sizeValue);\n                        if (direction === "right" &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!warp) {\n                                particle.position.y = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === "left" && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!warp) {\n                                particle.position.y = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === "bottom" &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!warp) {\n                                particle.position.x = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === "top" && nextBounds.bottom < -particle.offset.y) {\n                            if (!warp) {\n                                particle.position.x = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-out-modes/browser/OutOutMode.js?')},3212:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bounceHorizontal: () => (/* binding */ bounceHorizontal),\n/* harmony export */   bounceVertical: () => (/* binding */ bounceVertical)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst minVelocity = 0, boundsMin = 0;\nfunction bounceHorizontal(data) {\n    if ((data.outMode !== "bounce" && data.outMode !== "split") ||\n        (data.direction !== "left" && data.direction !== "right")) {\n        return;\n    }\n    if (data.bounds.right < boundsMin && data.direction === "left") {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width && data.direction === "right") {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === "right" &&\n        data.bounds.right >= data.canvasSize.width &&\n        velocity > minVelocity) ||\n        (data.direction === "left" && data.bounds.left <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(data.particle.options.bounce.horizontal.value);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width && data.direction === "right") {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= boundsMin && data.direction === "left") {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === "split") {\n        data.particle.destroy();\n    }\n}\nfunction bounceVertical(data) {\n    if ((data.outMode !== "bounce" && data.outMode !== "split") ||\n        (data.direction !== "bottom" && data.direction !== "top")) {\n        return;\n    }\n    if (data.bounds.bottom < boundsMin && data.direction === "top") {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height && data.direction === "bottom") {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === "bottom" &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > minVelocity) ||\n        (data.direction === "top" && data.bounds.top <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(data.particle.options.bounce.vertical.value);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === "bottom") {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= boundsMin && data.direction === "top") {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === "split") {\n        data.particle.destroy();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-out-modes/browser/Utils.js?')},8433:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadOutModesUpdater: () => (/* binding */ loadOutModesUpdater)\n/* harmony export */ });\nasync function loadOutModesUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("outModes", async (container) => {\n        const { OutOfCanvasUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 919));\n        return new OutOfCanvasUpdater(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-out-modes/browser/index.js?')},9718:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  RollUpdater: () => (/* binding */ RollUpdater)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-roll/browser/Options/Classes/RollLight.js\n\nclass RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = (0,browser/* setRangeValue */.DT)(data.value);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-roll/browser/Options/Classes/Roll.js\n\n\nclass Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = "vertical";\n        this.speed = 25;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = browser/* OptionsColor */.Oi.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = (0,browser/* setRangeValue */.DT)(data.speed);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-roll/browser/RollUpdater.js\n\nclass RollUpdater {\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    async init(particle) {\n        const { initParticle } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6824));\n        initParticle(particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const { updateRoll } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6824));\n        updateRoll(particle, delta);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-roll/browser/RollUpdater.js_+_2_modules?')},6824:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initParticle: () => (/* binding */ initParticle),\n/* harmony export */   updateRoll: () => (/* binding */ updateRoll)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360;\nfunction initParticle(particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === "horizontal" || rollOpt.mode === "both",\n        vertical: rollOpt.mode === "vertical" || rollOpt.mode === "both",\n        angle: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() * doublePI,\n        speed: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(rollOpt.speed) / maxAngle,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .rangeColorToHsl */ .R5)(rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)() >= _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .halfRandom */ .N3 ? "darken" : "enlighten";\n        particle.roll.alter = {\n            type: alterType,\n            value: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(alterType === "darken" ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: "darken",\n            value: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: "enlighten",\n            value: (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(rollOpt.enlighten.value),\n        };\n    }\n}\nfunction updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = doublePI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-roll/browser/Utils.js?')},7091:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  RotateUpdater: () => (/* binding */ RotateUpdater)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-rotate/browser/Options/Classes/RotateAnimation.js\n\nclass RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = (0,browser/* setRangeValue */.DT)(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = (0,browser/* setRangeValue */.DT)(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-rotate/browser/Options/Classes/Rotate.js\n\n\nclass Rotate extends browser/* ValueWithRandom */.PV {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = "clockwise";\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-rotate/browser/RotateUpdater.js\n\n\nconst RotateUpdater_double = 2, doublePI = Math.PI * RotateUpdater_double, identity = 1, doublePIDeg = 360;\nclass RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (0,browser/* degToRad */.pu)((0,browser/* getRangeValue */.VG)(rotateOptions.value)),\n            min: 0,\n            max: doublePI,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === "random") {\n            const index = Math.floor((0,browser/* getRandom */.G0)() * RotateUpdater_double), minIndex = 0;\n            rotateDirection = index > minIndex ? "counter-clockwise" : "clockwise";\n        }\n        switch (rotateDirection) {\n            case "counter-clockwise":\n            case "counterClockwise":\n                particle.rotate.status = "decreasing";\n                break;\n            case "clockwise":\n                particle.rotate.status = "increasing";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = identity - (0,browser/* getRangeValue */.VG)(rotateAnimation.decay);\n            particle.rotate.velocity =\n                ((0,browser/* getRangeValue */.VG)(rotateAnimation.speed) / doublePIDeg) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= (0,browser/* getRandom */.G0)();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        if (!particle.rotate) {\n            return;\n        }\n        (0,browser/* updateAnimation */.UC)(particle, particle.rotate, false, "none", delta);\n        particle.rotation = particle.rotate.value;\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-rotate/browser/RotateUpdater.js_+_2_modules?')},8289:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadRotateUpdater: () => (/* binding */ loadRotateUpdater)\n/* harmony export */ });\nasync function loadRotateUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("rotate", async (container) => {\n        const { RotateUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7091));\n        return new RotateUpdater(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-rotate/browser/index.js?')},8537:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SizeUpdater: () => (/* binding */ SizeUpdater)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst minLoops = 0;\nclass SizeUpdater {\n    async init(particle) {\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .percentDenominator */ .a5) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRandom */ .G0)();\n            }\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            ((particle.size.maxLoops ?? minLoops) <= minLoops ||\n                ((particle.size.maxLoops ?? minLoops) > minLoops &&\n                    (particle.size.loops ?? minLoops) < (particle.size.maxLoops ?? minLoops))));\n    }\n    reset(particle) {\n        particle.size.loops = minLoops;\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .updateAnimation */ .UC)(particle, particle.size, true, particle.options.size.animation.destroy, delta);\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-size/browser/SizeUpdater.js?")},2827:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadSizeUpdater: () => (/* binding */ loadSizeUpdater)\n/* harmony export */ });\nasync function loadSizeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("size", async () => {\n        const { SizeUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8537));\n        return new SizeUpdater();\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-size/browser/index.js?')},5558:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StrokeColorUpdater: () => (/* binding */ StrokeColorUpdater)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst defaultOpacity = 1;\nclass StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const container = this.container, options = particle.options;\n        const stroke = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .itemFromSingleOrMultiple */ .TA)(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getRangeValue */ .VG)(stroke.opacity ?? defaultOpacity);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .rangeColorToHsl */ .R5)(stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .getHslAnimationFromHsl */ .pz)(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .updateColor */ .Jv)(particle.strokeColor, delta);\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-stroke-color/browser/StrokeColorUpdater.js?")},7820:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadStrokeColorUpdater: () => (/* binding */ loadStrokeColorUpdater)\n/* harmony export */ });\nasync function loadStrokeColorUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("strokeColor", async (container) => {\n        const { StrokeColorUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5558));\n        return new StrokeColorUpdater(container);\n    }, refresh);\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-stroke-color/browser/index.js?')},8109:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  TiltUpdater: () => (/* binding */ TiltUpdater)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-tilt/browser/Options/Classes/TiltAnimation.js\n\nclass TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = (0,browser/* setRangeValue */.DT)(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = (0,browser/* setRangeValue */.DT)(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-tilt/browser/Options/Classes/Tilt.js\n\n\nclass Tilt extends browser/* ValueWithRandom */.PV {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = "clockwise";\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-tilt/browser/TiltUpdater.js\n\n\nconst identity = 1, TiltUpdater_double = 2, doublePI = Math.PI * TiltUpdater_double, maxAngle = 360;\nclass TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    async init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: (0,browser/* degToRad */.pu)((0,browser/* getRangeValue */.VG)(tiltOptions.value)),\n            sinDirection: (0,browser/* getRandom */.G0)() >= browser/* halfRandom */.N3 ? identity : -identity,\n            cosDirection: (0,browser/* getRandom */.G0)() >= browser/* halfRandom */.N3 ? identity : -identity,\n            min: 0,\n            max: doublePI,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === "random") {\n            const index = Math.floor((0,browser/* getRandom */.G0)() * TiltUpdater_double), minIndex = 0;\n            tiltDirection = index > minIndex ? "counter-clockwise" : "clockwise";\n        }\n        switch (tiltDirection) {\n            case "counter-clockwise":\n            case "counterClockwise":\n                particle.tilt.status = "decreasing";\n                break;\n            case "clockwise":\n                particle.tilt.status = "increasing";\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = identity - (0,browser/* getRangeValue */.VG)(tiltAnimation.decay);\n            particle.tilt.velocity =\n                ((0,browser/* getRangeValue */.VG)(tiltAnimation.speed) / maxAngle) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= (0,browser/* getRandom */.G0)();\n            }\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.tilt) {\n            return;\n        }\n        (0,browser/* updateAnimation */.UC)(particle, particle.tilt, false, "none", delta);\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-tilt/browser/TiltUpdater.js_+_2_modules?')},670:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  TwinkleUpdater: () => (/* binding */ TwinkleUpdater)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js\n\nclass TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = browser/* OptionsColor */.Oi.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = (0,browser/* setRangeValue */.DT)(data.opacity);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js\n\nclass Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-twinkle/browser/TwinkleUpdater.js\n\n\nclass TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && (0,browser/* getRandom */.G0)() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? (0,browser/* getRangeValue */.VG)(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = (0,browser/* rangeColorToHsl */.R5)(twinkle.color), twinkleStyle = twinkleRgb ? (0,browser/* getStyleFromHsl */.LC)(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    async update() {\n        await Promise.resolve();\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-twinkle/browser/TwinkleUpdater.js_+_2_modules?")},818:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateWobble: () => (/* binding */ updateWobble)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8384);\n\nconst defaultDistance = 0, double = 2, doublePI = Math.PI * double, distanceFactor = 60;\nfunction updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? defaultDistance) * delta.factor)) /\n        (_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__/* .millisecondsToSeconds */ .Xu / distanceFactor), max = doublePI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-wobble/browser/Utils.js?")},7499:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  WobbleUpdater: () => (/* binding */ WobbleUpdater)\n});\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/engine/browser/index.js + 8 modules\nvar browser = __webpack_require__(8384);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-wobble/browser/Options/Classes/WobbleSpeed.js\n\nclass WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = (0,browser/* setRangeValue */.DT)(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = (0,browser/* setRangeValue */.DT)(data.move);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-wobble/browser/Options/Classes/Wobble.js\n\n\nclass Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = (0,browser/* setRangeValue */.DT)(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if ((0,browser/* isNumber */.Et)(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-wobble/browser/WobbleUpdater.js\n\n\nconst WobbleUpdater_double = 2, doublePI = Math.PI * WobbleUpdater_double, maxAngle = 360, moveSpeedFactor = 10, defaultDistance = 0;\nclass WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: (0,browser/* getRandom */.G0)() * doublePI,\n                angleSpeed: (0,browser/* getRangeValue */.VG)(wobbleOpt.speed.angle) / maxAngle,\n                moveSpeed: (0,browser/* getRangeValue */.VG)(wobbleOpt.speed.move) / moveSpeedFactor,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance =\n            (0,browser/* getRangeValue */.VG)(wobbleOpt?.distance ?? defaultDistance) * this.container.retina.pixelRatio;\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const { updateWobble } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 818));\n        updateWobble(particle, delta);\n    }\n}\n\n\n//# sourceURL=webpack://learning-js/./node_modules/@tsparticles/updater-wobble/browser/WobbleUpdater.js_+_2_modules?")},5992:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-absorbers/browser/index.js\nasync function loadAbsorbersPlugin(engine, refresh = true) {\n    const { AbsorbersPlugin } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 355));\n    await engine.addPlugin(new AbsorbersPlugin(), refresh);\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-destroy/browser/index.js\nasync function loadDestroyUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("destroy", async (container) => {\n        const { DestroyUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4763));\n        return new DestroyUpdater(engine, container);\n    }, refresh);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters/browser/index.js\nasync function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        const { ShapeManager } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7585));\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShapeGenerator) {\n        engine.addEmitterShapeGenerator = (name, generator) => {\n            engine.emitterShapeManager?.addShapeGenerator(name, generator);\n        };\n    }\n    const { EmittersPlugin } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4377)), plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters-shape-circle/browser/index.js\nasync function loadEmittersShapeCircle(engine, refresh = true) {\n    const emittersEngine = engine, { EmittersCircleShapeGenerator } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 4297));\n    emittersEngine.addEmitterShapeGenerator?.("circle", new EmittersCircleShapeGenerator());\n    await emittersEngine.refresh(refresh);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/plugin-emitters-shape-square/browser/index.js\nasync function loadEmittersShapeSquare(engine, refresh = true) {\n    const emittersEngine = engine, { EmittersSquareShapeGenerator } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 1096));\n    emittersEngine.addEmitterShapeGenerator?.("square", new EmittersSquareShapeGenerator());\n    await emittersEngine.refresh(refresh);\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/interaction-external-trail/browser/Options/Classes/Trail.js\nvar Trail = __webpack_require__(5373);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/interaction-external-trail/browser/index.js\nasync function loadExternalTrailInteraction(engine, refresh = true) {\n    await engine.addInteractor("externalTrail", async (container) => {\n        const { TrailMaker } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 63));\n        return new TrailMaker(container);\n    }, refresh);\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-roll/browser/index.js\nasync function loadRollUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("roll", async () => {\n        const { RollUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9718));\n        return new RollUpdater();\n    }, refresh);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/slim/browser/index.js\nasync function loadSlim(engine, refresh = true) {\n    const { loadParallaxMover } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3747)), { loadExternalAttractInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5914)), { loadExternalBounceInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6955)), { loadExternalBubbleInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5745)), { loadExternalConnectInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2033)), { loadExternalGrabInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9125)), { loadExternalPauseInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 6413)), { loadExternalPushInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8551)), { loadExternalRemoveInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8931)), { loadExternalRepulseInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 301)), { loadExternalSlowInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 9838)), { loadParticlesAttractInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 630)), { loadParticlesCollisionsInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2310)), { loadParticlesLinksInteraction } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 5309)), { loadEasingQuadPlugin } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8815)), { loadEmojiShape } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 2878)), { loadImageShape } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3709)), { loadLineShape } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 840)), { loadPolygonShape } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 3986)), { loadSquareShape } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 225)), { loadStarShape } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 258)), { loadLifeUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 444)), { loadRotateUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8289)), { loadStrokeColorUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7820)), { loadBasic } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8506));\n    await loadParallaxMover(engine, false);\n    await loadExternalAttractInteraction(engine, false);\n    await loadExternalBounceInteraction(engine, false);\n    await loadExternalBubbleInteraction(engine, false);\n    await loadExternalConnectInteraction(engine, false);\n    await loadExternalGrabInteraction(engine, false);\n    await loadExternalPauseInteraction(engine, false);\n    await loadExternalPushInteraction(engine, false);\n    await loadExternalRemoveInteraction(engine, false);\n    await loadExternalRepulseInteraction(engine, false);\n    await loadExternalSlowInteraction(engine, false);\n    await loadParticlesAttractInteraction(engine, false);\n    await loadParticlesCollisionsInteraction(engine, false);\n    await loadParticlesLinksInteraction(engine, false);\n    await loadEasingQuadPlugin();\n    await loadEmojiShape(engine, false);\n    await loadImageShape(engine, false);\n    await loadLineShape(engine, false);\n    await loadPolygonShape(engine, false);\n    await loadSquareShape(engine, false);\n    await loadStarShape(engine, false);\n    await loadLifeUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadStrokeColorUpdater(engine, false);\n    await loadBasic(engine, refresh);\n}\n\n// EXTERNAL MODULE: ./node_modules/@tsparticles/shape-text/browser/TextDrawer.js\nvar browser_TextDrawer = __webpack_require__(1603);\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/shape-text/browser/index.js\n\nasync function loadTextShape(engine, refresh = true) {\n    const { TextDrawer } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 1603));\n    await engine.addShape(browser_TextDrawer/* validTypes */.u, new TextDrawer(), refresh);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-tilt/browser/index.js\nasync function loadTiltUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("tilt", async (container) => {\n        const { TiltUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 8109));\n        return new TiltUpdater(container);\n    }, refresh);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-twinkle/browser/index.js\nasync function loadTwinkleUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("twinkle", async () => {\n        const { TwinkleUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 670));\n        return new TwinkleUpdater();\n    }, refresh);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@tsparticles/updater-wobble/browser/index.js\nasync function loadWobbleUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater("wobble", async (container) => {\n        const { WobbleUpdater } = await Promise.resolve(/* import() */).then(__webpack_require__.bind(__webpack_require__, 7499));\n        return new WobbleUpdater(container);\n    }, refresh);\n}\n\n;// CONCATENATED MODULE: ./node_modules/tsparticles/browser/index.js\n\n\n\n\n\n\n\n\n\n\n\n\nasync function loadFull(engine, refresh = true) {\n    await loadDestroyUpdater(engine, false);\n    await loadRollUpdater(engine, false);\n    await loadTiltUpdater(engine, false);\n    await loadTwinkleUpdater(engine, false);\n    await loadWobbleUpdater(engine, false);\n    await loadTextShape(engine, false);\n    await loadExternalTrailInteraction(engine, false);\n    await loadAbsorbersPlugin(engine, false);\n    await loadEmittersPlugin(engine, false);\n    await loadEmittersShapeCircle(engine, false);\n    await loadEmittersShapeSquare(engine, false);\n    await loadSlim(engine, refresh);\n}\n\n;// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n(async() => {\r\n    await loadFull(tsParticles);\r\n    await tsParticles.load({\r\n        id: "tsparticles",\r\n        options: {\r\n            background: {\r\n                color: "#000",\r\n                image: "url(https://particles.js.org/images/SpaceX.png)",\r\n                repeat: "no-repeat",\r\n                size: "40%",\r\n                position: "60% 50%"\r\n            },\r\n            interactivity: {\r\n                events: {\r\n                    onClick: {\r\n                        enable: true,\r\n                        mode: "repulse"\r\n                    },\r\n                    onHover: {\r\n                        enable: true,\r\n                        mode: "bubble"\r\n                    }\r\n                },\r\n                modes: {\r\n                bubble: {\r\n                    distance: 200,\r\n                    duration: 2,\r\n                    opacity: 0,\r\n                    size: 0,\r\n                    speed: 3\r\n                },\r\n                repulse: {\r\n                    distance: 400,\r\n                    duration: 0.4\r\n                }\r\n                }\r\n            },\r\n            particles: {\r\n                color: { value: "#ffffff" },\r\n                move: {\r\n                    direction: "none",\r\n                    enable: true,\r\n                    outModes: "out",\r\n                    random: true,\r\n                    speed: 0.3\r\n                },\r\n                number: {\r\n                    density: {\r\n                        enable: true\r\n                    },\r\n                    value: 600\r\n                },\r\n                opacity: {\r\n                    animation: {\r\n                        enable: true,\r\n                        speed: 5\r\n                    },\r\n                    value: { min: 0.3, max: 0.6 }\r\n                },\r\n                shape: {\r\n                    type: "circle"\r\n                },\r\n                size: {\r\n                    value: 1\r\n                }\r\n            }\r\n        }\r\n    });\r\n})()\n\n//# sourceURL=webpack://learning-js/./src/index.js_+_13_modules?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var __webpack_exports__=__webpack_require__(5992)})();